
Node.js
Node.js logo.svg
Original author(s)	Ryan Dahl
Developer(s)	Joyent
Initial release	May 27, 2009; 9 years ago[1]
Stable release	
10.4.0 / June 6, 2018; 6 days ago[2]
Repository	
https://github.com/nodejs/node
Edit this at Wikidata
Written in	C, C++, JavaScript
Operating system	Linux, macOS, Microsoft Windows, SmartOS, FreeBSD, IBM AIX[3]
Type	Run-time environment
License	MIT[4]
Website	nodejs.org
Node.js is an open-source, cross-platform JavaScript run-time environment that executes JavaScript code server-side. Historically, JavaScript was used primarily for client-side scripting, in which scripts written in JavaScript are embedded in a webpage's HTML and run client-side by a JavaScript engine in the user's web browser. Node.js lets developers use JavaScript for server-side scriptingâ€”running scripts server-side to produce dynamic web page content before the page is sent to the user's web browser. Consequently, Node.js represents a "JavaScript everywhere" paradigm,[5] unifying web application development around a single programming language, rather than different languages for server side and client side scripts.

Though .js is the conventional filename extension for JavaScript code, the name "Node.js" does not refer to a particular file in this context and is merely the name of the product. Node.js has an event-driven architecture capable of asynchronous I/O. These design choices aim to optimize throughput and scalability in web applications with many input/output operations, as well as for real-time Web applications (e.g., real-time communication programs and browser games).[6]

The Node.js distributed development project, governed by the Node.js Foundation,[7] is facilitated by the Linux Foundation's Collaborative Projects program.[8]

Corporate users of Node.js software include GoDaddy,[9] Groupon,[10] IBM,[11] LinkedIn,[12][13] Microsoft,[14][15] Netflix,[16] PayPal,[17][18] Rakuten, SAP, Tuenti,[19] Voxer,[20] Walmart,[21] and Yahoo!.[22]

Contents 
1	History
2	Overview
2.1	Platform architecture
2.2	Industry support
3	Releases
4	Technical details
4.1	Threading
4.2	V8
4.3	Package management
4.4	Unified API
4.5	Event loop
5	Project governance
6	See also
7	References
8	Further reading
9	External links
History

Ryan Dahl, creator of Node.js, in 2010
Node.js was originally written by Ryan Dahl in 2009,[23] about thirteen years after the introduction of the first server-side JavaScript environment, Netscape's LiveWire Pro Web.[24] The initial release supported only Linux and Mac OS X. Its development and maintenance was led by Dahl and later sponsored by Joyent.[25]

Dahl was inspired to create Node.js after seeing a file upload progress bar on Flickr. The browser did not know how much of the file had been uploaded and had to query the Web server. Dahl desired an easier way.[6][26]

Dahl criticized the limited possibilities of the most popular web server in 2009, Apache HTTP Server, to handle a lot of concurrent connections (up to 10,000 and more) and the most common way of creating code (sequential programming), when code either blocked the entire process or implied multiple execution stacks in the case of simultaneous connections.[27]

Dahl demonstrated the project at the inaugural European JSConf on November 8, 2009.[28][29][30] Node.js combined Google's V8 JavaScript engine, an event loop, and a low-level I/O API.[31]

In January 2010, a package manager was introduced for the Node.js environment called npm.[32] The package manager makes it easier for programmers to publish and share source code of Node.js libraries and is designed to simplify installation, updating, and uninstallation of libraries.[31]

In June 2011, Microsoft and Joyent implemented a native Windows version of Node.js.[33] The first Node.js build supporting Windows was released in July 2011.

In January 2012, Dahl stepped aside, promoting coworker and npm creator Isaac Schlueter to manage the project.[34] In January 2014, Schlueter announced that Timothy J. Fontaine would lead the project.[35]

In December 2014, Fedor Indutny started io.js, a fork of Node.js. Due to the internal conflict over Joyent's governance, io.js was created as an open governance alternative with a separate technical committee.[36][37] Unlike Node.js,[38] the authors planned to keep io.js up-to-date with the latest releases of the Google V8 JavaScript engine.[39]

In February 2015, the intent to form a neutral Node.js Foundation was announced. By June 2015, the Node.js and io.js communities voted to work together under the Node.js Foundation.[40]

In September 2015, Node.js v0.12 and io.js v3.3 were merged back together into Node v4.0.[41] This brought V8 ES6 features into Node.js, and a long-term support release cycle.[42] As of 2016, the io.js website recommends that developers switch back to Node.js and that no further releases of io.js are planned due to the merger.[43]

Overview
Node.js allows the creation of Web servers and networking tools using JavaScript and a collection of "modules" that handle various core functionality.[28][31][44][45][46] Modules are provided for file system I/O, networking (DNS, HTTP, TCP, TLS/SSL, or UDP), binary data (buffers), cryptography functions, data streams, and other core functions.[31][45][47] Node.js's modules use an API designed to reduce the complexity of writing server applications.[31][45]

Node.js is officially supported on Linux, macOS, Microsoft Windows, SmartOS, FreeBSD, and IBM AIX.[3] The provided source code may also be built on similar operating systems or be modified by third parties to support others such as NonStop[48] and Unix servers. Alternatively, they can be written with CoffeeScript[49] (a JavaScript alternative), Dart or TypeScript (strongly typed forms of JavaScript), or any other language that can compile to JavaScript.[49][50]

Node.js is primarily used to build network programs such as Web servers.[44] The biggest difference between Node.js and PHP is that most functions in PHP block until completion (commands execute only after previous commands finish), while Node.js functions are non-blocking (commands execute concurrently or even in parallel,[51][52] and use callbacks to signal completion or failure).[44]

Platform architecture
Node.js brings event-driven programming to web servers, enabling development of fast web servers in JavaScript.[31] Developers can create highly scalable servers without using threading, by using a simplified model of event-driven programming that uses callbacks to signal the completion of a task.[31] Node.js connects the ease of a scripting language (JavaScript) with the power of Unix network programming.[31]

Node.js was built on the Google V8 JavaScript engine since it was open-sourced under the BSD license. It is extremely fast and proficient with internet fundamentals such as HTTP, DNS, TCP.[28] Also, JavaScript was a well-known language, making Node.js immediately accessible to the entire web development community.[28]

Industry support
There are thousands of open-source libraries for Node.js, most of them hosted on the npm website. The Node.js developer community has two main mailing lists and the IRC channel #node.js on freenode. There are multiple developer conferences and events that support the Node.js community including NodeConf, Node Interactive and Node Summit as well as a number of regional events.

The open-source community has developed web frameworks to accelerate the development of applications. Such frameworks include Connect, Express.js, Socket.IO, Koa.js, Hapi.js, Sails.js, Meteor, Derby, and many others.[31][53] Various packages have also been created for interfacing with other languages or runtime environments such as Microsoft .NET.[54]

Modern desktop IDEs provide editing and debugging features specifically for Node.js applications. Such IDEs include Atom, Brackets, JetBrains WebStorm,[55][56] Microsoft Visual Studio (with Node.js Tools for Visual Studio,[57] or TypeScript with Node definitions,[58][59][60][61]) NetBeans,[62] Nodeclipse Enide Studio [63] (Eclipse-based), and Visual Studio Code.[64][65] Certain online web-based IDEs also support Node.js, such as Codeanywhere, Codenvy, Cloud9 IDE, Koding, and the visual flow editor in Node-RED.

Releases
Release	Code name	Release date	LTS status	Active LTS start	Maintenance start	Maintenance end
v0.10.x		2013-03-11	End-of-life	-	2015-10-01	2016-10-31
v0.12.x		2015-02-06	End-of-life	-	2016-04-01	2016-12-31
4.x	Argon[66]	2015-09-08	End-of-life	2015-10-01	2017-04-01	2018-04-30
5.x		2015-10-29	No LTS	N/A	2016-06-30
6.x	Boron[66]	2016-04-26	Maintenance	2016-10-18	2018-04-30	April 2019
7.x		2016-10-25	No LTS	N/A	2017-06-30
8.x	Carbon[66]	2017-05-30	Active	2017-10-31	April 2019	December 2019
9.x		2017-10-01	No LTS	N/A	June 2018
10.x	Dubnium[66]	2018-04-24	Active	October 2018	April 2020	April 2021
11.x[66]		2018-10-23	No LTS	N/A	June 2019
New major releases of Node.js are cut from the GitHub master branch every six months. Even-numbered versions are cut in April and odd-numbered versions are cut in October. When a new odd version is released, the previous even version undergoes transition to Long Term Support (LTS), which gives that version 18 months of active support from the date it is designated LTS. After these 18 months expire, an LTS release receives an additional 12 months of maintenance support. An active version receives non-breaking backports of changes a few weeks after they land in the current release. A maintenance release only receives critical fixes and documentation updates.[66] The LTS Working Group manages strategy and policy in collaboration with the Technical Steering Committee of the Node.js Foundation.

Technical details

This section may be too technical for most readers to understand. Please help improve it to make it understandable to non-experts, without removing the technical details. (August 2015) (Learn how and when to remove this template message)
Node.js is a Javascript runtime environment that processes incoming requests in a loop, called the event loop.

Threading
Node.js operates on a single thread, using non-blocking I/O calls, allowing it to support tens of thousands of concurrent connections without incurring the cost of thread context switching.[67] The design of sharing a single thread among all the requests that use the observer pattern is intended for building highly concurrent applications, where any function performing I/O must use a callback. To accommodate the single-threaded event loop, Node.js uses the libuv libraryâ€”which, in turn, uses a fixed-sized thread pool that handles some of the non-blocking asynchronous I/O operations.[6]

A downside of this single-threaded approach is that Node.js doesn't allow vertical scaling by increasing the number of CPU cores of the machine it is running on without using an additional module, such as cluster,[51] StrongLoop Process Manager,[68] or pm2.[69] However, developers can increase the default number of threads in the libuv thread pool. The server operating system (OS) is likely to distribute these threads across multiple cores.[70]

A thread pool handles execution of parallel tasks in Node.js. The main thread call functions post tasks to the shared task queue, which threads in the thread pool pull and execute. Inherently non-blocking system functions such as networking translate to kernel-side non-blocking sockets, while inherently blocking system functions such as file I/O run in a blocking way on their own threads. When a thread in the thread pool completes a task, it informs the main thread of this, which in turn, wakes up and executes the registered callback. Since Node.js handles callbacks in serial on the main thread, long lasting computations and other CPU-bound tasks freeze the entire event-loop until completion.[citation needed]

V8
V8 is the JavaScript execution engine built for Google Chrome and open-sourced by Google in 2008. Written in C++, V8 compiles JavaScript source code to native machine code instead of interpreting it in real time.[6]

Node.js uses libuv to handle asynchronous events. Libuv is an abstraction layer for network and file system functionality on both Windows and POSIX-based systems such as Linux, macOS, OSS on NonStop, and Unix.

The core functionality of Node.js resides in a JavaScript library. The Node.js bindings, written in C++, connect these technologies to each other and to the operating system.

Package management
npm is the pre-installed package manager for the Node.js server platform. It installs Node.js programs from the npm registry, organizing the installation and management of third-party Node.js programs. Packages in the npm registry can range from simple helper libraries such as Lodash to task runners such as Grunt.

Unified API
Node.js can be combined with a browser, a database that supports JSON data (such as Postgres,[71] MongoDB, or CouchDB) and JSON for a unified JavaScript development stack. With the adaptation of what were essentially server-side development patterns such as MVC, MVP, MVVM, etc., Node.js allows the reuse of the same model and service interface between client-side and server-side.

Event loop
Node.js registers with the operating system so the OS notifies it of connections and issues a callback. Within the Node.js runtime, each connection is a small heap allocation. Traditionally, relatively heavyweight OS processes or threads handled each connection. Node.js uses an event loop for scalability, instead of processes or threads.[72] In contrast to other event-driven servers, Node.js's event loop does not need to be called explicitly. Instead callbacks are defined, and the server automatically enters the event loop at the end of the callback definition. Node.js exits the event loop when there are no further callbacks to be performed.

Project governance
In 2015, various branches of the greater Node.js community began working under the vendor-neutral Node.js Foundation. The stated purpose of the organization "is to enable widespread adoption and help accelerate development of Node.js and other related modules through an open governance model that encourages participation, technical contribution, and a framework for long-term stewardship by an ecosystem invested in Node.js' success."[73]

The Node.js Foundation Technical Steering Committee (TSC) is the technical governing body of the Node.js Foundation. The TSC is responsible for the core Node.js repo as well as dependent and adjacent projects. Generally the TSC delegates administration of these projects to working groups or committees.[74] The LTS group that manages long term supported releases is one such group. Other current groups include: Website, Streams, Build, Diagnostics, i18n, Evangelism, Docker, Addon API, Benchmarking, Post-mortem, Intl, Documentation, and Testing.[75]

In August, 2017, a governance breakdown precipitated efforts to repair the resulting damage and to create a path to future stability of governance.[76]

See also
	Free software portal
List of server-side JavaScript implementations
List of JavaScript libraries
MEAN (software bundle)
Online JavaScript IDE
Rhino (JavaScript engine)
Application server

Node.js
Node.js logo.svg
Original author(s)	Ryan Dahl
Developer(s)	Joyent
Initial release	May 27, 2009; 9 years ago[1]
Stable release	
10.4.0 / June 6, 2018; 6 days ago[2]
Repository	
https://github.com/nodejs/node
Edit this at Wikidata
Written in	C, C++, JavaScript
Operating system	Linux, macOS, Microsoft Windows, SmartOS, FreeBSD, IBM AIX[3]
Type	Run-time environment
License	MIT[4]
Website	nodejs.org
Node.js is an open-source, cross-platform JavaScript run-time environment that executes JavaScript code server-side. Historically, JavaScript was used primarily for client-side scripting, in which scripts written in JavaScript are embedded in a webpage's HTML and run client-side by a JavaScript engine in the user's web browser. Node.js lets developers use JavaScript for server-side scriptingâ€”running scripts server-side to produce dynamic web page content before the page is sent to the user's web browser. Consequently, Node.js represents a "JavaScript everywhere" paradigm,[5] unifying web application development around a single programming language, rather than different languages for server side and client side scripts.

Though .js is the conventional filename extension for JavaScript code, the name "Node.js" does not refer to a particular file in this context and is merely the name of the product. Node.js has an event-driven architecture capable of asynchronous I/O. These design choices aim to optimize throughput and scalability in web applications with many input/output operations, as well as for real-time Web applications (e.g., real-time communication programs and browser games).[6]

The Node.js distributed development project, governed by the Node.js Foundation,[7] is facilitated by the Linux Foundation's Collaborative Projects program.[8]

Corporate users of Node.js software include GoDaddy,[9] Groupon,[10] IBM,[11] LinkedIn,[12][13] Microsoft,[14][15] Netflix,[16] PayPal,[17][18] Rakuten, SAP, Tuenti,[19] Voxer,[20] Walmart,[21] and Yahoo!.[22]

Contents 
1	History
2	Overview
2.1	Platform architecture
2.2	Industry support
3	Releases
4	Technical details
4.1	Threading
4.2	V8
4.3	Package management
4.4	Unified API
4.5	Event loop
5	Project governance
6	See also
7	References
8	Further reading
9	External links
History

Ryan Dahl, creator of Node.js, in 2010
Node.js was originally written by Ryan Dahl in 2009,[23] about thirteen years after the introduction of the first server-side JavaScript environment, Netscape's LiveWire Pro Web.[24] The initial release supported only Linux and Mac OS X. Its development and maintenance was led by Dahl and later sponsored by Joyent.[25]

Dahl was inspired to create Node.js after seeing a file upload progress bar on Flickr. The browser did not know how much of the file had been uploaded and had to query the Web server. Dahl desired an easier way.[6][26]

Dahl criticized the limited possibilities of the most popular web server in 2009, Apache HTTP Server, to handle a lot of concurrent connections (up to 10,000 and more) and the most common way of creating code (sequential programming), when code either blocked the entire process or implied multiple execution stacks in the case of simultaneous connections.[27]

Dahl demonstrated the project at the inaugural European JSConf on November 8, 2009.[28][29][30] Node.js combined Google's V8 JavaScript engine, an event loop, and a low-level I/O API.[31]

In January 2010, a package manager was introduced for the Node.js environment called npm.[32] The package manager makes it easier for programmers to publish and share source code of Node.js libraries and is designed to simplify installation, updating, and uninstallation of libraries.[31]

In June 2011, Microsoft and Joyent implemented a native Windows version of Node.js.[33] The first Node.js build supporting Windows was released in July 2011.

In January 2012, Dahl stepped aside, promoting coworker and npm creator Isaac Schlueter to manage the project.[34] In January 2014, Schlueter announced that Timothy J. Fontaine would lead the project.[35]

In December 2014, Fedor Indutny started io.js, a fork of Node.js. Due to the internal conflict over Joyent's governance, io.js was created as an open governance alternative with a separate technical committee.[36][37] Unlike Node.js,[38] the authors planned to keep io.js up-to-date with the latest releases of the Google V8 JavaScript engine.[39]

In February 2015, the intent to form a neutral Node.js Foundation was announced. By June 2015, the Node.js and io.js communities voted to work together under the Node.js Foundation.[40]

In September 2015, Node.js v0.12 and io.js v3.3 were merged back together into Node v4.0.[41] This brought V8 ES6 features into Node.js, and a long-term support release cycle.[42] As of 2016, the io.js website recommends that developers switch back to Node.js and that no further releases of io.js are planned due to the merger.[43]

Overview
Node.js allows the creation of Web servers and networking tools using JavaScript and a collection of "modules" that handle various core functionality.[28][31][44][45][46] Modules are provided for file system I/O, networking (DNS, HTTP, TCP, TLS/SSL, or UDP), binary data (buffers), cryptography functions, data streams, and other core functions.[31][45][47] Node.js's modules use an API designed to reduce the complexity of writing server applications.[31][45]

Node.js is officially supported on Linux, macOS, Microsoft Windows, SmartOS, FreeBSD, and IBM AIX.[3] The provided source code may also be built on similar operating systems or be modified by third parties to support others such as NonStop[48] and Unix servers. Alternatively, they can be written with CoffeeScript[49] (a JavaScript alternative), Dart or TypeScript (strongly typed forms of JavaScript), or any other language that can compile to JavaScript.[49][50]

Node.js is primarily used to build network programs such as Web servers.[44] The biggest difference between Node.js and PHP is that most functions in PHP block until completion (commands execute only after previous commands finish), while Node.js functions are non-blocking (commands execute concurrently or even in parallel,[51][52] and use callbacks to signal completion or failure).[44]

Platform architecture
Node.js brings event-driven programming to web servers, enabling development of fast web servers in JavaScript.[31] Developers can create highly scalable servers without using threading, by using a simplified model of event-driven programming that uses callbacks to signal the completion of a task.[31] Node.js connects the ease of a scripting language (JavaScript) with the power of Unix network programming.[31]

Node.js was built on the Google V8 JavaScript engine since it was open-sourced under the BSD license. It is extremely fast and proficient with internet fundamentals such as HTTP, DNS, TCP.[28] Also, JavaScript was a well-known language, making Node.js immediately accessible to the entire web development community.[28]

Industry support
There are thousands of open-source libraries for Node.js, most of them hosted on the npm website. The Node.js developer community has two main mailing lists and the IRC channel #node.js on freenode. There are multiple developer conferences and events that support the Node.js community including NodeConf, Node Interactive and Node Summit as well as a number of regional events.

The open-source community has developed web frameworks to accelerate the development of applications. Such frameworks include Connect, Express.js, Socket.IO, Koa.js, Hapi.js, Sails.js, Meteor, Derby, and many others.[31][53] Various packages have also been created for interfacing with other languages or runtime environments such as Microsoft .NET.[54]

Modern desktop IDEs provide editing and debugging features specifically for Node.js applications. Such IDEs include Atom, Brackets, JetBrains WebStorm,[55][56] Microsoft Visual Studio (with Node.js Tools for Visual Studio,[57] or TypeScript with Node definitions,[58][59][60][61]) NetBeans,[62] Nodeclipse Enide Studio [63] (Eclipse-based), and Visual Studio Code.[64][65] Certain online web-based IDEs also support Node.js, such as Codeanywhere, Codenvy, Cloud9 IDE, Koding, and the visual flow editor in Node-RED.

Releases
Release	Code name	Release date	LTS status	Active LTS start	Maintenance start	Maintenance end
v0.10.x		2013-03-11	End-of-life	-	2015-10-01	2016-10-31
v0.12.x		2015-02-06	End-of-life	-	2016-04-01	2016-12-31
4.x	Argon[66]	2015-09-08	End-of-life	2015-10-01	2017-04-01	2018-04-30
5.x		2015-10-29	No LTS	N/A	2016-06-30
6.x	Boron[66]	2016-04-26	Maintenance	2016-10-18	2018-04-30	April 2019
7.x		2016-10-25	No LTS	N/A	2017-06-30
8.x	Carbon[66]	2017-05-30	Active	2017-10-31	April 2019	December 2019
9.x		2017-10-01	No LTS	N/A	June 2018
10.x	Dubnium[66]	2018-04-24	Active	October 2018	April 2020	April 2021
11.x[66]		2018-10-23	No LTS	N/A	June 2019
New major releases of Node.js are cut from the GitHub master branch every six months. Even-numbered versions are cut in April and odd-numbered versions are cut in October. When a new odd version is released, the previous even version undergoes transition to Long Term Support (LTS), which gives that version 18 months of active support from the date it is designated LTS. After these 18 months expire, an LTS release receives an additional 12 months of maintenance support. An active version receives non-breaking backports of changes a few weeks after they land in the current release. A maintenance release only receives critical fixes and documentation updates.[66] The LTS Working Group manages strategy and policy in collaboration with the Technical Steering Committee of the Node.js Foundation.

Technical details

This section may be too technical for most readers to understand. Please help improve it to make it understandable to non-experts, without removing the technical details. (August 2015) (Learn how and when to remove this template message)
Node.js is a Javascript runtime environment that processes incoming requests in a loop, called the event loop.

Threading
Node.js operates on a single thread, using non-blocking I/O calls, allowing it to support tens of thousands of concurrent connections without incurring the cost of thread context switching.[67] The design of sharing a single thread among all the requests that use the observer pattern is intended for building highly concurrent applications, where any function performing I/O must use a callback. To accommodate the single-threaded event loop, Node.js uses the libuv libraryâ€”which, in turn, uses a fixed-sized thread pool that handles some of the non-blocking asynchronous I/O operations.[6]

A downside of this single-threaded approach is that Node.js doesn't allow vertical scaling by increasing the number of CPU cores of the machine it is running on without using an additional module, such as cluster,[51] StrongLoop Process Manager,[68] or pm2.[69] However, developers can increase the default number of threads in the libuv thread pool. The server operating system (OS) is likely to distribute these threads across multiple cores.[70]

A thread pool handles execution of parallel tasks in Node.js. The main thread call functions post tasks to the shared task queue, which threads in the thread pool pull and execute. Inherently non-blocking system functions such as networking translate to kernel-side non-blocking sockets, while inherently blocking system functions such as file I/O run in a blocking way on their own threads. When a thread in the thread pool completes a task, it informs the main thread of this, which in turn, wakes up and executes the registered callback. Since Node.js handles callbacks in serial on the main thread, long lasting computations and other CPU-bound tasks freeze the entire event-loop until completion.[citation needed]

V8
V8 is the JavaScript execution engine built for Google Chrome and open-sourced by Google in 2008. Written in C++, V8 compiles JavaScript source code to native machine code instead of interpreting it in real time.[6]

Node.js uses libuv to handle asynchronous events. Libuv is an abstraction layer for network and file system functionality on both Windows and POSIX-based systems such as Linux, macOS, OSS on NonStop, and Unix.

The core functionality of Node.js resides in a JavaScript library. The Node.js bindings, written in C++, connect these technologies to each other and to the operating system.

Package management
npm is the pre-installed package manager for the Node.js server platform. It installs Node.js programs from the npm registry, organizing the installation and management of third-party Node.js programs. Packages in the npm registry can range from simple helper libraries such as Lodash to task runners such as Grunt.

Unified API
Node.js can be combined with a browser, a database that supports JSON data (such as Postgres,[71] MongoDB, or CouchDB) and JSON for a unified JavaScript development stack. With the adaptation of what were essentially server-side development patterns such as MVC, MVP, MVVM, etc., Node.js allows the reuse of the same model and service interface between client-side and server-side.

Event loop
Node.js registers with the operating system so the OS notifies it of connections and issues a callback. Within the Node.js runtime, each connection is a small heap allocation. Traditionally, relatively heavyweight OS processes or threads handled each connection. Node.js uses an event loop for scalability, instead of processes or threads.[72] In contrast to other event-driven servers, Node.js's event loop does not need to be called explicitly. Instead callbacks are defined, and the server automatically enters the event loop at the end of the callback definition. Node.js exits the event loop when there are no further callbacks to be performed.

Project governance
In 2015, various branches of the greater Node.js community began working under the vendor-neutral Node.js Foundation. The stated purpose of the organization "is to enable widespread adoption and help accelerate development of Node.js and other related modules through an open governance model that encourages participation, technical contribution, and a framework for long-term stewardship by an ecosystem invested in Node.js' success."[73]

The Node.js Foundation Technical Steering Committee (TSC) is the technical governing body of the Node.js Foundation. The TSC is responsible for the core Node.js repo as well as dependent and adjacent projects. Generally the TSC delegates administration of these projects to working groups or committees.[74] The LTS group that manages long term supported releases is one such group. Other current groups include: Website, Streams, Build, Diagnostics, i18n, Evangelism, Docker, Addon API, Benchmarking, Post-mortem, Intl, Documentation, and Testing.[75]

In August, 2017, a governance breakdown precipitated efforts to repair the resulting damage and to create a path to future stability of governance.[76]

See also
	Free software portal
List of server-side JavaScript implementations
List of JavaScript libraries
MEAN (software bundle)
Online JavaScript IDE
Rhino (JavaScript engine)
Application server

Node.js
Node.js logo.svg
Original author(s)	Ryan Dahl
Developer(s)	Joyent
Initial release	May 27, 2009; 9 years ago[1]
Stable release	
10.4.0 / June 6, 2018; 6 days ago[2]
Repository	
https://github.com/nodejs/node
Edit this at Wikidata
Written in	C, C++, JavaScript
Operating system	Linux, macOS, Microsoft Windows, SmartOS, FreeBSD, IBM AIX[3]
Type	Run-time environment
License	MIT[4]
Website	nodejs.org
Node.js is an open-source, cross-platform JavaScript run-time environment that executes JavaScript code server-side. Historically, JavaScript was used primarily for client-side scripting, in which scripts written in JavaScript are embedded in a webpage's HTML and run client-side by a JavaScript engine in the user's web browser. Node.js lets developers use JavaScript for server-side scriptingâ€”running scripts server-side to produce dynamic web page content before the page is sent to the user's web browser. Consequently, Node.js represents a "JavaScript everywhere" paradigm,[5] unifying web application development around a single programming language, rather than different languages for server side and client side scripts.

Though .js is the conventional filename extension for JavaScript code, the name "Node.js" does not refer to a particular file in this context and is merely the name of the product. Node.js has an event-driven architecture capable of asynchronous I/O. These design choices aim to optimize throughput and scalability in web applications with many input/output operations, as well as for real-time Web applications (e.g., real-time communication programs and browser games).[6]

The Node.js distributed development project, governed by the Node.js Foundation,[7] is facilitated by the Linux Foundation's Collaborative Projects program.[8]

Corporate users of Node.js software include GoDaddy,[9] Groupon,[10] IBM,[11] LinkedIn,[12][13] Microsoft,[14][15] Netflix,[16] PayPal,[17][18] Rakuten, SAP, Tuenti,[19] Voxer,[20] Walmart,[21] and Yahoo!.[22]

Contents 
1	History
2	Overview
2.1	Platform architecture
2.2	Industry support
3	Releases
4	Technical details
4.1	Threading
4.2	V8
4.3	Package management
4.4	Unified API
4.5	Event loop
5	Project governance
6	See also
7	References
8	Further reading
9	External links
History

Ryan Dahl, creator of Node.js, in 2010
Node.js was originally written by Ryan Dahl in 2009,[23] about thirteen years after the introduction of the first server-side JavaScript environment, Netscape's LiveWire Pro Web.[24] The initial release supported only Linux and Mac OS X. Its development and maintenance was led by Dahl and later sponsored by Joyent.[25]

Dahl was inspired to create Node.js after seeing a file upload progress bar on Flickr. The browser did not know how much of the file had been uploaded and had to query the Web server. Dahl desired an easier way.[6][26]

Dahl criticized the limited possibilities of the most popular web server in 2009, Apache HTTP Server, to handle a lot of concurrent connections (up to 10,000 and more) and the most common way of creating code (sequential programming), when code either blocked the entire process or implied multiple execution stacks in the case of simultaneous connections.[27]

Dahl demonstrated the project at the inaugural European JSConf on November 8, 2009.[28][29][30] Node.js combined Google's V8 JavaScript engine, an event loop, and a low-level I/O API.[31]

In January 2010, a package manager was introduced for the Node.js environment called npm.[32] The package manager makes it easier for programmers to publish and share source code of Node.js libraries and is designed to simplify installation, updating, and uninstallation of libraries.[31]

In June 2011, Microsoft and Joyent implemented a native Windows version of Node.js.[33] The first Node.js build supporting Windows was released in July 2011.

In January 2012, Dahl stepped aside, promoting coworker and npm creator Isaac Schlueter to manage the project.[34] In January 2014, Schlueter announced that Timothy J. Fontaine would lead the project.[35]

In December 2014, Fedor Indutny started io.js, a fork of Node.js. Due to the internal conflict over Joyent's governance, io.js was created as an open governance alternative with a separate technical committee.[36][37] Unlike Node.js,[38] the authors planned to keep io.js up-to-date with the latest releases of the Google V8 JavaScript engine.[39]

In February 2015, the intent to form a neutral Node.js Foundation was announced. By June 2015, the Node.js and io.js communities voted to work together under the Node.js Foundation.[40]

In September 2015, Node.js v0.12 and io.js v3.3 were merged back together into Node v4.0.[41] This brought V8 ES6 features into Node.js, and a long-term support release cycle.[42] As of 2016, the io.js website recommends that developers switch back to Node.js and that no further releases of io.js are planned due to the merger.[43]

Overview
Node.js allows the creation of Web servers and networking tools using JavaScript and a collection of "modules" that handle various core functionality.[28][31][44][45][46] Modules are provided for file system I/O, networking (DNS, HTTP, TCP, TLS/SSL, or UDP), binary data (buffers), cryptography functions, data streams, and other core functions.[31][45][47] Node.js's modules use an API designed to reduce the complexity of writing server applications.[31][45]

Node.js is officially supported on Linux, macOS, Microsoft Windows, SmartOS, FreeBSD, and IBM AIX.[3] The provided source code may also be built on similar operating systems or be modified by third parties to support others such as NonStop[48] and Unix servers. Alternatively, they can be written with CoffeeScript[49] (a JavaScript alternative), Dart or TypeScript (strongly typed forms of JavaScript), or any other language that can compile to JavaScript.[49][50]

Node.js is primarily used to build network programs such as Web servers.[44] The biggest difference between Node.js and PHP is that most functions in PHP block until completion (commands execute only after previous commands finish), while Node.js functions are non-blocking (commands execute concurrently or even in parallel,[51][52] and use callbacks to signal completion or failure).[44]

Platform architecture
Node.js brings event-driven programming to web servers, enabling development of fast web servers in JavaScript.[31] Developers can create highly scalable servers without using threading, by using a simplified model of event-driven programming that uses callbacks to signal the completion of a task.[31] Node.js connects the ease of a scripting language (JavaScript) with the power of Unix network programming.[31]

Node.js was built on the Google V8 JavaScript engine since it was open-sourced under the BSD license. It is extremely fast and proficient with internet fundamentals such as HTTP, DNS, TCP.[28] Also, JavaScript was a well-known language, making Node.js immediately accessible to the entire web development community.[28]

Industry support
There are thousands of open-source libraries for Node.js, most of them hosted on the npm website. The Node.js developer community has two main mailing lists and the IRC channel #node.js on freenode. There are multiple developer conferences and events that support the Node.js community including NodeConf, Node Interactive and Node Summit as well as a number of regional events.

The open-source community has developed web frameworks to accelerate the development of applications. Such frameworks include Connect, Express.js, Socket.IO, Koa.js, Hapi.js, Sails.js, Meteor, Derby, and many others.[31][53] Various packages have also been created for interfacing with other languages or runtime environments such as Microsoft .NET.[54]

Modern desktop IDEs provide editing and debugging features specifically for Node.js applications. Such IDEs include Atom, Brackets, JetBrains WebStorm,[55][56] Microsoft Visual Studio (with Node.js Tools for Visual Studio,[57] or TypeScript with Node definitions,[58][59][60][61]) NetBeans,[62] Nodeclipse Enide Studio [63] (Eclipse-based), and Visual Studio Code.[64][65] Certain online web-based IDEs also support Node.js, such as Codeanywhere, Codenvy, Cloud9 IDE, Koding, and the visual flow editor in Node-RED.

Releases
Release	Code name	Release date	LTS status	Active LTS start	Maintenance start	Maintenance end
v0.10.x		2013-03-11	End-of-life	-	2015-10-01	2016-10-31
v0.12.x		2015-02-06	End-of-life	-	2016-04-01	2016-12-31
4.x	Argon[66]	2015-09-08	End-of-life	2015-10-01	2017-04-01	2018-04-30
5.x		2015-10-29	No LTS	N/A	2016-06-30
6.x	Boron[66]	2016-04-26	Maintenance	2016-10-18	2018-04-30	April 2019
7.x		2016-10-25	No LTS	N/A	2017-06-30
8.x	Carbon[66]	2017-05-30	Active	2017-10-31	April 2019	December 2019
9.x		2017-10-01	No LTS	N/A	June 2018
10.x	Dubnium[66]	2018-04-24	Active	October 2018	April 2020	April 2021
11.x[66]		2018-10-23	No LTS	N/A	June 2019
New major releases of Node.js are cut from the GitHub master branch every six months. Even-numbered versions are cut in April and odd-numbered versions are cut in October. When a new odd version is released, the previous even version undergoes transition to Long Term Support (LTS), which gives that version 18 months of active support from the date it is designated LTS. After these 18 months expire, an LTS release receives an additional 12 months of maintenance support. An active version receives non-breaking backports of changes a few weeks after they land in the current release. A maintenance release only receives critical fixes and documentation updates.[66] The LTS Working Group manages strategy and policy in collaboration with the Technical Steering Committee of the Node.js Foundation.

Technical details

This section may be too technical for most readers to understand. Please help improve it to make it understandable to non-experts, without removing the technical details. (August 2015) (Learn how and when to remove this template message)
Node.js is a Javascript runtime environment that processes incoming requests in a loop, called the event loop.

Threading
Node.js operates on a single thread, using non-blocking I/O calls, allowing it to support tens of thousands of concurrent connections without incurring the cost of thread context switching.[67] The design of sharing a single thread among all the requests that use the observer pattern is intended for building highly concurrent applications, where any function performing I/O must use a callback. To accommodate the single-threaded event loop, Node.js uses the libuv libraryâ€”which, in turn, uses a fixed-sized thread pool that handles some of the non-blocking asynchronous I/O operations.[6]

A downside of this single-threaded approach is that Node.js doesn't allow vertical scaling by increasing the number of CPU cores of the machine it is running on without using an additional module, such as cluster,[51] StrongLoop Process Manager,[68] or pm2.[69] However, developers can increase the default number of threads in the libuv thread pool. The server operating system (OS) is likely to distribute these threads across multiple cores.[70]

A thread pool handles execution of parallel tasks in Node.js. The main thread call functions post tasks to the shared task queue, which threads in the thread pool pull and execute. Inherently non-blocking system functions such as networking translate to kernel-side non-blocking sockets, while inherently blocking system functions such as file I/O run in a blocking way on their own threads. When a thread in the thread pool completes a task, it informs the main thread of this, which in turn, wakes up and executes the registered callback. Since Node.js handles callbacks in serial on the main thread, long lasting computations and other CPU-bound tasks freeze the entire event-loop until completion.[citation needed]

V8
V8 is the JavaScript execution engine built for Google Chrome and open-sourced by Google in 2008. Written in C++, V8 compiles JavaScript source code to native machine code instead of interpreting it in real time.[6]

Node.js uses libuv to handle asynchronous events. Libuv is an abstraction layer for network and file system functionality on both Windows and POSIX-based systems such as Linux, macOS, OSS on NonStop, and Unix.

The core functionality of Node.js resides in a JavaScript library. The Node.js bindings, written in C++, connect these technologies to each other and to the operating system.

Package management
npm is the pre-installed package manager for the Node.js server platform. It installs Node.js programs from the npm registry, organizing the installation and management of third-party Node.js programs. Packages in the npm registry can range from simple helper libraries such as Lodash to task runners such as Grunt.

Unified API
Node.js can be combined with a browser, a database that supports JSON data (such as Postgres,[71] MongoDB, or CouchDB) and JSON for a unified JavaScript development stack. With the adaptation of what were essentially server-side development patterns such as MVC, MVP, MVVM, etc., Node.js allows the reuse of the same model and service interface between client-side and server-side.

Event loop
Node.js registers with the operating system so the OS notifies it of connections and issues a callback. Within the Node.js runtime, each connection is a small heap allocation. Traditionally, relatively heavyweight OS processes or threads handled each connection. Node.js uses an event loop for scalability, instead of processes or threads.[72] In contrast to other event-driven servers, Node.js's event loop does not need to be called explicitly. Instead callbacks are defined, and the server automatically enters the event loop at the end of the callback definition. Node.js exits the event loop when there are no further callbacks to be performed.

Project governance
In 2015, various branches of the greater Node.js community began working under the vendor-neutral Node.js Foundation. The stated purpose of the organization "is to enable widespread adoption and help accelerate development of Node.js and other related modules through an open governance model that encourages participation, technical contribution, and a framework for long-term stewardship by an ecosystem invested in Node.js' success."[73]

The Node.js Foundation Technical Steering Committee (TSC) is the technical governing body of the Node.js Foundation. The TSC is responsible for the core Node.js repo as well as dependent and adjacent projects. Generally the TSC delegates administration of these projects to working groups or committees.[74] The LTS group that manages long term supported releases is one such group. Other current groups include: Website, Streams, Build, Diagnostics, i18n, Evangelism, Docker, Addon API, Benchmarking, Post-mortem, Intl, Documentation, and Testing.[75]

In August, 2017, a governance breakdown precipitated efforts to repair the resulting damage and to create a path to future stability of governance.[76]

See also
	Free software portal
List of server-side JavaScript implementations
List of JavaScript libraries
MEAN (software bundle)
Online JavaScript IDE
Rhino (JavaScript engine)
Application server

Node.js
Node.js logo.svg
Original author(s)	Ryan Dahl
Developer(s)	Joyent
Initial release	May 27, 2009; 9 years ago[1]
Stable release	
10.4.0 / June 6, 2018; 6 days ago[2]
Repository	
https://github.com/nodejs/node
Edit this at Wikidata
Written in	C, C++, JavaScript
Operating system	Linux, macOS, Microsoft Windows, SmartOS, FreeBSD, IBM AIX[3]
Type	Run-time environment
License	MIT[4]
Website	nodejs.org
Node.js is an open-source, cross-platform JavaScript run-time environment that executes JavaScript code server-side. Historically, JavaScript was used primarily for client-side scripting, in which scripts written in JavaScript are embedded in a webpage's HTML and run client-side by a JavaScript engine in the user's web browser. Node.js lets developers use JavaScript for server-side scriptingâ€”running scripts server-side to produce dynamic web page content before the page is sent to the user's web browser. Consequently, Node.js represents a "JavaScript everywhere" paradigm,[5] unifying web application development around a single programming language, rather than different languages for server side and client side scripts.

Though .js is the conventional filename extension for JavaScript code, the name "Node.js" does not refer to a particular file in this context and is merely the name of the product. Node.js has an event-driven architecture capable of asynchronous I/O. These design choices aim to optimize throughput and scalability in web applications with many input/output operations, as well as for real-time Web applications (e.g., real-time communication programs and browser games).[6]

The Node.js distributed development project, governed by the Node.js Foundation,[7] is facilitated by the Linux Foundation's Collaborative Projects program.[8]

Corporate users of Node.js software include GoDaddy,[9] Groupon,[10] IBM,[11] LinkedIn,[12][13] Microsoft,[14][15] Netflix,[16] PayPal,[17][18] Rakuten, SAP, Tuenti,[19] Voxer,[20] Walmart,[21] and Yahoo!.[22]

Contents 
1	History
2	Overview
2.1	Platform architecture
2.2	Industry support
3	Releases
4	Technical details
4.1	Threading
4.2	V8
4.3	Package management
4.4	Unified API
4.5	Event loop
5	Project governance
6	See also
7	References
8	Further reading
9	External links
History

Ryan Dahl, creator of Node.js, in 2010
Node.js was originally written by Ryan Dahl in 2009,[23] about thirteen years after the introduction of the first server-side JavaScript environment, Netscape's LiveWire Pro Web.[24] The initial release supported only Linux and Mac OS X. Its development and maintenance was led by Dahl and later sponsored by Joyent.[25]

Dahl was inspired to create Node.js after seeing a file upload progress bar on Flickr. The browser did not know how much of the file had been uploaded and had to query the Web server. Dahl desired an easier way.[6][26]

Dahl criticized the limited possibilities of the most popular web server in 2009, Apache HTTP Server, to handle a lot of concurrent connections (up to 10,000 and more) and the most common way of creating code (sequential programming), when code either blocked the entire process or implied multiple execution stacks in the case of simultaneous connections.[27]

Dahl demonstrated the project at the inaugural European JSConf on November 8, 2009.[28][29][30] Node.js combined Google's V8 JavaScript engine, an event loop, and a low-level I/O API.[31]

In January 2010, a package manager was introduced for the Node.js environment called npm.[32] The package manager makes it easier for programmers to publish and share source code of Node.js libraries and is designed to simplify installation, updating, and uninstallation of libraries.[31]

In June 2011, Microsoft and Joyent implemented a native Windows version of Node.js.[33] The first Node.js build supporting Windows was released in July 2011.

In January 2012, Dahl stepped aside, promoting coworker and npm creator Isaac Schlueter to manage the project.[34] In January 2014, Schlueter announced that Timothy J. Fontaine would lead the project.[35]

In December 2014, Fedor Indutny started io.js, a fork of Node.js. Due to the internal conflict over Joyent's governance, io.js was created as an open governance alternative with a separate technical committee.[36][37] Unlike Node.js,[38] the authors planned to keep io.js up-to-date with the latest releases of the Google V8 JavaScript engine.[39]

In February 2015, the intent to form a neutral Node.js Foundation was announced. By June 2015, the Node.js and io.js communities voted to work together under the Node.js Foundation.[40]

In September 2015, Node.js v0.12 and io.js v3.3 were merged back together into Node v4.0.[41] This brought V8 ES6 features into Node.js, and a long-term support release cycle.[42] As of 2016, the io.js website recommends that developers switch back to Node.js and that no further releases of io.js are planned due to the merger.[43]

Overview
Node.js allows the creation of Web servers and networking tools using JavaScript and a collection of "modules" that handle various core functionality.[28][31][44][45][46] Modules are provided for file system I/O, networking (DNS, HTTP, TCP, TLS/SSL, or UDP), binary data (buffers), cryptography functions, data streams, and other core functions.[31][45][47] Node.js's modules use an API designed to reduce the complexity of writing server applications.[31][45]

Node.js is officially supported on Linux, macOS, Microsoft Windows, SmartOS, FreeBSD, and IBM AIX.[3] The provided source code may also be built on similar operating systems or be modified by third parties to support others such as NonStop[48] and Unix servers. Alternatively, they can be written with CoffeeScript[49] (a JavaScript alternative), Dart or TypeScript (strongly typed forms of JavaScript), or any other language that can compile to JavaScript.[49][50]

Node.js is primarily used to build network programs such as Web servers.[44] The biggest difference between Node.js and PHP is that most functions in PHP block until completion (commands execute only after previous commands finish), while Node.js functions are non-blocking (commands execute concurrently or even in parallel,[51][52] and use callbacks to signal completion or failure).[44]

Platform architecture
Node.js brings event-driven programming to web servers, enabling development of fast web servers in JavaScript.[31] Developers can create highly scalable servers without using threading, by using a simplified model of event-driven programming that uses callbacks to signal the completion of a task.[31] Node.js connects the ease of a scripting language (JavaScript) with the power of Unix network programming.[31]

Node.js was built on the Google V8 JavaScript engine since it was open-sourced under the BSD license. It is extremely fast and proficient with internet fundamentals such as HTTP, DNS, TCP.[28] Also, JavaScript was a well-known language, making Node.js immediately accessible to the entire web development community.[28]

Industry support
There are thousands of open-source libraries for Node.js, most of them hosted on the npm website. The Node.js developer community has two main mailing lists and the IRC channel #node.js on freenode. There are multiple developer conferences and events that support the Node.js community including NodeConf, Node Interactive and Node Summit as well as a number of regional events.

The open-source community has developed web frameworks to accelerate the development of applications. Such frameworks include Connect, Express.js, Socket.IO, Koa.js, Hapi.js, Sails.js, Meteor, Derby, and many others.[31][53] Various packages have also been created for interfacing with other languages or runtime environments such as Microsoft .NET.[54]

Modern desktop IDEs provide editing and debugging features specifically for Node.js applications. Such IDEs include Atom, Brackets, JetBrains WebStorm,[55][56] Microsoft Visual Studio (with Node.js Tools for Visual Studio,[57] or TypeScript with Node definitions,[58][59][60][61]) NetBeans,[62] Nodeclipse Enide Studio [63] (Eclipse-based), and Visual Studio Code.[64][65] Certain online web-based IDEs also support Node.js, such as Codeanywhere, Codenvy, Cloud9 IDE, Koding, and the visual flow editor in Node-RED.

Releases
Release	Code name	Release date	LTS status	Active LTS start	Maintenance start	Maintenance end
v0.10.x		2013-03-11	End-of-life	-	2015-10-01	2016-10-31
v0.12.x		2015-02-06	End-of-life	-	2016-04-01	2016-12-31
4.x	Argon[66]	2015-09-08	End-of-life	2015-10-01	2017-04-01	2018-04-30
5.x		2015-10-29	No LTS	N/A	2016-06-30
6.x	Boron[66]	2016-04-26	Maintenance	2016-10-18	2018-04-30	April 2019
7.x		2016-10-25	No LTS	N/A	2017-06-30
8.x	Carbon[66]	2017-05-30	Active	2017-10-31	April 2019	December 2019
9.x		2017-10-01	No LTS	N/A	June 2018
10.x	Dubnium[66]	2018-04-24	Active	October 2018	April 2020	April 2021
11.x[66]		2018-10-23	No LTS	N/A	June 2019
New major releases of Node.js are cut from the GitHub master branch every six months. Even-numbered versions are cut in April and odd-numbered versions are cut in October. When a new odd version is released, the previous even version undergoes transition to Long Term Support (LTS), which gives that version 18 months of active support from the date it is designated LTS. After these 18 months expire, an LTS release receives an additional 12 months of maintenance support. An active version receives non-breaking backports of changes a few weeks after they land in the current release. A maintenance release only receives critical fixes and documentation updates.[66] The LTS Working Group manages strategy and policy in collaboration with the Technical Steering Committee of the Node.js Foundation.

Technical details

This section may be too technical for most readers to understand. Please help improve it to make it understandable to non-experts, without removing the technical details. (August 2015) (Learn how and when to remove this template message)
Node.js is a Javascript runtime environment that processes incoming requests in a loop, called the event loop.

Threading
Node.js operates on a single thread, using non-blocking I/O calls, allowing it to support tens of thousands of concurrent connections without incurring the cost of thread context switching.[67] The design of sharing a single thread among all the requests that use the observer pattern is intended for building highly concurrent applications, where any function performing I/O must use a callback. To accommodate the single-threaded event loop, Node.js uses the libuv libraryâ€”which, in turn, uses a fixed-sized thread pool that handles some of the non-blocking asynchronous I/O operations.[6]

A downside of this single-threaded approach is that Node.js doesn't allow vertical scaling by increasing the number of CPU cores of the machine it is running on without using an additional module, such as cluster,[51] StrongLoop Process Manager,[68] or pm2.[69] However, developers can increase the default number of threads in the libuv thread pool. The server operating system (OS) is likely to distribute these threads across multiple cores.[70]

A thread pool handles execution of parallel tasks in Node.js. The main thread call functions post tasks to the shared task queue, which threads in the thread pool pull and execute. Inherently non-blocking system functions such as networking translate to kernel-side non-blocking sockets, while inherently blocking system functions such as file I/O run in a blocking way on their own threads. When a thread in the thread pool completes a task, it informs the main thread of this, which in turn, wakes up and executes the registered callback. Since Node.js handles callbacks in serial on the main thread, long lasting computations and other CPU-bound tasks freeze the entire event-loop until completion.[citation needed]

V8
V8 is the JavaScript execution engine built for Google Chrome and open-sourced by Google in 2008. Written in C++, V8 compiles JavaScript source code to native machine code instead of interpreting it in real time.[6]

Node.js uses libuv to handle asynchronous events. Libuv is an abstraction layer for network and file system functionality on both Windows and POSIX-based systems such as Linux, macOS, OSS on NonStop, and Unix.

The core functionality of Node.js resides in a JavaScript library. The Node.js bindings, written in C++, connect these technologies to each other and to the operating system.

Package management
npm is the pre-installed package manager for the Node.js server platform. It installs Node.js programs from the npm registry, organizing the installation and management of third-party Node.js programs. Packages in the npm registry can range from simple helper libraries such as Lodash to task runners such as Grunt.

Unified API
Node.js can be combined with a browser, a database that supports JSON data (such as Postgres,[71] MongoDB, or CouchDB) and JSON for a unified JavaScript development stack. With the adaptation of what were essentially server-side development patterns such as MVC, MVP, MVVM, etc., Node.js allows the reuse of the same model and service interface between client-side and server-side.

Event loop
Node.js registers with the operating system so the OS notifies it of connections and issues a callback. Within the Node.js runtime, each connection is a small heap allocation. Traditionally, relatively heavyweight OS processes or threads handled each connection. Node.js uses an event loop for scalability, instead of processes or threads.[72] In contrast to other event-driven servers, Node.js's event loop does not need to be called explicitly. Instead callbacks are defined, and the server automatically enters the event loop at the end of the callback definition. Node.js exits the event loop when there are no further callbacks to be performed.

Project governance
In 2015, various branches of the greater Node.js community began working under the vendor-neutral Node.js Foundation. The stated purpose of the organization "is to enable widespread adoption and help accelerate development of Node.js and other related modules through an open governance model that encourages participation, technical contribution, and a framework for long-term stewardship by an ecosystem invested in Node.js' success."[73]

The Node.js Foundation Technical Steering Committee (TSC) is the technical governing body of the Node.js Foundation. The TSC is responsible for the core Node.js repo as well as dependent and adjacent projects. Generally the TSC delegates administration of these projects to working groups or committees.[74] The LTS group that manages long term supported releases is one such group. Other current groups include: Website, Streams, Build, Diagnostics, i18n, Evangelism, Docker, Addon API, Benchmarking, Post-mortem, Intl, Documentation, and Testing.[75]

In August, 2017, a governance breakdown precipitated efforts to repair the resulting damage and to create a path to future stability of governance.[76]

See also
	Free software portal
List of server-side JavaScript implementations
List of JavaScript libraries
MEAN (software bundle)
Online JavaScript IDE
Rhino (JavaScript engine)
Application server

Node.js
Node.js logo.svg
Original author(s)	Ryan Dahl
Developer(s)	Joyent
Initial release	May 27, 2009; 9 years ago[1]
Stable release	
10.4.0 / June 6, 2018; 6 days ago[2]
Repository	
https://github.com/nodejs/node
Edit this at Wikidata
Written in	C, C++, JavaScript
Operating system	Linux, macOS, Microsoft Windows, SmartOS, FreeBSD, IBM AIX[3]
Type	Run-time environment
License	MIT[4]
Website	nodejs.org
Node.js is an open-source, cross-platform JavaScript run-time environment that executes JavaScript code server-side. Historically, JavaScript was used primarily for client-side scripting, in which scripts written in JavaScript are embedded in a webpage's HTML and run client-side by a JavaScript engine in the user's web browser. Node.js lets developers use JavaScript for server-side scriptingâ€”running scripts server-side to produce dynamic web page content before the page is sent to the user's web browser. Consequently, Node.js represents a "JavaScript everywhere" paradigm,[5] unifying web application development around a single programming language, rather than different languages for server side and client side scripts.

Though .js is the conventional filename extension for JavaScript code, the name "Node.js" does not refer to a particular file in this context and is merely the name of the product. Node.js has an event-driven architecture capable of asynchronous I/O. These design choices aim to optimize throughput and scalability in web applications with many input/output operations, as well as for real-time Web applications (e.g., real-time communication programs and browser games).[6]

The Node.js distributed development project, governed by the Node.js Foundation,[7] is facilitated by the Linux Foundation's Collaborative Projects program.[8]

Corporate users of Node.js software include GoDaddy,[9] Groupon,[10] IBM,[11] LinkedIn,[12][13] Microsoft,[14][15] Netflix,[16] PayPal,[17][18] Rakuten, SAP, Tuenti,[19] Voxer,[20] Walmart,[21] and Yahoo!.[22]

Contents 
1	History
2	Overview
2.1	Platform architecture
2.2	Industry support
3	Releases
4	Technical details
4.1	Threading
4.2	V8
4.3	Package management
4.4	Unified API
4.5	Event loop
5	Project governance
6	See also
7	References
8	Further reading
9	External links
History

Ryan Dahl, creator of Node.js, in 2010
Node.js was originally written by Ryan Dahl in 2009,[23] about thirteen years after the introduction of the first server-side JavaScript environment, Netscape's LiveWire Pro Web.[24] The initial release supported only Linux and Mac OS X. Its development and maintenance was led by Dahl and later sponsored by Joyent.[25]

Dahl was inspired to create Node.js after seeing a file upload progress bar on Flickr. The browser did not know how much of the file had been uploaded and had to query the Web server. Dahl desired an easier way.[6][26]

Dahl criticized the limited possibilities of the most popular web server in 2009, Apache HTTP Server, to handle a lot of concurrent connections (up to 10,000 and more) and the most common way of creating code (sequential programming), when code either blocked the entire process or implied multiple execution stacks in the case of simultaneous connections.[27]

Dahl demonstrated the project at the inaugural European JSConf on November 8, 2009.[28][29][30] Node.js combined Google's V8 JavaScript engine, an event loop, and a low-level I/O API.[31]

In January 2010, a package manager was introduced for the Node.js environment called npm.[32] The package manager makes it easier for programmers to publish and share source code of Node.js libraries and is designed to simplify installation, updating, and uninstallation of libraries.[31]

In June 2011, Microsoft and Joyent implemented a native Windows version of Node.js.[33] The first Node.js build supporting Windows was released in July 2011.

In January 2012, Dahl stepped aside, promoting coworker and npm creator Isaac Schlueter to manage the project.[34] In January 2014, Schlueter announced that Timothy J. Fontaine would lead the project.[35]

In December 2014, Fedor Indutny started io.js, a fork of Node.js. Due to the internal conflict over Joyent's governance, io.js was created as an open governance alternative with a separate technical committee.[36][37] Unlike Node.js,[38] the authors planned to keep io.js up-to-date with the latest releases of the Google V8 JavaScript engine.[39]

In February 2015, the intent to form a neutral Node.js Foundation was announced. By June 2015, the Node.js and io.js communities voted to work together under the Node.js Foundation.[40]

In September 2015, Node.js v0.12 and io.js v3.3 were merged back together into Node v4.0.[41] This brought V8 ES6 features into Node.js, and a long-term support release cycle.[42] As of 2016, the io.js website recommends that developers switch back to Node.js and that no further releases of io.js are planned due to the merger.[43]

Overview
Node.js allows the creation of Web servers and networking tools using JavaScript and a collection of "modules" that handle various core functionality.[28][31][44][45][46] Modules are provided for file system I/O, networking (DNS, HTTP, TCP, TLS/SSL, or UDP), binary data (buffers), cryptography functions, data streams, and other core functions.[31][45][47] Node.js's modules use an API designed to reduce the complexity of writing server applications.[31][45]

Node.js is officially supported on Linux, macOS, Microsoft Windows, SmartOS, FreeBSD, and IBM AIX.[3] The provided source code may also be built on similar operating systems or be modified by third parties to support others such as NonStop[48] and Unix servers. Alternatively, they can be written with CoffeeScript[49] (a JavaScript alternative), Dart or TypeScript (strongly typed forms of JavaScript), or any other language that can compile to JavaScript.[49][50]

Node.js is primarily used to build network programs such as Web servers.[44] The biggest difference between Node.js and PHP is that most functions in PHP block until completion (commands execute only after previous commands finish), while Node.js functions are non-blocking (commands execute concurrently or even in parallel,[51][52] and use callbacks to signal completion or failure).[44]

Platform architecture
Node.js brings event-driven programming to web servers, enabling development of fast web servers in JavaScript.[31] Developers can create highly scalable servers without using threading, by using a simplified model of event-driven programming that uses callbacks to signal the completion of a task.[31] Node.js connects the ease of a scripting language (JavaScript) with the power of Unix network programming.[31]

Node.js was built on the Google V8 JavaScript engine since it was open-sourced under the BSD license. It is extremely fast and proficient with internet fundamentals such as HTTP, DNS, TCP.[28] Also, JavaScript was a well-known language, making Node.js immediately accessible to the entire web development community.[28]

Industry support
There are thousands of open-source libraries for Node.js, most of them hosted on the npm website. The Node.js developer community has two main mailing lists and the IRC channel #node.js on freenode. There are multiple developer conferences and events that support the Node.js community including NodeConf, Node Interactive and Node Summit as well as a number of regional events.

The open-source community has developed web frameworks to accelerate the development of applications. Such frameworks include Connect, Express.js, Socket.IO, Koa.js, Hapi.js, Sails.js, Meteor, Derby, and many others.[31][53] Various packages have also been created for interfacing with other languages or runtime environments such as Microsoft .NET.[54]

Modern desktop IDEs provide editing and debugging features specifically for Node.js applications. Such IDEs include Atom, Brackets, JetBrains WebStorm,[55][56] Microsoft Visual Studio (with Node.js Tools for Visual Studio,[57] or TypeScript with Node definitions,[58][59][60][61]) NetBeans,[62] Nodeclipse Enide Studio [63] (Eclipse-based), and Visual Studio Code.[64][65] Certain online web-based IDEs also support Node.js, such as Codeanywhere, Codenvy, Cloud9 IDE, Koding, and the visual flow editor in Node-RED.

Releases
Release	Code name	Release date	LTS status	Active LTS start	Maintenance start	Maintenance end
v0.10.x		2013-03-11	End-of-life	-	2015-10-01	2016-10-31
v0.12.x		2015-02-06	End-of-life	-	2016-04-01	2016-12-31
4.x	Argon[66]	2015-09-08	End-of-life	2015-10-01	2017-04-01	2018-04-30
5.x		2015-10-29	No LTS	N/A	2016-06-30
6.x	Boron[66]	2016-04-26	Maintenance	2016-10-18	2018-04-30	April 2019
7.x		2016-10-25	No LTS	N/A	2017-06-30
8.x	Carbon[66]	2017-05-30	Active	2017-10-31	April 2019	December 2019
9.x		2017-10-01	No LTS	N/A	June 2018
10.x	Dubnium[66]	2018-04-24	Active	October 2018	April 2020	April 2021
11.x[66]		2018-10-23	No LTS	N/A	June 2019
New major releases of Node.js are cut from the GitHub master branch every six months. Even-numbered versions are cut in April and odd-numbered versions are cut in October. When a new odd version is released, the previous even version undergoes transition to Long Term Support (LTS), which gives that version 18 months of active support from the date it is designated LTS. After these 18 months expire, an LTS release receives an additional 12 months of maintenance support. An active version receives non-breaking backports of changes a few weeks after they land in the current release. A maintenance release only receives critical fixes and documentation updates.[66] The LTS Working Group manages strategy and policy in collaboration with the Technical Steering Committee of the Node.js Foundation.

Technical details

This section may be too technical for most readers to understand. Please help improve it to make it understandable to non-experts, without removing the technical details. (August 2015) (Learn how and when to remove this template message)
Node.js is a Javascript runtime environment that processes incoming requests in a loop, called the event loop.

Threading
Node.js operates on a single thread, using non-blocking I/O calls, allowing it to support tens of thousands of concurrent connections without incurring the cost of thread context switching.[67] The design of sharing a single thread among all the requests that use the observer pattern is intended for building highly concurrent applications, where any function performing I/O must use a callback. To accommodate the single-threaded event loop, Node.js uses the libuv libraryâ€”which, in turn, uses a fixed-sized thread pool that handles some of the non-blocking asynchronous I/O operations.[6]

A downside of this single-threaded approach is that Node.js doesn't allow vertical scaling by increasing the number of CPU cores of the machine it is running on without using an additional module, such as cluster,[51] StrongLoop Process Manager,[68] or pm2.[69] However, developers can increase the default number of threads in the libuv thread pool. The server operating system (OS) is likely to distribute these threads across multiple cores.[70]

A thread pool handles execution of parallel tasks in Node.js. The main thread call functions post tasks to the shared task queue, which threads in the thread pool pull and execute. Inherently non-blocking system functions such as networking translate to kernel-side non-blocking sockets, while inherently blocking system functions such as file I/O run in a blocking way on their own threads. When a thread in the thread pool completes a task, it informs the main thread of this, which in turn, wakes up and executes the registered callback. Since Node.js handles callbacks in serial on the main thread, long lasting computations and other CPU-bound tasks freeze the entire event-loop until completion.[citation needed]

V8
V8 is the JavaScript execution engine built for Google Chrome and open-sourced by Google in 2008. Written in C++, V8 compiles JavaScript source code to native machine code instead of interpreting it in real time.[6]

Node.js uses libuv to handle asynchronous events. Libuv is an abstraction layer for network and file system functionality on both Windows and POSIX-based systems such as Linux, macOS, OSS on NonStop, and Unix.

The core functionality of Node.js resides in a JavaScript library. The Node.js bindings, written in C++, connect these technologies to each other and to the operating system.

Package management
npm is the pre-installed package manager for the Node.js server platform. It installs Node.js programs from the npm registry, organizing the installation and management of third-party Node.js programs. Packages in the npm registry can range from simple helper libraries such as Lodash to task runners such as Grunt.

Unified API
Node.js can be combined with a browser, a database that supports JSON data (such as Postgres,[71] MongoDB, or CouchDB) and JSON for a unified JavaScript development stack. With the adaptation of what were essentially server-side development patterns such as MVC, MVP, MVVM, etc., Node.js allows the reuse of the same model and service interface between client-side and server-side.

Event loop
Node.js registers with the operating system so the OS notifies it of connections and issues a callback. Within the Node.js runtime, each connection is a small heap allocation. Traditionally, relatively heavyweight OS processes or threads handled each connection. Node.js uses an event loop for scalability, instead of processes or threads.[72] In contrast to other event-driven servers, Node.js's event loop does not need to be called explicitly. Instead callbacks are defined, and the server automatically enters the event loop at the end of the callback definition. Node.js exits the event loop when there are no further callbacks to be performed.

Project governance
In 2015, various branches of the greater Node.js community began working under the vendor-neutral Node.js Foundation. The stated purpose of the organization "is to enable widespread adoption and help accelerate development of Node.js and other related modules through an open governance model that encourages participation, technical contribution, and a framework for long-term stewardship by an ecosystem invested in Node.js' success."[73]

The Node.js Foundation Technical Steering Committee (TSC) is the technical governing body of the Node.js Foundation. The TSC is responsible for the core Node.js repo as well as dependent and adjacent projects. Generally the TSC delegates administration of these projects to working groups or committees.[74] The LTS group that manages long term supported releases is one such group. Other current groups include: Website, Streams, Build, Diagnostics, i18n, Evangelism, Docker, Addon API, Benchmarking, Post-mortem, Intl, Documentation, and Testing.[75]

In August, 2017, a governance breakdown precipitated efforts to repair the resulting damage and to create a path to future stability of governance.[76]

See also
	Free software portal
List of server-side JavaScript implementations
List of JavaScript libraries
MEAN (software bundle)
Online JavaScript IDE
Rhino (JavaScript engine)
Application server

Node.js
Node.js logo.svg
Original author(s)	Ryan Dahl
Developer(s)	Joyent
Initial release	May 27, 2009; 9 years ago[1]
Stable release	
10.4.0 / June 6, 2018; 6 days ago[2]
Repository	
https://github.com/nodejs/node
Edit this at Wikidata
Written in	C, C++, JavaScript
Operating system	Linux, macOS, Microsoft Windows, SmartOS, FreeBSD, IBM AIX[3]
Type	Run-time environment
License	MIT[4]
Website	nodejs.org
Node.js is an open-source, cross-platform JavaScript run-time environment that executes JavaScript code server-side. Historically, JavaScript was used primarily for client-side scripting, in which scripts written in JavaScript are embedded in a webpage's HTML and run client-side by a JavaScript engine in the user's web browser. Node.js lets developers use JavaScript for server-side scriptingâ€”running scripts server-side to produce dynamic web page content before the page is sent to the user's web browser. Consequently, Node.js represents a "JavaScript everywhere" paradigm,[5] unifying web application development around a single programming language, rather than different languages for server side and client side scripts.

Though .js is the conventional filename extension for JavaScript code, the name "Node.js" does not refer to a particular file in this context and is merely the name of the product. Node.js has an event-driven architecture capable of asynchronous I/O. These design choices aim to optimize throughput and scalability in web applications with many input/output operations, as well as for real-time Web applications (e.g., real-time communication programs and browser games).[6]

The Node.js distributed development project, governed by the Node.js Foundation,[7] is facilitated by the Linux Foundation's Collaborative Projects program.[8]

Corporate users of Node.js software include GoDaddy,[9] Groupon,[10] IBM,[11] LinkedIn,[12][13] Microsoft,[14][15] Netflix,[16] PayPal,[17][18] Rakuten, SAP, Tuenti,[19] Voxer,[20] Walmart,[21] and Yahoo!.[22]

Contents 
1	History
2	Overview
2.1	Platform architecture
2.2	Industry support
3	Releases
4	Technical details
4.1	Threading
4.2	V8
4.3	Package management
4.4	Unified API
4.5	Event loop
5	Project governance
6	See also
7	References
8	Further reading
9	External links
History

Ryan Dahl, creator of Node.js, in 2010
Node.js was originally written by Ryan Dahl in 2009,[23] about thirteen years after the introduction of the first server-side JavaScript environment, Netscape's LiveWire Pro Web.[24] The initial release supported only Linux and Mac OS X. Its development and maintenance was led by Dahl and later sponsored by Joyent.[25]

Dahl was inspired to create Node.js after seeing a file upload progress bar on Flickr. The browser did not know how much of the file had been uploaded and had to query the Web server. Dahl desired an easier way.[6][26]

Dahl criticized the limited possibilities of the most popular web server in 2009, Apache HTTP Server, to handle a lot of concurrent connections (up to 10,000 and more) and the most common way of creating code (sequential programming), when code either blocked the entire process or implied multiple execution stacks in the case of simultaneous connections.[27]

Dahl demonstrated the project at the inaugural European JSConf on November 8, 2009.[28][29][30] Node.js combined Google's V8 JavaScript engine, an event loop, and a low-level I/O API.[31]

In January 2010, a package manager was introduced for the Node.js environment called npm.[32] The package manager makes it easier for programmers to publish and share source code of Node.js libraries and is designed to simplify installation, updating, and uninstallation of libraries.[31]

In June 2011, Microsoft and Joyent implemented a native Windows version of Node.js.[33] The first Node.js build supporting Windows was released in July 2011.

In January 2012, Dahl stepped aside, promoting coworker and npm creator Isaac Schlueter to manage the project.[34] In January 2014, Schlueter announced that Timothy J. Fontaine would lead the project.[35]

In December 2014, Fedor Indutny started io.js, a fork of Node.js. Due to the internal conflict over Joyent's governance, io.js was created as an open governance alternative with a separate technical committee.[36][37] Unlike Node.js,[38] the authors planned to keep io.js up-to-date with the latest releases of the Google V8 JavaScript engine.[39]

In February 2015, the intent to form a neutral Node.js Foundation was announced. By June 2015, the Node.js and io.js communities voted to work together under the Node.js Foundation.[40]

In September 2015, Node.js v0.12 and io.js v3.3 were merged back together into Node v4.0.[41] This brought V8 ES6 features into Node.js, and a long-term support release cycle.[42] As of 2016, the io.js website recommends that developers switch back to Node.js and that no further releases of io.js are planned due to the merger.[43]

Overview
Node.js allows the creation of Web servers and networking tools using JavaScript and a collection of "modules" that handle various core functionality.[28][31][44][45][46] Modules are provided for file system I/O, networking (DNS, HTTP, TCP, TLS/SSL, or UDP), binary data (buffers), cryptography functions, data streams, and other core functions.[31][45][47] Node.js's modules use an API designed to reduce the complexity of writing server applications.[31][45]

Node.js is officially supported on Linux, macOS, Microsoft Windows, SmartOS, FreeBSD, and IBM AIX.[3] The provided source code may also be built on similar operating systems or be modified by third parties to support others such as NonStop[48] and Unix servers. Alternatively, they can be written with CoffeeScript[49] (a JavaScript alternative), Dart or TypeScript (strongly typed forms of JavaScript), or any other language that can compile to JavaScript.[49][50]

Node.js is primarily used to build network programs such as Web servers.[44] The biggest difference between Node.js and PHP is that most functions in PHP block until completion (commands execute only after previous commands finish), while Node.js functions are non-blocking (commands execute concurrently or even in parallel,[51][52] and use callbacks to signal completion or failure).[44]

Platform architecture
Node.js brings event-driven programming to web servers, enabling development of fast web servers in JavaScript.[31] Developers can create highly scalable servers without using threading, by using a simplified model of event-driven programming that uses callbacks to signal the completion of a task.[31] Node.js connects the ease of a scripting language (JavaScript) with the power of Unix network programming.[31]

Node.js was built on the Google V8 JavaScript engine since it was open-sourced under the BSD license. It is extremely fast and proficient with internet fundamentals such as HTTP, DNS, TCP.[28] Also, JavaScript was a well-known language, making Node.js immediately accessible to the entire web development community.[28]

Industry support
There are thousands of open-source libraries for Node.js, most of them hosted on the npm website. The Node.js developer community has two main mailing lists and the IRC channel #node.js on freenode. There are multiple developer conferences and events that support the Node.js community including NodeConf, Node Interactive and Node Summit as well as a number of regional events.

The open-source community has developed web frameworks to accelerate the development of applications. Such frameworks include Connect, Express.js, Socket.IO, Koa.js, Hapi.js, Sails.js, Meteor, Derby, and many others.[31][53] Various packages have also been created for interfacing with other languages or runtime environments such as Microsoft .NET.[54]

Modern desktop IDEs provide editing and debugging features specifically for Node.js applications. Such IDEs include Atom, Brackets, JetBrains WebStorm,[55][56] Microsoft Visual Studio (with Node.js Tools for Visual Studio,[57] or TypeScript with Node definitions,[58][59][60][61]) NetBeans,[62] Nodeclipse Enide Studio [63] (Eclipse-based), and Visual Studio Code.[64][65] Certain online web-based IDEs also support Node.js, such as Codeanywhere, Codenvy, Cloud9 IDE, Koding, and the visual flow editor in Node-RED.

Releases
Release	Code name	Release date	LTS status	Active LTS start	Maintenance start	Maintenance end
v0.10.x		2013-03-11	End-of-life	-	2015-10-01	2016-10-31
v0.12.x		2015-02-06	End-of-life	-	2016-04-01	2016-12-31
4.x	Argon[66]	2015-09-08	End-of-life	2015-10-01	2017-04-01	2018-04-30
5.x		2015-10-29	No LTS	N/A	2016-06-30
6.x	Boron[66]	2016-04-26	Maintenance	2016-10-18	2018-04-30	April 2019
7.x		2016-10-25	No LTS	N/A	2017-06-30
8.x	Carbon[66]	2017-05-30	Active	2017-10-31	April 2019	December 2019
9.x		2017-10-01	No LTS	N/A	June 2018
10.x	Dubnium[66]	2018-04-24	Active	October 2018	April 2020	April 2021
11.x[66]		2018-10-23	No LTS	N/A	June 2019
New major releases of Node.js are cut from the GitHub master branch every six months. Even-numbered versions are cut in April and odd-numbered versions are cut in October. When a new odd version is released, the previous even version undergoes transition to Long Term Support (LTS), which gives that version 18 months of active support from the date it is designated LTS. After these 18 months expire, an LTS release receives an additional 12 months of maintenance support. An active version receives non-breaking backports of changes a few weeks after they land in the current release. A maintenance release only receives critical fixes and documentation updates.[66] The LTS Working Group manages strategy and policy in collaboration with the Technical Steering Committee of the Node.js Foundation.

Technical details

This section may be too technical for most readers to understand. Please help improve it to make it understandable to non-experts, without removing the technical details. (August 2015) (Learn how and when to remove this template message)
Node.js is a Javascript runtime environment that processes incoming requests in a loop, called the event loop.

Threading
Node.js operates on a single thread, using non-blocking I/O calls, allowing it to support tens of thousands of concurrent connections without incurring the cost of thread context switching.[67] The design of sharing a single thread among all the requests that use the observer pattern is intended for building highly concurrent applications, where any function performing I/O must use a callback. To accommodate the single-threaded event loop, Node.js uses the libuv libraryâ€”which, in turn, uses a fixed-sized thread pool that handles some of the non-blocking asynchronous I/O operations.[6]

A downside of this single-threaded approach is that Node.js doesn't allow vertical scaling by increasing the number of CPU cores of the machine it is running on without using an additional module, such as cluster,[51] StrongLoop Process Manager,[68] or pm2.[69] However, developers can increase the default number of threads in the libuv thread pool. The server operating system (OS) is likely to distribute these threads across multiple cores.[70]

A thread pool handles execution of parallel tasks in Node.js. The main thread call functions post tasks to the shared task queue, which threads in the thread pool pull and execute. Inherently non-blocking system functions such as networking translate to kernel-side non-blocking sockets, while inherently blocking system functions such as file I/O run in a blocking way on their own threads. When a thread in the thread pool completes a task, it informs the main thread of this, which in turn, wakes up and executes the registered callback. Since Node.js handles callbacks in serial on the main thread, long lasting computations and other CPU-bound tasks freeze the entire event-loop until completion.[citation needed]

V8
V8 is the JavaScript execution engine built for Google Chrome and open-sourced by Google in 2008. Written in C++, V8 compiles JavaScript source code to native machine code instead of interpreting it in real time.[6]

Node.js uses libuv to handle asynchronous events. Libuv is an abstraction layer for network and file system functionality on both Windows and POSIX-based systems such as Linux, macOS, OSS on NonStop, and Unix.

The core functionality of Node.js resides in a JavaScript library. The Node.js bindings, written in C++, connect these technologies to each other and to the operating system.

Package management
npm is the pre-installed package manager for the Node.js server platform. It installs Node.js programs from the npm registry, organizing the installation and management of third-party Node.js programs. Packages in the npm registry can range from simple helper libraries such as Lodash to task runners such as Grunt.

Unified API
Node.js can be combined with a browser, a database that supports JSON data (such as Postgres,[71] MongoDB, or CouchDB) and JSON for a unified JavaScript development stack. With the adaptation of what were essentially server-side development patterns such as MVC, MVP, MVVM, etc., Node.js allows the reuse of the same model and service interface between client-side and server-side.

Event loop
Node.js registers with the operating system so the OS notifies it of connections and issues a callback. Within the Node.js runtime, each connection is a small heap allocation. Traditionally, relatively heavyweight OS processes or threads handled each connection. Node.js uses an event loop for scalability, instead of processes or threads.[72] In contrast to other event-driven servers, Node.js's event loop does not need to be called explicitly. Instead callbacks are defined, and the server automatically enters the event loop at the end of the callback definition. Node.js exits the event loop when there are no further callbacks to be performed.

Project governance
In 2015, various branches of the greater Node.js community began working under the vendor-neutral Node.js Foundation. The stated purpose of the organization "is to enable widespread adoption and help accelerate development of Node.js and other related modules through an open governance model that encourages participation, technical contribution, and a framework for long-term stewardship by an ecosystem invested in Node.js' success."[73]

The Node.js Foundation Technical Steering Committee (TSC) is the technical governing body of the Node.js Foundation. The TSC is responsible for the core Node.js repo as well as dependent and adjacent projects. Generally the TSC delegates administration of these projects to working groups or committees.[74] The LTS group that manages long term supported releases is one such group. Other current groups include: Website, Streams, Build, Diagnostics, i18n, Evangelism, Docker, Addon API, Benchmarking, Post-mortem, Intl, Documentation, and Testing.[75]

In August, 2017, a governance breakdown precipitated efforts to repair the resulting damage and to create a path to future stability of governance.[76]

See also
	Free software portal
List of server-side JavaScript implementations
List of JavaScript libraries
MEAN (software bundle)
Online JavaScript IDE
Rhino (JavaScript engine)
Application server

Node.js
Node.js logo.svg
Original author(s)	Ryan Dahl
Developer(s)	Joyent
Initial release	May 27, 2009; 9 years ago[1]
Stable release	
10.4.0 / June 6, 2018; 6 days ago[2]
Repository	
https://github.com/nodejs/node
Edit this at Wikidata
Written in	C, C++, JavaScript
Operating system	Linux, macOS, Microsoft Windows, SmartOS, FreeBSD, IBM AIX[3]
Type	Run-time environment
License	MIT[4]
Website	nodejs.org
Node.js is an open-source, cross-platform JavaScript run-time environment that executes JavaScript code server-side. Historically, JavaScript was used primarily for client-side scripting, in which scripts written in JavaScript are embedded in a webpage's HTML and run client-side by a JavaScript engine in the user's web browser. Node.js lets developers use JavaScript for server-side scriptingâ€”running scripts server-side to produce dynamic web page content before the page is sent to the user's web browser. Consequently, Node.js represents a "JavaScript everywhere" paradigm,[5] unifying web application development around a single programming language, rather than different languages for server side and client side scripts.

Though .js is the conventional filename extension for JavaScript code, the name "Node.js" does not refer to a particular file in this context and is merely the name of the product. Node.js has an event-driven architecture capable of asynchronous I/O. These design choices aim to optimize throughput and scalability in web applications with many input/output operations, as well as for real-time Web applications (e.g., real-time communication programs and browser games).[6]

The Node.js distributed development project, governed by the Node.js Foundation,[7] is facilitated by the Linux Foundation's Collaborative Projects program.[8]

Corporate users of Node.js software include GoDaddy,[9] Groupon,[10] IBM,[11] LinkedIn,[12][13] Microsoft,[14][15] Netflix,[16] PayPal,[17][18] Rakuten, SAP, Tuenti,[19] Voxer,[20] Walmart,[21] and Yahoo!.[22]

Contents 
1	History
2	Overview
2.1	Platform architecture
2.2	Industry support
3	Releases
4	Technical details
4.1	Threading
4.2	V8
4.3	Package management
4.4	Unified API
4.5	Event loop
5	Project governance
6	See also
7	References
8	Further reading
9	External links
History

Ryan Dahl, creator of Node.js, in 2010
Node.js was originally written by Ryan Dahl in 2009,[23] about thirteen years after the introduction of the first server-side JavaScript environment, Netscape's LiveWire Pro Web.[24] The initial release supported only Linux and Mac OS X. Its development and maintenance was led by Dahl and later sponsored by Joyent.[25]

Dahl was inspired to create Node.js after seeing a file upload progress bar on Flickr. The browser did not know how much of the file had been uploaded and had to query the Web server. Dahl desired an easier way.[6][26]

Dahl criticized the limited possibilities of the most popular web server in 2009, Apache HTTP Server, to handle a lot of concurrent connections (up to 10,000 and more) and the most common way of creating code (sequential programming), when code either blocked the entire process or implied multiple execution stacks in the case of simultaneous connections.[27]

Dahl demonstrated the project at the inaugural European JSConf on November 8, 2009.[28][29][30] Node.js combined Google's V8 JavaScript engine, an event loop, and a low-level I/O API.[31]

In January 2010, a package manager was introduced for the Node.js environment called npm.[32] The package manager makes it easier for programmers to publish and share source code of Node.js libraries and is designed to simplify installation, updating, and uninstallation of libraries.[31]

In June 2011, Microsoft and Joyent implemented a native Windows version of Node.js.[33] The first Node.js build supporting Windows was released in July 2011.

In January 2012, Dahl stepped aside, promoting coworker and npm creator Isaac Schlueter to manage the project.[34] In January 2014, Schlueter announced that Timothy J. Fontaine would lead the project.[35]

In December 2014, Fedor Indutny started io.js, a fork of Node.js. Due to the internal conflict over Joyent's governance, io.js was created as an open governance alternative with a separate technical committee.[36][37] Unlike Node.js,[38] the authors planned to keep io.js up-to-date with the latest releases of the Google V8 JavaScript engine.[39]

In February 2015, the intent to form a neutral Node.js Foundation was announced. By June 2015, the Node.js and io.js communities voted to work together under the Node.js Foundation.[40]

In September 2015, Node.js v0.12 and io.js v3.3 were merged back together into Node v4.0.[41] This brought V8 ES6 features into Node.js, and a long-term support release cycle.[42] As of 2016, the io.js website recommends that developers switch back to Node.js and that no further releases of io.js are planned due to the merger.[43]

Overview
Node.js allows the creation of Web servers and networking tools using JavaScript and a collection of "modules" that handle various core functionality.[28][31][44][45][46] Modules are provided for file system I/O, networking (DNS, HTTP, TCP, TLS/SSL, or UDP), binary data (buffers), cryptography functions, data streams, and other core functions.[31][45][47] Node.js's modules use an API designed to reduce the complexity of writing server applications.[31][45]

Node.js is officially supported on Linux, macOS, Microsoft Windows, SmartOS, FreeBSD, and IBM AIX.[3] The provided source code may also be built on similar operating systems or be modified by third parties to support others such as NonStop[48] and Unix servers. Alternatively, they can be written with CoffeeScript[49] (a JavaScript alternative), Dart or TypeScript (strongly typed forms of JavaScript), or any other language that can compile to JavaScript.[49][50]

Node.js is primarily used to build network programs such as Web servers.[44] The biggest difference between Node.js and PHP is that most functions in PHP block until completion (commands execute only after previous commands finish), while Node.js functions are non-blocking (commands execute concurrently or even in parallel,[51][52] and use callbacks to signal completion or failure).[44]

Platform architecture
Node.js brings event-driven programming to web servers, enabling development of fast web servers in JavaScript.[31] Developers can create highly scalable servers without using threading, by using a simplified model of event-driven programming that uses callbacks to signal the completion of a task.[31] Node.js connects the ease of a scripting language (JavaScript) with the power of Unix network programming.[31]

Node.js was built on the Google V8 JavaScript engine since it was open-sourced under the BSD license. It is extremely fast and proficient with internet fundamentals such as HTTP, DNS, TCP.[28] Also, JavaScript was a well-known language, making Node.js immediately accessible to the entire web development community.[28]

Industry support
There are thousands of open-source libraries for Node.js, most of them hosted on the npm website. The Node.js developer community has two main mailing lists and the IRC channel #node.js on freenode. There are multiple developer conferences and events that support the Node.js community including NodeConf, Node Interactive and Node Summit as well as a number of regional events.

The open-source community has developed web frameworks to accelerate the development of applications. Such frameworks include Connect, Express.js, Socket.IO, Koa.js, Hapi.js, Sails.js, Meteor, Derby, and many others.[31][53] Various packages have also been created for interfacing with other languages or runtime environments such as Microsoft .NET.[54]

Modern desktop IDEs provide editing and debugging features specifically for Node.js applications. Such IDEs include Atom, Brackets, JetBrains WebStorm,[55][56] Microsoft Visual Studio (with Node.js Tools for Visual Studio,[57] or TypeScript with Node definitions,[58][59][60][61]) NetBeans,[62] Nodeclipse Enide Studio [63] (Eclipse-based), and Visual Studio Code.[64][65] Certain online web-based IDEs also support Node.js, such as Codeanywhere, Codenvy, Cloud9 IDE, Koding, and the visual flow editor in Node-RED.

Releases
Release	Code name	Release date	LTS status	Active LTS start	Maintenance start	Maintenance end
v0.10.x		2013-03-11	End-of-life	-	2015-10-01	2016-10-31
v0.12.x		2015-02-06	End-of-life	-	2016-04-01	2016-12-31
4.x	Argon[66]	2015-09-08	End-of-life	2015-10-01	2017-04-01	2018-04-30
5.x		2015-10-29	No LTS	N/A	2016-06-30
6.x	Boron[66]	2016-04-26	Maintenance	2016-10-18	2018-04-30	April 2019
7.x		2016-10-25	No LTS	N/A	2017-06-30
8.x	Carbon[66]	2017-05-30	Active	2017-10-31	April 2019	December 2019
9.x		2017-10-01	No LTS	N/A	June 2018
10.x	Dubnium[66]	2018-04-24	Active	October 2018	April 2020	April 2021
11.x[66]		2018-10-23	No LTS	N/A	June 2019
New major releases of Node.js are cut from the GitHub master branch every six months. Even-numbered versions are cut in April and odd-numbered versions are cut in October. When a new odd version is released, the previous even version undergoes transition to Long Term Support (LTS), which gives that version 18 months of active support from the date it is designated LTS. After these 18 months expire, an LTS release receives an additional 12 months of maintenance support. An active version receives non-breaking backports of changes a few weeks after they land in the current release. A maintenance release only receives critical fixes and documentation updates.[66] The LTS Working Group manages strategy and policy in collaboration with the Technical Steering Committee of the Node.js Foundation.

Technical details

This section may be too technical for most readers to understand. Please help improve it to make it understandable to non-experts, without removing the technical details. (August 2015) (Learn how and when to remove this template message)
Node.js is a Javascript runtime environment that processes incoming requests in a loop, called the event loop.

Threading
Node.js operates on a single thread, using non-blocking I/O calls, allowing it to support tens of thousands of concurrent connections without incurring the cost of thread context switching.[67] The design of sharing a single thread among all the requests that use the observer pattern is intended for building highly concurrent applications, where any function performing I/O must use a callback. To accommodate the single-threaded event loop, Node.js uses the libuv libraryâ€”which, in turn, uses a fixed-sized thread pool that handles some of the non-blocking asynchronous I/O operations.[6]

A downside of this single-threaded approach is that Node.js doesn't allow vertical scaling by increasing the number of CPU cores of the machine it is running on without using an additional module, such as cluster,[51] StrongLoop Process Manager,[68] or pm2.[69] However, developers can increase the default number of threads in the libuv thread pool. The server operating system (OS) is likely to distribute these threads across multiple cores.[70]

A thread pool handles execution of parallel tasks in Node.js. The main thread call functions post tasks to the shared task queue, which threads in the thread pool pull and execute. Inherently non-blocking system functions such as networking translate to kernel-side non-blocking sockets, while inherently blocking system functions such as file I/O run in a blocking way on their own threads. When a thread in the thread pool completes a task, it informs the main thread of this, which in turn, wakes up and executes the registered callback. Since Node.js handles callbacks in serial on the main thread, long lasting computations and other CPU-bound tasks freeze the entire event-loop until completion.[citation needed]

V8
V8 is the JavaScript execution engine built for Google Chrome and open-sourced by Google in 2008. Written in C++, V8 compiles JavaScript source code to native machine code instead of interpreting it in real time.[6]

Node.js uses libuv to handle asynchronous events. Libuv is an abstraction layer for network and file system functionality on both Windows and POSIX-based systems such as Linux, macOS, OSS on NonStop, and Unix.

The core functionality of Node.js resides in a JavaScript library. The Node.js bindings, written in C++, connect these technologies to each other and to the operating system.

Package management
npm is the pre-installed package manager for the Node.js server platform. It installs Node.js programs from the npm registry, organizing the installation and management of third-party Node.js programs. Packages in the npm registry can range from simple helper libraries such as Lodash to task runners such as Grunt.

Unified API
Node.js can be combined with a browser, a database that supports JSON data (such as Postgres,[71] MongoDB, or CouchDB) and JSON for a unified JavaScript development stack. With the adaptation of what were essentially server-side development patterns such as MVC, MVP, MVVM, etc., Node.js allows the reuse of the same model and service interface between client-side and server-side.

Event loop
Node.js registers with the operating system so the OS notifies it of connections and issues a callback. Within the Node.js runtime, each connection is a small heap allocation. Traditionally, relatively heavyweight OS processes or threads handled each connection. Node.js uses an event loop for scalability, instead of processes or threads.[72] In contrast to other event-driven servers, Node.js's event loop does not need to be called explicitly. Instead callbacks are defined, and the server automatically enters the event loop at the end of the callback definition. Node.js exits the event loop when there are no further callbacks to be performed.

Project governance
In 2015, various branches of the greater Node.js community began working under the vendor-neutral Node.js Foundation. The stated purpose of the organization "is to enable widespread adoption and help accelerate development of Node.js and other related modules through an open governance model that encourages participation, technical contribution, and a framework for long-term stewardship by an ecosystem invested in Node.js' success."[73]

The Node.js Foundation Technical Steering Committee (TSC) is the technical governing body of the Node.js Foundation. The TSC is responsible for the core Node.js repo as well as dependent and adjacent projects. Generally the TSC delegates administration of these projects to working groups or committees.[74] The LTS group that manages long term supported releases is one such group. Other current groups include: Website, Streams, Build, Diagnostics, i18n, Evangelism, Docker, Addon API, Benchmarking, Post-mortem, Intl, Documentation, and Testing.[75]

In August, 2017, a governance breakdown precipitated efforts to repair the resulting damage and to create a path to future stability of governance.[76]

See also
	Free software portal
List of server-side JavaScript implementations
List of JavaScript libraries
MEAN (software bundle)
Online JavaScript IDE
Rhino (JavaScript engine)
Application server

Node.js
Node.js logo.svg
Original author(s)	Ryan Dahl
Developer(s)	Joyent
Initial release	May 27, 2009; 9 years ago[1]
Stable release	
10.4.0 / June 6, 2018; 6 days ago[2]
Repository	
https://github.com/nodejs/node
Edit this at Wikidata
Written in	C, C++, JavaScript
Operating system	Linux, macOS, Microsoft Windows, SmartOS, FreeBSD, IBM AIX[3]
Type	Run-time environment
License	MIT[4]
Website	nodejs.org
Node.js is an open-source, cross-platform JavaScript run-time environment that executes JavaScript code server-side. Historically, JavaScript was used primarily for client-side scripting, in which scripts written in JavaScript are embedded in a webpage's HTML and run client-side by a JavaScript engine in the user's web browser. Node.js lets developers use JavaScript for server-side scriptingâ€”running scripts server-side to produce dynamic web page content before the page is sent to the user's web browser. Consequently, Node.js represents a "JavaScript everywhere" paradigm,[5] unifying web application development around a single programming language, rather than different languages for server side and client side scripts.

Though .js is the conventional filename extension for JavaScript code, the name "Node.js" does not refer to a particular file in this context and is merely the name of the product. Node.js has an event-driven architecture capable of asynchronous I/O. These design choices aim to optimize throughput and scalability in web applications with many input/output operations, as well as for real-time Web applications (e.g., real-time communication programs and browser games).[6]

The Node.js distributed development project, governed by the Node.js Foundation,[7] is facilitated by the Linux Foundation's Collaborative Projects program.[8]

Corporate users of Node.js software include GoDaddy,[9] Groupon,[10] IBM,[11] LinkedIn,[12][13] Microsoft,[14][15] Netflix,[16] PayPal,[17][18] Rakuten, SAP, Tuenti,[19] Voxer,[20] Walmart,[21] and Yahoo!.[22]

Contents 
1	History
2	Overview
2.1	Platform architecture
2.2	Industry support
3	Releases
4	Technical details
4.1	Threading
4.2	V8
4.3	Package management
4.4	Unified API
4.5	Event loop
5	Project governance
6	See also
7	References
8	Further reading
9	External links
History

Ryan Dahl, creator of Node.js, in 2010
Node.js was originally written by Ryan Dahl in 2009,[23] about thirteen years after the introduction of the first server-side JavaScript environment, Netscape's LiveWire Pro Web.[24] The initial release supported only Linux and Mac OS X. Its development and maintenance was led by Dahl and later sponsored by Joyent.[25]

Dahl was inspired to create Node.js after seeing a file upload progress bar on Flickr. The browser did not know how much of the file had been uploaded and had to query the Web server. Dahl desired an easier way.[6][26]

Dahl criticized the limited possibilities of the most popular web server in 2009, Apache HTTP Server, to handle a lot of concurrent connections (up to 10,000 and more) and the most common way of creating code (sequential programming), when code either blocked the entire process or implied multiple execution stacks in the case of simultaneous connections.[27]

Dahl demonstrated the project at the inaugural European JSConf on November 8, 2009.[28][29][30] Node.js combined Google's V8 JavaScript engine, an event loop, and a low-level I/O API.[31]

In January 2010, a package manager was introduced for the Node.js environment called npm.[32] The package manager makes it easier for programmers to publish and share source code of Node.js libraries and is designed to simplify installation, updating, and uninstallation of libraries.[31]

In June 2011, Microsoft and Joyent implemented a native Windows version of Node.js.[33] The first Node.js build supporting Windows was released in July 2011.

In January 2012, Dahl stepped aside, promoting coworker and npm creator Isaac Schlueter to manage the project.[34] In January 2014, Schlueter announced that Timothy J. Fontaine would lead the project.[35]

In December 2014, Fedor Indutny started io.js, a fork of Node.js. Due to the internal conflict over Joyent's governance, io.js was created as an open governance alternative with a separate technical committee.[36][37] Unlike Node.js,[38] the authors planned to keep io.js up-to-date with the latest releases of the Google V8 JavaScript engine.[39]

In February 2015, the intent to form a neutral Node.js Foundation was announced. By June 2015, the Node.js and io.js communities voted to work together under the Node.js Foundation.[40]

In September 2015, Node.js v0.12 and io.js v3.3 were merged back together into Node v4.0.[41] This brought V8 ES6 features into Node.js, and a long-term support release cycle.[42] As of 2016, the io.js website recommends that developers switch back to Node.js and that no further releases of io.js are planned due to the merger.[43]

Overview
Node.js allows the creation of Web servers and networking tools using JavaScript and a collection of "modules" that handle various core functionality.[28][31][44][45][46] Modules are provided for file system I/O, networking (DNS, HTTP, TCP, TLS/SSL, or UDP), binary data (buffers), cryptography functions, data streams, and other core functions.[31][45][47] Node.js's modules use an API designed to reduce the complexity of writing server applications.[31][45]

Node.js is officially supported on Linux, macOS, Microsoft Windows, SmartOS, FreeBSD, and IBM AIX.[3] The provided source code may also be built on similar operating systems or be modified by third parties to support others such as NonStop[48] and Unix servers. Alternatively, they can be written with CoffeeScript[49] (a JavaScript alternative), Dart or TypeScript (strongly typed forms of JavaScript), or any other language that can compile to JavaScript.[49][50]

Node.js is primarily used to build network programs such as Web servers.[44] The biggest difference between Node.js and PHP is that most functions in PHP block until completion (commands execute only after previous commands finish), while Node.js functions are non-blocking (commands execute concurrently or even in parallel,[51][52] and use callbacks to signal completion or failure).[44]

Platform architecture
Node.js brings event-driven programming to web servers, enabling development of fast web servers in JavaScript.[31] Developers can create highly scalable servers without using threading, by using a simplified model of event-driven programming that uses callbacks to signal the completion of a task.[31] Node.js connects the ease of a scripting language (JavaScript) with the power of Unix network programming.[31]

Node.js was built on the Google V8 JavaScript engine since it was open-sourced under the BSD license. It is extremely fast and proficient with internet fundamentals such as HTTP, DNS, TCP.[28] Also, JavaScript was a well-known language, making Node.js immediately accessible to the entire web development community.[28]

Industry support
There are thousands of open-source libraries for Node.js, most of them hosted on the npm website. The Node.js developer community has two main mailing lists and the IRC channel #node.js on freenode. There are multiple developer conferences and events that support the Node.js community including NodeConf, Node Interactive and Node Summit as well as a number of regional events.

The open-source community has developed web frameworks to accelerate the development of applications. Such frameworks include Connect, Express.js, Socket.IO, Koa.js, Hapi.js, Sails.js, Meteor, Derby, and many others.[31][53] Various packages have also been created for interfacing with other languages or runtime environments such as Microsoft .NET.[54]

Modern desktop IDEs provide editing and debugging features specifically for Node.js applications. Such IDEs include Atom, Brackets, JetBrains WebStorm,[55][56] Microsoft Visual Studio (with Node.js Tools for Visual Studio,[57] or TypeScript with Node definitions,[58][59][60][61]) NetBeans,[62] Nodeclipse Enide Studio [63] (Eclipse-based), and Visual Studio Code.[64][65] Certain online web-based IDEs also support Node.js, such as Codeanywhere, Codenvy, Cloud9 IDE, Koding, and the visual flow editor in Node-RED.

Releases
Release	Code name	Release date	LTS status	Active LTS start	Maintenance start	Maintenance end
v0.10.x		2013-03-11	End-of-life	-	2015-10-01	2016-10-31
v0.12.x		2015-02-06	End-of-life	-	2016-04-01	2016-12-31
4.x	Argon[66]	2015-09-08	End-of-life	2015-10-01	2017-04-01	2018-04-30
5.x		2015-10-29	No LTS	N/A	2016-06-30
6.x	Boron[66]	2016-04-26	Maintenance	2016-10-18	2018-04-30	April 2019
7.x		2016-10-25	No LTS	N/A	2017-06-30
8.x	Carbon[66]	2017-05-30	Active	2017-10-31	April 2019	December 2019
9.x		2017-10-01	No LTS	N/A	June 2018
10.x	Dubnium[66]	2018-04-24	Active	October 2018	April 2020	April 2021
11.x[66]		2018-10-23	No LTS	N/A	June 2019
New major releases of Node.js are cut from the GitHub master branch every six months. Even-numbered versions are cut in April and odd-numbered versions are cut in October. When a new odd version is released, the previous even version undergoes transition to Long Term Support (LTS), which gives that version 18 months of active support from the date it is designated LTS. After these 18 months expire, an LTS release receives an additional 12 months of maintenance support. An active version receives non-breaking backports of changes a few weeks after they land in the current release. A maintenance release only receives critical fixes and documentation updates.[66] The LTS Working Group manages strategy and policy in collaboration with the Technical Steering Committee of the Node.js Foundation.

Technical details

This section may be too technical for most readers to understand. Please help improve it to make it understandable to non-experts, without removing the technical details. (August 2015) (Learn how and when to remove this template message)
Node.js is a Javascript runtime environment that processes incoming requests in a loop, called the event loop.

Threading
Node.js operates on a single thread, using non-blocking I/O calls, allowing it to support tens of thousands of concurrent connections without incurring the cost of thread context switching.[67] The design of sharing a single thread among all the requests that use the observer pattern is intended for building highly concurrent applications, where any function performing I/O must use a callback. To accommodate the single-threaded event loop, Node.js uses the libuv libraryâ€”which, in turn, uses a fixed-sized thread pool that handles some of the non-blocking asynchronous I/O operations.[6]

A downside of this single-threaded approach is that Node.js doesn't allow vertical scaling by increasing the number of CPU cores of the machine it is running on without using an additional module, such as cluster,[51] StrongLoop Process Manager,[68] or pm2.[69] However, developers can increase the default number of threads in the libuv thread pool. The server operating system (OS) is likely to distribute these threads across multiple cores.[70]

A thread pool handles execution of parallel tasks in Node.js. The main thread call functions post tasks to the shared task queue, which threads in the thread pool pull and execute. Inherently non-blocking system functions such as networking translate to kernel-side non-blocking sockets, while inherently blocking system functions such as file I/O run in a blocking way on their own threads. When a thread in the thread pool completes a task, it informs the main thread of this, which in turn, wakes up and executes the registered callback. Since Node.js handles callbacks in serial on the main thread, long lasting computations and other CPU-bound tasks freeze the entire event-loop until completion.[citation needed]

V8
V8 is the JavaScript execution engine built for Google Chrome and open-sourced by Google in 2008. Written in C++, V8 compiles JavaScript source code to native machine code instead of interpreting it in real time.[6]

Node.js uses libuv to handle asynchronous events. Libuv is an abstraction layer for network and file system functionality on both Windows and POSIX-based systems such as Linux, macOS, OSS on NonStop, and Unix.

The core functionality of Node.js resides in a JavaScript library. The Node.js bindings, written in C++, connect these technologies to each other and to the operating system.

Package management
npm is the pre-installed package manager for the Node.js server platform. It installs Node.js programs from the npm registry, organizing the installation and management of third-party Node.js programs. Packages in the npm registry can range from simple helper libraries such as Lodash to task runners such as Grunt.

Unified API
Node.js can be combined with a browser, a database that supports JSON data (such as Postgres,[71] MongoDB, or CouchDB) and JSON for a unified JavaScript development stack. With the adaptation of what were essentially server-side development patterns such as MVC, MVP, MVVM, etc., Node.js allows the reuse of the same model and service interface between client-side and server-side.

Event loop
Node.js registers with the operating system so the OS notifies it of connections and issues a callback. Within the Node.js runtime, each connection is a small heap allocation. Traditionally, relatively heavyweight OS processes or threads handled each connection. Node.js uses an event loop for scalability, instead of processes or threads.[72] In contrast to other event-driven servers, Node.js's event loop does not need to be called explicitly. Instead callbacks are defined, and the server automatically enters the event loop at the end of the callback definition. Node.js exits the event loop when there are no further callbacks to be performed.

Project governance
In 2015, various branches of the greater Node.js community began working under the vendor-neutral Node.js Foundation. The stated purpose of the organization "is to enable widespread adoption and help accelerate development of Node.js and other related modules through an open governance model that encourages participation, technical contribution, and a framework for long-term stewardship by an ecosystem invested in Node.js' success."[73]

The Node.js Foundation Technical Steering Committee (TSC) is the technical governing body of the Node.js Foundation. The TSC is responsible for the core Node.js repo as well as dependent and adjacent projects. Generally the TSC delegates administration of these projects to working groups or committees.[74] The LTS group that manages long term supported releases is one such group. Other current groups include: Website, Streams, Build, Diagnostics, i18n, Evangelism, Docker, Addon API, Benchmarking, Post-mortem, Intl, Documentation, and Testing.[75]

In August, 2017, a governance breakdown precipitated efforts to repair the resulting damage and to create a path to future stability of governance.[76]

See also
	Free software portal
List of server-side JavaScript implementations
List of JavaScript libraries
MEAN (software bundle)
Online JavaScript IDE
Rhino (JavaScript engine)
Application server

Node.js
Node.js logo.svg
Original author(s)	Ryan Dahl
Developer(s)	Joyent
Initial release	May 27, 2009; 9 years ago[1]
Stable release	
10.4.0 / June 6, 2018; 6 days ago[2]
Repository	
https://github.com/nodejs/node
Edit this at Wikidata
Written in	C, C++, JavaScript
Operating system	Linux, macOS, Microsoft Windows, SmartOS, FreeBSD, IBM AIX[3]
Type	Run-time environment
License	MIT[4]
Website	nodejs.org
Node.js is an open-source, cross-platform JavaScript run-time environment that executes JavaScript code server-side. Historically, JavaScript was used primarily for client-side scripting, in which scripts written in JavaScript are embedded in a webpage's HTML and run client-side by a JavaScript engine in the user's web browser. Node.js lets developers use JavaScript for server-side scriptingâ€”running scripts server-side to produce dynamic web page content before the page is sent to the user's web browser. Consequently, Node.js represents a "JavaScript everywhere" paradigm,[5] unifying web application development around a single programming language, rather than different languages for server side and client side scripts.

Though .js is the conventional filename extension for JavaScript code, the name "Node.js" does not refer to a particular file in this context and is merely the name of the product. Node.js has an event-driven architecture capable of asynchronous I/O. These design choices aim to optimize throughput and scalability in web applications with many input/output operations, as well as for real-time Web applications (e.g., real-time communication programs and browser games).[6]

The Node.js distributed development project, governed by the Node.js Foundation,[7] is facilitated by the Linux Foundation's Collaborative Projects program.[8]

Corporate users of Node.js software include GoDaddy,[9] Groupon,[10] IBM,[11] LinkedIn,[12][13] Microsoft,[14][15] Netflix,[16] PayPal,[17][18] Rakuten, SAP, Tuenti,[19] Voxer,[20] Walmart,[21] and Yahoo!.[22]

Contents 
1	History
2	Overview
2.1	Platform architecture
2.2	Industry support
3	Releases
4	Technical details
4.1	Threading
4.2	V8
4.3	Package management
4.4	Unified API
4.5	Event loop
5	Project governance
6	See also
7	References
8	Further reading
9	External links
History

Ryan Dahl, creator of Node.js, in 2010
Node.js was originally written by Ryan Dahl in 2009,[23] about thirteen years after the introduction of the first server-side JavaScript environment, Netscape's LiveWire Pro Web.[24] The initial release supported only Linux and Mac OS X. Its development and maintenance was led by Dahl and later sponsored by Joyent.[25]

Dahl was inspired to create Node.js after seeing a file upload progress bar on Flickr. The browser did not know how much of the file had been uploaded and had to query the Web server. Dahl desired an easier way.[6][26]

Dahl criticized the limited possibilities of the most popular web server in 2009, Apache HTTP Server, to handle a lot of concurrent connections (up to 10,000 and more) and the most common way of creating code (sequential programming), when code either blocked the entire process or implied multiple execution stacks in the case of simultaneous connections.[27]

Dahl demonstrated the project at the inaugural European JSConf on November 8, 2009.[28][29][30] Node.js combined Google's V8 JavaScript engine, an event loop, and a low-level I/O API.[31]

In January 2010, a package manager was introduced for the Node.js environment called npm.[32] The package manager makes it easier for programmers to publish and share source code of Node.js libraries and is designed to simplify installation, updating, and uninstallation of libraries.[31]

In June 2011, Microsoft and Joyent implemented a native Windows version of Node.js.[33] The first Node.js build supporting Windows was released in July 2011.

In January 2012, Dahl stepped aside, promoting coworker and npm creator Isaac Schlueter to manage the project.[34] In January 2014, Schlueter announced that Timothy J. Fontaine would lead the project.[35]

In December 2014, Fedor Indutny started io.js, a fork of Node.js. Due to the internal conflict over Joyent's governance, io.js was created as an open governance alternative with a separate technical committee.[36][37] Unlike Node.js,[38] the authors planned to keep io.js up-to-date with the latest releases of the Google V8 JavaScript engine.[39]

In February 2015, the intent to form a neutral Node.js Foundation was announced. By June 2015, the Node.js and io.js communities voted to work together under the Node.js Foundation.[40]

In September 2015, Node.js v0.12 and io.js v3.3 were merged back together into Node v4.0.[41] This brought V8 ES6 features into Node.js, and a long-term support release cycle.[42] As of 2016, the io.js website recommends that developers switch back to Node.js and that no further releases of io.js are planned due to the merger.[43]

Overview
Node.js allows the creation of Web servers and networking tools using JavaScript and a collection of "modules" that handle various core functionality.[28][31][44][45][46] Modules are provided for file system I/O, networking (DNS, HTTP, TCP, TLS/SSL, or UDP), binary data (buffers), cryptography functions, data streams, and other core functions.[31][45][47] Node.js's modules use an API designed to reduce the complexity of writing server applications.[31][45]

Node.js is officially supported on Linux, macOS, Microsoft Windows, SmartOS, FreeBSD, and IBM AIX.[3] The provided source code may also be built on similar operating systems or be modified by third parties to support others such as NonStop[48] and Unix servers. Alternatively, they can be written with CoffeeScript[49] (a JavaScript alternative), Dart or TypeScript (strongly typed forms of JavaScript), or any other language that can compile to JavaScript.[49][50]

Node.js is primarily used to build network programs such as Web servers.[44] The biggest difference between Node.js and PHP is that most functions in PHP block until completion (commands execute only after previous commands finish), while Node.js functions are non-blocking (commands execute concurrently or even in parallel,[51][52] and use callbacks to signal completion or failure).[44]

Platform architecture
Node.js brings event-driven programming to web servers, enabling development of fast web servers in JavaScript.[31] Developers can create highly scalable servers without using threading, by using a simplified model of event-driven programming that uses callbacks to signal the completion of a task.[31] Node.js connects the ease of a scripting language (JavaScript) with the power of Unix network programming.[31]

Node.js was built on the Google V8 JavaScript engine since it was open-sourced under the BSD license. It is extremely fast and proficient with internet fundamentals such as HTTP, DNS, TCP.[28] Also, JavaScript was a well-known language, making Node.js immediately accessible to the entire web development community.[28]

Industry support
There are thousands of open-source libraries for Node.js, most of them hosted on the npm website. The Node.js developer community has two main mailing lists and the IRC channel #node.js on freenode. There are multiple developer conferences and events that support the Node.js community including NodeConf, Node Interactive and Node Summit as well as a number of regional events.

The open-source community has developed web frameworks to accelerate the development of applications. Such frameworks include Connect, Express.js, Socket.IO, Koa.js, Hapi.js, Sails.js, Meteor, Derby, and many others.[31][53] Various packages have also been created for interfacing with other languages or runtime environments such as Microsoft .NET.[54]

Modern desktop IDEs provide editing and debugging features specifically for Node.js applications. Such IDEs include Atom, Brackets, JetBrains WebStorm,[55][56] Microsoft Visual Studio (with Node.js Tools for Visual Studio,[57] or TypeScript with Node definitions,[58][59][60][61]) NetBeans,[62] Nodeclipse Enide Studio [63] (Eclipse-based), and Visual Studio Code.[64][65] Certain online web-based IDEs also support Node.js, such as Codeanywhere, Codenvy, Cloud9 IDE, Koding, and the visual flow editor in Node-RED.

Releases
Release	Code name	Release date	LTS status	Active LTS start	Maintenance start	Maintenance end
v0.10.x		2013-03-11	End-of-life	-	2015-10-01	2016-10-31
v0.12.x		2015-02-06	End-of-life	-	2016-04-01	2016-12-31
4.x	Argon[66]	2015-09-08	End-of-life	2015-10-01	2017-04-01	2018-04-30
5.x		2015-10-29	No LTS	N/A	2016-06-30
6.x	Boron[66]	2016-04-26	Maintenance	2016-10-18	2018-04-30	April 2019
7.x		2016-10-25	No LTS	N/A	2017-06-30
8.x	Carbon[66]	2017-05-30	Active	2017-10-31	April 2019	December 2019
9.x		2017-10-01	No LTS	N/A	June 2018
10.x	Dubnium[66]	2018-04-24	Active	October 2018	April 2020	April 2021
11.x[66]		2018-10-23	No LTS	N/A	June 2019
New major releases of Node.js are cut from the GitHub master branch every six months. Even-numbered versions are cut in April and odd-numbered versions are cut in October. When a new odd version is released, the previous even version undergoes transition to Long Term Support (LTS), which gives that version 18 months of active support from the date it is designated LTS. After these 18 months expire, an LTS release receives an additional 12 months of maintenance support. An active version receives non-breaking backports of changes a few weeks after they land in the current release. A maintenance release only receives critical fixes and documentation updates.[66] The LTS Working Group manages strategy and policy in collaboration with the Technical Steering Committee of the Node.js Foundation.

Technical details

This section may be too technical for most readers to understand. Please help improve it to make it understandable to non-experts, without removing the technical details. (August 2015) (Learn how and when to remove this template message)
Node.js is a Javascript runtime environment that processes incoming requests in a loop, called the event loop.

Threading
Node.js operates on a single thread, using non-blocking I/O calls, allowing it to support tens of thousands of concurrent connections without incurring the cost of thread context switching.[67] The design of sharing a single thread among all the requests that use the observer pattern is intended for building highly concurrent applications, where any function performing I/O must use a callback. To accommodate the single-threaded event loop, Node.js uses the libuv libraryâ€”which, in turn, uses a fixed-sized thread pool that handles some of the non-blocking asynchronous I/O operations.[6]

A downside of this single-threaded approach is that Node.js doesn't allow vertical scaling by increasing the number of CPU cores of the machine it is running on without using an additional module, such as cluster,[51] StrongLoop Process Manager,[68] or pm2.[69] However, developers can increase the default number of threads in the libuv thread pool. The server operating system (OS) is likely to distribute these threads across multiple cores.[70]

A thread pool handles execution of parallel tasks in Node.js. The main thread call functions post tasks to the shared task queue, which threads in the thread pool pull and execute. Inherently non-blocking system functions such as networking translate to kernel-side non-blocking sockets, while inherently blocking system functions such as file I/O run in a blocking way on their own threads. When a thread in the thread pool completes a task, it informs the main thread of this, which in turn, wakes up and executes the registered callback. Since Node.js handles callbacks in serial on the main thread, long lasting computations and other CPU-bound tasks freeze the entire event-loop until completion.[citation needed]

V8
V8 is the JavaScript execution engine built for Google Chrome and open-sourced by Google in 2008. Written in C++, V8 compiles JavaScript source code to native machine code instead of interpreting it in real time.[6]

Node.js uses libuv to handle asynchronous events. Libuv is an abstraction layer for network and file system functionality on both Windows and POSIX-based systems such as Linux, macOS, OSS on NonStop, and Unix.

The core functionality of Node.js resides in a JavaScript library. The Node.js bindings, written in C++, connect these technologies to each other and to the operating system.

Package management
npm is the pre-installed package manager for the Node.js server platform. It installs Node.js programs from the npm registry, organizing the installation and management of third-party Node.js programs. Packages in the npm registry can range from simple helper libraries such as Lodash to task runners such as Grunt.

Unified API
Node.js can be combined with a browser, a database that supports JSON data (such as Postgres,[71] MongoDB, or CouchDB) and JSON for a unified JavaScript development stack. With the adaptation of what were essentially server-side development patterns such as MVC, MVP, MVVM, etc., Node.js allows the reuse of the same model and service interface between client-side and server-side.

Event loop
Node.js registers with the operating system so the OS notifies it of connections and issues a callback. Within the Node.js runtime, each connection is a small heap allocation. Traditionally, relatively heavyweight OS processes or threads handled each connection. Node.js uses an event loop for scalability, instead of processes or threads.[72] In contrast to other event-driven servers, Node.js's event loop does not need to be called explicitly. Instead callbacks are defined, and the server automatically enters the event loop at the end of the callback definition. Node.js exits the event loop when there are no further callbacks to be performed.

Project governance
In 2015, various branches of the greater Node.js community began working under the vendor-neutral Node.js Foundation. The stated purpose of the organization "is to enable widespread adoption and help accelerate development of Node.js and other related modules through an open governance model that encourages participation, technical contribution, and a framework for long-term stewardship by an ecosystem invested in Node.js' success."[73]

The Node.js Foundation Technical Steering Committee (TSC) is the technical governing body of the Node.js Foundation. The TSC is responsible for the core Node.js repo as well as dependent and adjacent projects. Generally the TSC delegates administration of these projects to working groups or committees.[74] The LTS group that manages long term supported releases is one such group. Other current groups include: Website, Streams, Build, Diagnostics, i18n, Evangelism, Docker, Addon API, Benchmarking, Post-mortem, Intl, Documentation, and Testing.[75]

In August, 2017, a governance breakdown precipitated efforts to repair the resulting damage and to create a path to future stability of governance.[76]

See also
	Free software portal
List of server-side JavaScript implementations
List of JavaScript libraries
MEAN (software bundle)
Online JavaScript IDE
Rhino (JavaScript engine)
Application server

Node.js
Node.js logo.svg
Original author(s)	Ryan Dahl
Developer(s)	Joyent
Initial release	May 27, 2009; 9 years ago[1]
Stable release	
10.4.0 / June 6, 2018; 6 days ago[2]
Repository	
https://github.com/nodejs/node
Edit this at Wikidata
Written in	C, C++, JavaScript
Operating system	Linux, macOS, Microsoft Windows, SmartOS, FreeBSD, IBM AIX[3]
Type	Run-time environment
License	MIT[4]
Website	nodejs.org
Node.js is an open-source, cross-platform JavaScript run-time environment that executes JavaScript code server-side. Historically, JavaScript was used primarily for client-side scripting, in which scripts written in JavaScript are embedded in a webpage's HTML and run client-side by a JavaScript engine in the user's web browser. Node.js lets developers use JavaScript for server-side scriptingâ€”running scripts server-side to produce dynamic web page content before the page is sent to the user's web browser. Consequently, Node.js represents a "JavaScript everywhere" paradigm,[5] unifying web application development around a single programming language, rather than different languages for server side and client side scripts.

Though .js is the conventional filename extension for JavaScript code, the name "Node.js" does not refer to a particular file in this context and is merely the name of the product. Node.js has an event-driven architecture capable of asynchronous I/O. These design choices aim to optimize throughput and scalability in web applications with many input/output operations, as well as for real-time Web applications (e.g., real-time communication programs and browser games).[6]

The Node.js distributed development project, governed by the Node.js Foundation,[7] is facilitated by the Linux Foundation's Collaborative Projects program.[8]

Corporate users of Node.js software include GoDaddy,[9] Groupon,[10] IBM,[11] LinkedIn,[12][13] Microsoft,[14][15] Netflix,[16] PayPal,[17][18] Rakuten, SAP, Tuenti,[19] Voxer,[20] Walmart,[21] and Yahoo!.[22]

Contents 
1	History
2	Overview
2.1	Platform architecture
2.2	Industry support
3	Releases
4	Technical details
4.1	Threading
4.2	V8
4.3	Package management
4.4	Unified API
4.5	Event loop
5	Project governance
6	See also
7	References
8	Further reading
9	External links
History

Ryan Dahl, creator of Node.js, in 2010
Node.js was originally written by Ryan Dahl in 2009,[23] about thirteen years after the introduction of the first server-side JavaScript environment, Netscape's LiveWire Pro Web.[24] The initial release supported only Linux and Mac OS X. Its development and maintenance was led by Dahl and later sponsored by Joyent.[25]

Dahl was inspired to create Node.js after seeing a file upload progress bar on Flickr. The browser did not know how much of the file had been uploaded and had to query the Web server. Dahl desired an easier way.[6][26]

Dahl criticized the limited possibilities of the most popular web server in 2009, Apache HTTP Server, to handle a lot of concurrent connections (up to 10,000 and more) and the most common way of creating code (sequential programming), when code either blocked the entire process or implied multiple execution stacks in the case of simultaneous connections.[27]

Dahl demonstrated the project at the inaugural European JSConf on November 8, 2009.[28][29][30] Node.js combined Google's V8 JavaScript engine, an event loop, and a low-level I/O API.[31]

In January 2010, a package manager was introduced for the Node.js environment called npm.[32] The package manager makes it easier for programmers to publish and share source code of Node.js libraries and is designed to simplify installation, updating, and uninstallation of libraries.[31]

In June 2011, Microsoft and Joyent implemented a native Windows version of Node.js.[33] The first Node.js build supporting Windows was released in July 2011.

In January 2012, Dahl stepped aside, promoting coworker and npm creator Isaac Schlueter to manage the project.[34] In January 2014, Schlueter announced that Timothy J. Fontaine would lead the project.[35]

In December 2014, Fedor Indutny started io.js, a fork of Node.js. Due to the internal conflict over Joyent's governance, io.js was created as an open governance alternative with a separate technical committee.[36][37] Unlike Node.js,[38] the authors planned to keep io.js up-to-date with the latest releases of the Google V8 JavaScript engine.[39]

In February 2015, the intent to form a neutral Node.js Foundation was announced. By June 2015, the Node.js and io.js communities voted to work together under the Node.js Foundation.[40]

In September 2015, Node.js v0.12 and io.js v3.3 were merged back together into Node v4.0.[41] This brought V8 ES6 features into Node.js, and a long-term support release cycle.[42] As of 2016, the io.js website recommends that developers switch back to Node.js and that no further releases of io.js are planned due to the merger.[43]

Overview
Node.js allows the creation of Web servers and networking tools using JavaScript and a collection of "modules" that handle various core functionality.[28][31][44][45][46] Modules are provided for file system I/O, networking (DNS, HTTP, TCP, TLS/SSL, or UDP), binary data (buffers), cryptography functions, data streams, and other core functions.[31][45][47] Node.js's modules use an API designed to reduce the complexity of writing server applications.[31][45]

Node.js is officially supported on Linux, macOS, Microsoft Windows, SmartOS, FreeBSD, and IBM AIX.[3] The provided source code may also be built on similar operating systems or be modified by third parties to support others such as NonStop[48] and Unix servers. Alternatively, they can be written with CoffeeScript[49] (a JavaScript alternative), Dart or TypeScript (strongly typed forms of JavaScript), or any other language that can compile to JavaScript.[49][50]

Node.js is primarily used to build network programs such as Web servers.[44] The biggest difference between Node.js and PHP is that most functions in PHP block until completion (commands execute only after previous commands finish), while Node.js functions are non-blocking (commands execute concurrently or even in parallel,[51][52] and use callbacks to signal completion or failure).[44]

Platform architecture
Node.js brings event-driven programming to web servers, enabling development of fast web servers in JavaScript.[31] Developers can create highly scalable servers without using threading, by using a simplified model of event-driven programming that uses callbacks to signal the completion of a task.[31] Node.js connects the ease of a scripting language (JavaScript) with the power of Unix network programming.[31]

Node.js was built on the Google V8 JavaScript engine since it was open-sourced under the BSD license. It is extremely fast and proficient with internet fundamentals such as HTTP, DNS, TCP.[28] Also, JavaScript was a well-known language, making Node.js immediately accessible to the entire web development community.[28]

Industry support
There are thousands of open-source libraries for Node.js, most of them hosted on the npm website. The Node.js developer community has two main mailing lists and the IRC channel #node.js on freenode. There are multiple developer conferences and events that support the Node.js community including NodeConf, Node Interactive and Node Summit as well as a number of regional events.

The open-source community has developed web frameworks to accelerate the development of applications. Such frameworks include Connect, Express.js, Socket.IO, Koa.js, Hapi.js, Sails.js, Meteor, Derby, and many others.[31][53] Various packages have also been created for interfacing with other languages or runtime environments such as Microsoft .NET.[54]

Modern desktop IDEs provide editing and debugging features specifically for Node.js applications. Such IDEs include Atom, Brackets, JetBrains WebStorm,[55][56] Microsoft Visual Studio (with Node.js Tools for Visual Studio,[57] or TypeScript with Node definitions,[58][59][60][61]) NetBeans,[62] Nodeclipse Enide Studio [63] (Eclipse-based), and Visual Studio Code.[64][65] Certain online web-based IDEs also support Node.js, such as Codeanywhere, Codenvy, Cloud9 IDE, Koding, and the visual flow editor in Node-RED.

Releases
Release	Code name	Release date	LTS status	Active LTS start	Maintenance start	Maintenance end
v0.10.x		2013-03-11	End-of-life	-	2015-10-01	2016-10-31
v0.12.x		2015-02-06	End-of-life	-	2016-04-01	2016-12-31
4.x	Argon[66]	2015-09-08	End-of-life	2015-10-01	2017-04-01	2018-04-30
5.x		2015-10-29	No LTS	N/A	2016-06-30
6.x	Boron[66]	2016-04-26	Maintenance	2016-10-18	2018-04-30	April 2019
7.x		2016-10-25	No LTS	N/A	2017-06-30
8.x	Carbon[66]	2017-05-30	Active	2017-10-31	April 2019	December 2019
9.x		2017-10-01	No LTS	N/A	June 2018
10.x	Dubnium[66]	2018-04-24	Active	October 2018	April 2020	April 2021
11.x[66]		2018-10-23	No LTS	N/A	June 2019
New major releases of Node.js are cut from the GitHub master branch every six months. Even-numbered versions are cut in April and odd-numbered versions are cut in October. When a new odd version is released, the previous even version undergoes transition to Long Term Support (LTS), which gives that version 18 months of active support from the date it is designated LTS. After these 18 months expire, an LTS release receives an additional 12 months of maintenance support. An active version receives non-breaking backports of changes a few weeks after they land in the current release. A maintenance release only receives critical fixes and documentation updates.[66] The LTS Working Group manages strategy and policy in collaboration with the Technical Steering Committee of the Node.js Foundation.

Technical details

This section may be too technical for most readers to understand. Please help improve it to make it understandable to non-experts, without removing the technical details. (August 2015) (Learn how and when to remove this template message)
Node.js is a Javascript runtime environment that processes incoming requests in a loop, called the event loop.

Threading
Node.js operates on a single thread, using non-blocking I/O calls, allowing it to support tens of thousands of concurrent connections without incurring the cost of thread context switching.[67] The design of sharing a single thread among all the requests that use the observer pattern is intended for building highly concurrent applications, where any function performing I/O must use a callback. To accommodate the single-threaded event loop, Node.js uses the libuv libraryâ€”which, in turn, uses a fixed-sized thread pool that handles some of the non-blocking asynchronous I/O operations.[6]

A downside of this single-threaded approach is that Node.js doesn't allow vertical scaling by increasing the number of CPU cores of the machine it is running on without using an additional module, such as cluster,[51] StrongLoop Process Manager,[68] or pm2.[69] However, developers can increase the default number of threads in the libuv thread pool. The server operating system (OS) is likely to distribute these threads across multiple cores.[70]

A thread pool handles execution of parallel tasks in Node.js. The main thread call functions post tasks to the shared task queue, which threads in the thread pool pull and execute. Inherently non-blocking system functions such as networking translate to kernel-side non-blocking sockets, while inherently blocking system functions such as file I/O run in a blocking way on their own threads. When a thread in the thread pool completes a task, it informs the main thread of this, which in turn, wakes up and executes the registered callback. Since Node.js handles callbacks in serial on the main thread, long lasting computations and other CPU-bound tasks freeze the entire event-loop until completion.[citation needed]

V8
V8 is the JavaScript execution engine built for Google Chrome and open-sourced by Google in 2008. Written in C++, V8 compiles JavaScript source code to native machine code instead of interpreting it in real time.[6]

Node.js uses libuv to handle asynchronous events. Libuv is an abstraction layer for network and file system functionality on both Windows and POSIX-based systems such as Linux, macOS, OSS on NonStop, and Unix.

The core functionality of Node.js resides in a JavaScript library. The Node.js bindings, written in C++, connect these technologies to each other and to the operating system.

Package management
npm is the pre-installed package manager for the Node.js server platform. It installs Node.js programs from the npm registry, organizing the installation and management of third-party Node.js programs. Packages in the npm registry can range from simple helper libraries such as Lodash to task runners such as Grunt.

Unified API
Node.js can be combined with a browser, a database that supports JSON data (such as Postgres,[71] MongoDB, or CouchDB) and JSON for a unified JavaScript development stack. With the adaptation of what were essentially server-side development patterns such as MVC, MVP, MVVM, etc., Node.js allows the reuse of the same model and service interface between client-side and server-side.

Event loop
Node.js registers with the operating system so the OS notifies it of connections and issues a callback. Within the Node.js runtime, each connection is a small heap allocation. Traditionally, relatively heavyweight OS processes or threads handled each connection. Node.js uses an event loop for scalability, instead of processes or threads.[72] In contrast to other event-driven servers, Node.js's event loop does not need to be called explicitly. Instead callbacks are defined, and the server automatically enters the event loop at the end of the callback definition. Node.js exits the event loop when there are no further callbacks to be performed.

Project governance
In 2015, various branches of the greater Node.js community began working under the vendor-neutral Node.js Foundation. The stated purpose of the organization "is to enable widespread adoption and help accelerate development of Node.js and other related modules through an open governance model that encourages participation, technical contribution, and a framework for long-term stewardship by an ecosystem invested in Node.js' success."[73]

The Node.js Foundation Technical Steering Committee (TSC) is the technical governing body of the Node.js Foundation. The TSC is responsible for the core Node.js repo as well as dependent and adjacent projects. Generally the TSC delegates administration of these projects to working groups or committees.[74] The LTS group that manages long term supported releases is one such group. Other current groups include: Website, Streams, Build, Diagnostics, i18n, Evangelism, Docker, Addon API, Benchmarking, Post-mortem, Intl, Documentation, and Testing.[75]

In August, 2017, a governance breakdown precipitated efforts to repair the resulting damage and to create a path to future stability of governance.[76]

See also
	Free software portal
List of server-side JavaScript implementations
List of JavaScript libraries
MEAN (software bundle)
Online JavaScript IDE
Rhino (JavaScript engine)
Application server

Node.js
Node.js logo.svg
Original author(s)	Ryan Dahl
Developer(s)	Joyent
Initial release	May 27, 2009; 9 years ago[1]
Stable release	
10.4.0 / June 6, 2018; 6 days ago[2]
Repository	
https://github.com/nodejs/node
Edit this at Wikidata
Written in	C, C++, JavaScript
Operating system	Linux, macOS, Microsoft Windows, SmartOS, FreeBSD, IBM AIX[3]
Type	Run-time environment
License	MIT[4]
Website	nodejs.org
Node.js is an open-source, cross-platform JavaScript run-time environment that executes JavaScript code server-side. Historically, JavaScript was used primarily for client-side scripting, in which scripts written in JavaScript are embedded in a webpage's HTML and run client-side by a JavaScript engine in the user's web browser. Node.js lets developers use JavaScript for server-side scriptingâ€”running scripts server-side to produce dynamic web page content before the page is sent to the user's web browser. Consequently, Node.js represents a "JavaScript everywhere" paradigm,[5] unifying web application development around a single programming language, rather than different languages for server side and client side scripts.

Though .js is the conventional filename extension for JavaScript code, the name "Node.js" does not refer to a particular file in this context and is merely the name of the product. Node.js has an event-driven architecture capable of asynchronous I/O. These design choices aim to optimize throughput and scalability in web applications with many input/output operations, as well as for real-time Web applications (e.g., real-time communication programs and browser games).[6]

The Node.js distributed development project, governed by the Node.js Foundation,[7] is facilitated by the Linux Foundation's Collaborative Projects program.[8]

Corporate users of Node.js software include GoDaddy,[9] Groupon,[10] IBM,[11] LinkedIn,[12][13] Microsoft,[14][15] Netflix,[16] PayPal,[17][18] Rakuten, SAP, Tuenti,[19] Voxer,[20] Walmart,[21] and Yahoo!.[22]

Contents 
1	History
2	Overview
2.1	Platform architecture
2.2	Industry support
3	Releases
4	Technical details
4.1	Threading
4.2	V8
4.3	Package management
4.4	Unified API
4.5	Event loop
5	Project governance
6	See also
7	References
8	Further reading
9	External links
History

Ryan Dahl, creator of Node.js, in 2010
Node.js was originally written by Ryan Dahl in 2009,[23] about thirteen years after the introduction of the first server-side JavaScript environment, Netscape's LiveWire Pro Web.[24] The initial release supported only Linux and Mac OS X. Its development and maintenance was led by Dahl and later sponsored by Joyent.[25]

Dahl was inspired to create Node.js after seeing a file upload progress bar on Flickr. The browser did not know how much of the file had been uploaded and had to query the Web server. Dahl desired an easier way.[6][26]

Dahl criticized the limited possibilities of the most popular web server in 2009, Apache HTTP Server, to handle a lot of concurrent connections (up to 10,000 and more) and the most common way of creating code (sequential programming), when code either blocked the entire process or implied multiple execution stacks in the case of simultaneous connections.[27]

Dahl demonstrated the project at the inaugural European JSConf on November 8, 2009.[28][29][30] Node.js combined Google's V8 JavaScript engine, an event loop, and a low-level I/O API.[31]

In January 2010, a package manager was introduced for the Node.js environment called npm.[32] The package manager makes it easier for programmers to publish and share source code of Node.js libraries and is designed to simplify installation, updating, and uninstallation of libraries.[31]

In June 2011, Microsoft and Joyent implemented a native Windows version of Node.js.[33] The first Node.js build supporting Windows was released in July 2011.

In January 2012, Dahl stepped aside, promoting coworker and npm creator Isaac Schlueter to manage the project.[34] In January 2014, Schlueter announced that Timothy J. Fontaine would lead the project.[35]

In December 2014, Fedor Indutny started io.js, a fork of Node.js. Due to the internal conflict over Joyent's governance, io.js was created as an open governance alternative with a separate technical committee.[36][37] Unlike Node.js,[38] the authors planned to keep io.js up-to-date with the latest releases of the Google V8 JavaScript engine.[39]

In February 2015, the intent to form a neutral Node.js Foundation was announced. By June 2015, the Node.js and io.js communities voted to work together under the Node.js Foundation.[40]

In September 2015, Node.js v0.12 and io.js v3.3 were merged back together into Node v4.0.[41] This brought V8 ES6 features into Node.js, and a long-term support release cycle.[42] As of 2016, the io.js website recommends that developers switch back to Node.js and that no further releases of io.js are planned due to the merger.[43]

Overview
Node.js allows the creation of Web servers and networking tools using JavaScript and a collection of "modules" that handle various core functionality.[28][31][44][45][46] Modules are provided for file system I/O, networking (DNS, HTTP, TCP, TLS/SSL, or UDP), binary data (buffers), cryptography functions, data streams, and other core functions.[31][45][47] Node.js's modules use an API designed to reduce the complexity of writing server applications.[31][45]

Node.js is officially supported on Linux, macOS, Microsoft Windows, SmartOS, FreeBSD, and IBM AIX.[3] The provided source code may also be built on similar operating systems or be modified by third parties to support others such as NonStop[48] and Unix servers. Alternatively, they can be written with CoffeeScript[49] (a JavaScript alternative), Dart or TypeScript (strongly typed forms of JavaScript), or any other language that can compile to JavaScript.[49][50]

Node.js is primarily used to build network programs such as Web servers.[44] The biggest difference between Node.js and PHP is that most functions in PHP block until completion (commands execute only after previous commands finish), while Node.js functions are non-blocking (commands execute concurrently or even in parallel,[51][52] and use callbacks to signal completion or failure).[44]

Platform architecture
Node.js brings event-driven programming to web servers, enabling development of fast web servers in JavaScript.[31] Developers can create highly scalable servers without using threading, by using a simplified model of event-driven programming that uses callbacks to signal the completion of a task.[31] Node.js connects the ease of a scripting language (JavaScript) with the power of Unix network programming.[31]

Node.js was built on the Google V8 JavaScript engine since it was open-sourced under the BSD license. It is extremely fast and proficient with internet fundamentals such as HTTP, DNS, TCP.[28] Also, JavaScript was a well-known language, making Node.js immediately accessible to the entire web development community.[28]

Industry support
There are thousands of open-source libraries for Node.js, most of them hosted on the npm website. The Node.js developer community has two main mailing lists and the IRC channel #node.js on freenode. There are multiple developer conferences and events that support the Node.js community including NodeConf, Node Interactive and Node Summit as well as a number of regional events.

The open-source community has developed web frameworks to accelerate the development of applications. Such frameworks include Connect, Express.js, Socket.IO, Koa.js, Hapi.js, Sails.js, Meteor, Derby, and many others.[31][53] Various packages have also been created for interfacing with other languages or runtime environments such as Microsoft .NET.[54]

Modern desktop IDEs provide editing and debugging features specifically for Node.js applications. Such IDEs include Atom, Brackets, JetBrains WebStorm,[55][56] Microsoft Visual Studio (with Node.js Tools for Visual Studio,[57] or TypeScript with Node definitions,[58][59][60][61]) NetBeans,[62] Nodeclipse Enide Studio [63] (Eclipse-based), and Visual Studio Code.[64][65] Certain online web-based IDEs also support Node.js, such as Codeanywhere, Codenvy, Cloud9 IDE, Koding, and the visual flow editor in Node-RED.

Releases
Release	Code name	Release date	LTS status	Active LTS start	Maintenance start	Maintenance end
v0.10.x		2013-03-11	End-of-life	-	2015-10-01	2016-10-31
v0.12.x		2015-02-06	End-of-life	-	2016-04-01	2016-12-31
4.x	Argon[66]	2015-09-08	End-of-life	2015-10-01	2017-04-01	2018-04-30
5.x		2015-10-29	No LTS	N/A	2016-06-30
6.x	Boron[66]	2016-04-26	Maintenance	2016-10-18	2018-04-30	April 2019
7.x		2016-10-25	No LTS	N/A	2017-06-30
8.x	Carbon[66]	2017-05-30	Active	2017-10-31	April 2019	December 2019
9.x		2017-10-01	No LTS	N/A	June 2018
10.x	Dubnium[66]	2018-04-24	Active	October 2018	April 2020	April 2021
11.x[66]		2018-10-23	No LTS	N/A	June 2019
New major releases of Node.js are cut from the GitHub master branch every six months. Even-numbered versions are cut in April and odd-numbered versions are cut in October. When a new odd version is released, the previous even version undergoes transition to Long Term Support (LTS), which gives that version 18 months of active support from the date it is designated LTS. After these 18 months expire, an LTS release receives an additional 12 months of maintenance support. An active version receives non-breaking backports of changes a few weeks after they land in the current release. A maintenance release only receives critical fixes and documentation updates.[66] The LTS Working Group manages strategy and policy in collaboration with the Technical Steering Committee of the Node.js Foundation.

Technical details

This section may be too technical for most readers to understand. Please help improve it to make it understandable to non-experts, without removing the technical details. (August 2015) (Learn how and when to remove this template message)
Node.js is a Javascript runtime environment that processes incoming requests in a loop, called the event loop.

Threading
Node.js operates on a single thread, using non-blocking I/O calls, allowing it to support tens of thousands of concurrent connections without incurring the cost of thread context switching.[67] The design of sharing a single thread among all the requests that use the observer pattern is intended for building highly concurrent applications, where any function performing I/O must use a callback. To accommodate the single-threaded event loop, Node.js uses the libuv libraryâ€”which, in turn, uses a fixed-sized thread pool that handles some of the non-blocking asynchronous I/O operations.[6]

A downside of this single-threaded approach is that Node.js doesn't allow vertical scaling by increasing the number of CPU cores of the machine it is running on without using an additional module, such as cluster,[51] StrongLoop Process Manager,[68] or pm2.[69] However, developers can increase the default number of threads in the libuv thread pool. The server operating system (OS) is likely to distribute these threads across multiple cores.[70]

A thread pool handles execution of parallel tasks in Node.js. The main thread call functions post tasks to the shared task queue, which threads in the thread pool pull and execute. Inherently non-blocking system functions such as networking translate to kernel-side non-blocking sockets, while inherently blocking system functions such as file I/O run in a blocking way on their own threads. When a thread in the thread pool completes a task, it informs the main thread of this, which in turn, wakes up and executes the registered callback. Since Node.js handles callbacks in serial on the main thread, long lasting computations and other CPU-bound tasks freeze the entire event-loop until completion.[citation needed]

V8
V8 is the JavaScript execution engine built for Google Chrome and open-sourced by Google in 2008. Written in C++, V8 compiles JavaScript source code to native machine code instead of interpreting it in real time.[6]

Node.js uses libuv to handle asynchronous events. Libuv is an abstraction layer for network and file system functionality on both Windows and POSIX-based systems such as Linux, macOS, OSS on NonStop, and Unix.

The core functionality of Node.js resides in a JavaScript library. The Node.js bindings, written in C++, connect these technologies to each other and to the operating system.

Package management
npm is the pre-installed package manager for the Node.js server platform. It installs Node.js programs from the npm registry, organizing the installation and management of third-party Node.js programs. Packages in the npm registry can range from simple helper libraries such as Lodash to task runners such as Grunt.

Unified API
Node.js can be combined with a browser, a database that supports JSON data (such as Postgres,[71] MongoDB, or CouchDB) and JSON for a unified JavaScript development stack. With the adaptation of what were essentially server-side development patterns such as MVC, MVP, MVVM, etc., Node.js allows the reuse of the same model and service interface between client-side and server-side.

Event loop
Node.js registers with the operating system so the OS notifies it of connections and issues a callback. Within the Node.js runtime, each connection is a small heap allocation. Traditionally, relatively heavyweight OS processes or threads handled each connection. Node.js uses an event loop for scalability, instead of processes or threads.[72] In contrast to other event-driven servers, Node.js's event loop does not need to be called explicitly. Instead callbacks are defined, and the server automatically enters the event loop at the end of the callback definition. Node.js exits the event loop when there are no further callbacks to be performed.

Project governance
In 2015, various branches of the greater Node.js community began working under the vendor-neutral Node.js Foundation. The stated purpose of the organization "is to enable widespread adoption and help accelerate development of Node.js and other related modules through an open governance model that encourages participation, technical contribution, and a framework for long-term stewardship by an ecosystem invested in Node.js' success."[73]

The Node.js Foundation Technical Steering Committee (TSC) is the technical governing body of the Node.js Foundation. The TSC is responsible for the core Node.js repo as well as dependent and adjacent projects. Generally the TSC delegates administration of these projects to working groups or committees.[74] The LTS group that manages long term supported releases is one such group. Other current groups include: Website, Streams, Build, Diagnostics, i18n, Evangelism, Docker, Addon API, Benchmarking, Post-mortem, Intl, Documentation, and Testing.[75]

In August, 2017, a governance breakdown precipitated efforts to repair the resulting damage and to create a path to future stability of governance.[76]

See also
	Free software portal
List of server-side JavaScript implementations
List of JavaScript libraries
MEAN (software bundle)
Online JavaScript IDE
Rhino (JavaScript engine)
Application server

Node.js
Node.js logo.svg
Original author(s)	Ryan Dahl
Developer(s)	Joyent
Initial release	May 27, 2009; 9 years ago[1]
Stable release	
10.4.0 / June 6, 2018; 6 days ago[2]
Repository	
https://github.com/nodejs/node
Edit this at Wikidata
Written in	C, C++, JavaScript
Operating system	Linux, macOS, Microsoft Windows, SmartOS, FreeBSD, IBM AIX[3]
Type	Run-time environment
License	MIT[4]
Website	nodejs.org
Node.js is an open-source, cross-platform JavaScript run-time environment that executes JavaScript code server-side. Historically, JavaScript was used primarily for client-side scripting, in which scripts written in JavaScript are embedded in a webpage's HTML and run client-side by a JavaScript engine in the user's web browser. Node.js lets developers use JavaScript for server-side scriptingâ€”running scripts server-side to produce dynamic web page content before the page is sent to the user's web browser. Consequently, Node.js represents a "JavaScript everywhere" paradigm,[5] unifying web application development around a single programming language, rather than different languages for server side and client side scripts.

Though .js is the conventional filename extension for JavaScript code, the name "Node.js" does not refer to a particular file in this context and is merely the name of the product. Node.js has an event-driven architecture capable of asynchronous I/O. These design choices aim to optimize throughput and scalability in web applications with many input/output operations, as well as for real-time Web applications (e.g., real-time communication programs and browser games).[6]

The Node.js distributed development project, governed by the Node.js Foundation,[7] is facilitated by the Linux Foundation's Collaborative Projects program.[8]

Corporate users of Node.js software include GoDaddy,[9] Groupon,[10] IBM,[11] LinkedIn,[12][13] Microsoft,[14][15] Netflix,[16] PayPal,[17][18] Rakuten, SAP, Tuenti,[19] Voxer,[20] Walmart,[21] and Yahoo!.[22]

Contents 
1	History
2	Overview
2.1	Platform architecture
2.2	Industry support
3	Releases
4	Technical details
4.1	Threading
4.2	V8
4.3	Package management
4.4	Unified API
4.5	Event loop
5	Project governance
6	See also
7	References
8	Further reading
9	External links
History

Ryan Dahl, creator of Node.js, in 2010
Node.js was originally written by Ryan Dahl in 2009,[23] about thirteen years after the introduction of the first server-side JavaScript environment, Netscape's LiveWire Pro Web.[24] The initial release supported only Linux and Mac OS X. Its development and maintenance was led by Dahl and later sponsored by Joyent.[25]

Dahl was inspired to create Node.js after seeing a file upload progress bar on Flickr. The browser did not know how much of the file had been uploaded and had to query the Web server. Dahl desired an easier way.[6][26]

Dahl criticized the limited possibilities of the most popular web server in 2009, Apache HTTP Server, to handle a lot of concurrent connections (up to 10,000 and more) and the most common way of creating code (sequential programming), when code either blocked the entire process or implied multiple execution stacks in the case of simultaneous connections.[27]

Dahl demonstrated the project at the inaugural European JSConf on November 8, 2009.[28][29][30] Node.js combined Google's V8 JavaScript engine, an event loop, and a low-level I/O API.[31]

In January 2010, a package manager was introduced for the Node.js environment called npm.[32] The package manager makes it easier for programmers to publish and share source code of Node.js libraries and is designed to simplify installation, updating, and uninstallation of libraries.[31]

In June 2011, Microsoft and Joyent implemented a native Windows version of Node.js.[33] The first Node.js build supporting Windows was released in July 2011.

In January 2012, Dahl stepped aside, promoting coworker and npm creator Isaac Schlueter to manage the project.[34] In January 2014, Schlueter announced that Timothy J. Fontaine would lead the project.[35]

In December 2014, Fedor Indutny started io.js, a fork of Node.js. Due to the internal conflict over Joyent's governance, io.js was created as an open governance alternative with a separate technical committee.[36][37] Unlike Node.js,[38] the authors planned to keep io.js up-to-date with the latest releases of the Google V8 JavaScript engine.[39]

In February 2015, the intent to form a neutral Node.js Foundation was announced. By June 2015, the Node.js and io.js communities voted to work together under the Node.js Foundation.[40]

In September 2015, Node.js v0.12 and io.js v3.3 were merged back together into Node v4.0.[41] This brought V8 ES6 features into Node.js, and a long-term support release cycle.[42] As of 2016, the io.js website recommends that developers switch back to Node.js and that no further releases of io.js are planned due to the merger.[43]

Overview
Node.js allows the creation of Web servers and networking tools using JavaScript and a collection of "modules" that handle various core functionality.[28][31][44][45][46] Modules are provided for file system I/O, networking (DNS, HTTP, TCP, TLS/SSL, or UDP), binary data (buffers), cryptography functions, data streams, and other core functions.[31][45][47] Node.js's modules use an API designed to reduce the complexity of writing server applications.[31][45]

Node.js is officially supported on Linux, macOS, Microsoft Windows, SmartOS, FreeBSD, and IBM AIX.[3] The provided source code may also be built on similar operating systems or be modified by third parties to support others such as NonStop[48] and Unix servers. Alternatively, they can be written with CoffeeScript[49] (a JavaScript alternative), Dart or TypeScript (strongly typed forms of JavaScript), or any other language that can compile to JavaScript.[49][50]

Node.js is primarily used to build network programs such as Web servers.[44] The biggest difference between Node.js and PHP is that most functions in PHP block until completion (commands execute only after previous commands finish), while Node.js functions are non-blocking (commands execute concurrently or even in parallel,[51][52] and use callbacks to signal completion or failure).[44]

Platform architecture
Node.js brings event-driven programming to web servers, enabling development of fast web servers in JavaScript.[31] Developers can create highly scalable servers without using threading, by using a simplified model of event-driven programming that uses callbacks to signal the completion of a task.[31] Node.js connects the ease of a scripting language (JavaScript) with the power of Unix network programming.[31]

Node.js was built on the Google V8 JavaScript engine since it was open-sourced under the BSD license. It is extremely fast and proficient with internet fundamentals such as HTTP, DNS, TCP.[28] Also, JavaScript was a well-known language, making Node.js immediately accessible to the entire web development community.[28]

Industry support
There are thousands of open-source libraries for Node.js, most of them hosted on the npm website. The Node.js developer community has two main mailing lists and the IRC channel #node.js on freenode. There are multiple developer conferences and events that support the Node.js community including NodeConf, Node Interactive and Node Summit as well as a number of regional events.

The open-source community has developed web frameworks to accelerate the development of applications. Such frameworks include Connect, Express.js, Socket.IO, Koa.js, Hapi.js, Sails.js, Meteor, Derby, and many others.[31][53] Various packages have also been created for interfacing with other languages or runtime environments such as Microsoft .NET.[54]

Modern desktop IDEs provide editing and debugging features specifically for Node.js applications. Such IDEs include Atom, Brackets, JetBrains WebStorm,[55][56] Microsoft Visual Studio (with Node.js Tools for Visual Studio,[57] or TypeScript with Node definitions,[58][59][60][61]) NetBeans,[62] Nodeclipse Enide Studio [63] (Eclipse-based), and Visual Studio Code.[64][65] Certain online web-based IDEs also support Node.js, such as Codeanywhere, Codenvy, Cloud9 IDE, Koding, and the visual flow editor in Node-RED.

Releases
Release	Code name	Release date	LTS status	Active LTS start	Maintenance start	Maintenance end
v0.10.x		2013-03-11	End-of-life	-	2015-10-01	2016-10-31
v0.12.x		2015-02-06	End-of-life	-	2016-04-01	2016-12-31
4.x	Argon[66]	2015-09-08	End-of-life	2015-10-01	2017-04-01	2018-04-30
5.x		2015-10-29	No LTS	N/A	2016-06-30
6.x	Boron[66]	2016-04-26	Maintenance	2016-10-18	2018-04-30	April 2019
7.x		2016-10-25	No LTS	N/A	2017-06-30
8.x	Carbon[66]	2017-05-30	Active	2017-10-31	April 2019	December 2019
9.x		2017-10-01	No LTS	N/A	June 2018
10.x	Dubnium[66]	2018-04-24	Active	October 2018	April 2020	April 2021
11.x[66]		2018-10-23	No LTS	N/A	June 2019
New major releases of Node.js are cut from the GitHub master branch every six months. Even-numbered versions are cut in April and odd-numbered versions are cut in October. When a new odd version is released, the previous even version undergoes transition to Long Term Support (LTS), which gives that version 18 months of active support from the date it is designated LTS. After these 18 months expire, an LTS release receives an additional 12 months of maintenance support. An active version receives non-breaking backports of changes a few weeks after they land in the current release. A maintenance release only receives critical fixes and documentation updates.[66] The LTS Working Group manages strategy and policy in collaboration with the Technical Steering Committee of the Node.js Foundation.

Technical details

This section may be too technical for most readers to understand. Please help improve it to make it understandable to non-experts, without removing the technical details. (August 2015) (Learn how and when to remove this template message)
Node.js is a Javascript runtime environment that processes incoming requests in a loop, called the event loop.

Threading
Node.js operates on a single thread, using non-blocking I/O calls, allowing it to support tens of thousands of concurrent connections without incurring the cost of thread context switching.[67] The design of sharing a single thread among all the requests that use the observer pattern is intended for building highly concurrent applications, where any function performing I/O must use a callback. To accommodate the single-threaded event loop, Node.js uses the libuv libraryâ€”which, in turn, uses a fixed-sized thread pool that handles some of the non-blocking asynchronous I/O operations.[6]

A downside of this single-threaded approach is that Node.js doesn't allow vertical scaling by increasing the number of CPU cores of the machine it is running on without using an additional module, such as cluster,[51] StrongLoop Process Manager,[68] or pm2.[69] However, developers can increase the default number of threads in the libuv thread pool. The server operating system (OS) is likely to distribute these threads across multiple cores.[70]

A thread pool handles execution of parallel tasks in Node.js. The main thread call functions post tasks to the shared task queue, which threads in the thread pool pull and execute. Inherently non-blocking system functions such as networking translate to kernel-side non-blocking sockets, while inherently blocking system functions such as file I/O run in a blocking way on their own threads. When a thread in the thread pool completes a task, it informs the main thread of this, which in turn, wakes up and executes the registered callback. Since Node.js handles callbacks in serial on the main thread, long lasting computations and other CPU-bound tasks freeze the entire event-loop until completion.[citation needed]

V8
V8 is the JavaScript execution engine built for Google Chrome and open-sourced by Google in 2008. Written in C++, V8 compiles JavaScript source code to native machine code instead of interpreting it in real time.[6]

Node.js uses libuv to handle asynchronous events. Libuv is an abstraction layer for network and file system functionality on both Windows and POSIX-based systems such as Linux, macOS, OSS on NonStop, and Unix.

The core functionality of Node.js resides in a JavaScript library. The Node.js bindings, written in C++, connect these technologies to each other and to the operating system.

Package management
npm is the pre-installed package manager for the Node.js server platform. It installs Node.js programs from the npm registry, organizing the installation and management of third-party Node.js programs. Packages in the npm registry can range from simple helper libraries such as Lodash to task runners such as Grunt.

Unified API
Node.js can be combined with a browser, a database that supports JSON data (such as Postgres,[71] MongoDB, or CouchDB) and JSON for a unified JavaScript development stack. With the adaptation of what were essentially server-side development patterns such as MVC, MVP, MVVM, etc., Node.js allows the reuse of the same model and service interface between client-side and server-side.

Event loop
Node.js registers with the operating system so the OS notifies it of connections and issues a callback. Within the Node.js runtime, each connection is a small heap allocation. Traditionally, relatively heavyweight OS processes or threads handled each connection. Node.js uses an event loop for scalability, instead of processes or threads.[72] In contrast to other event-driven servers, Node.js's event loop does not need to be called explicitly. Instead callbacks are defined, and the server automatically enters the event loop at the end of the callback definition. Node.js exits the event loop when there are no further callbacks to be performed.

Project governance
In 2015, various branches of the greater Node.js community began working under the vendor-neutral Node.js Foundation. The stated purpose of the organization "is to enable widespread adoption and help accelerate development of Node.js and other related modules through an open governance model that encourages participation, technical contribution, and a framework for long-term stewardship by an ecosystem invested in Node.js' success."[73]

The Node.js Foundation Technical Steering Committee (TSC) is the technical governing body of the Node.js Foundation. The TSC is responsible for the core Node.js repo as well as dependent and adjacent projects. Generally the TSC delegates administration of these projects to working groups or committees.[74] The LTS group that manages long term supported releases is one such group. Other current groups include: Website, Streams, Build, Diagnostics, i18n, Evangelism, Docker, Addon API, Benchmarking, Post-mortem, Intl, Documentation, and Testing.[75]

In August, 2017, a governance breakdown precipitated efforts to repair the resulting damage and to create a path to future stability of governance.[76]

See also
	Free software portal
List of server-side JavaScript implementations
List of JavaScript libraries
MEAN (software bundle)
Online JavaScript IDE
Rhino (JavaScript engine)
Application server

Node.js
Node.js logo.svg
Original author(s)	Ryan Dahl
Developer(s)	Joyent
Initial release	May 27, 2009; 9 years ago[1]
Stable release	
10.4.0 / June 6, 2018; 6 days ago[2]
Repository	
https://github.com/nodejs/node
Edit this at Wikidata
Written in	C, C++, JavaScript
Operating system	Linux, macOS, Microsoft Windows, SmartOS, FreeBSD, IBM AIX[3]
Type	Run-time environment
License	MIT[4]
Website	nodejs.org
Node.js is an open-source, cross-platform JavaScript run-time environment that executes JavaScript code server-side. Historically, JavaScript was used primarily for client-side scripting, in which scripts written in JavaScript are embedded in a webpage's HTML and run client-side by a JavaScript engine in the user's web browser. Node.js lets developers use JavaScript for server-side scriptingâ€”running scripts server-side to produce dynamic web page content before the page is sent to the user's web browser. Consequently, Node.js represents a "JavaScript everywhere" paradigm,[5] unifying web application development around a single programming language, rather than different languages for server side and client side scripts.

Though .js is the conventional filename extension for JavaScript code, the name "Node.js" does not refer to a particular file in this context and is merely the name of the product. Node.js has an event-driven architecture capable of asynchronous I/O. These design choices aim to optimize throughput and scalability in web applications with many input/output operations, as well as for real-time Web applications (e.g., real-time communication programs and browser games).[6]

The Node.js distributed development project, governed by the Node.js Foundation,[7] is facilitated by the Linux Foundation's Collaborative Projects program.[8]

Corporate users of Node.js software include GoDaddy,[9] Groupon,[10] IBM,[11] LinkedIn,[12][13] Microsoft,[14][15] Netflix,[16] PayPal,[17][18] Rakuten, SAP, Tuenti,[19] Voxer,[20] Walmart,[21] and Yahoo!.[22]

Contents 
1	History
2	Overview
2.1	Platform architecture
2.2	Industry support
3	Releases
4	Technical details
4.1	Threading
4.2	V8
4.3	Package management
4.4	Unified API
4.5	Event loop
5	Project governance
6	See also
7	References
8	Further reading
9	External links
History

Ryan Dahl, creator of Node.js, in 2010
Node.js was originally written by Ryan Dahl in 2009,[23] about thirteen years after the introduction of the first server-side JavaScript environment, Netscape's LiveWire Pro Web.[24] The initial release supported only Linux and Mac OS X. Its development and maintenance was led by Dahl and later sponsored by Joyent.[25]

Dahl was inspired to create Node.js after seeing a file upload progress bar on Flickr. The browser did not know how much of the file had been uploaded and had to query the Web server. Dahl desired an easier way.[6][26]

Dahl criticized the limited possibilities of the most popular web server in 2009, Apache HTTP Server, to handle a lot of concurrent connections (up to 10,000 and more) and the most common way of creating code (sequential programming), when code either blocked the entire process or implied multiple execution stacks in the case of simultaneous connections.[27]

Dahl demonstrated the project at the inaugural European JSConf on November 8, 2009.[28][29][30] Node.js combined Google's V8 JavaScript engine, an event loop, and a low-level I/O API.[31]

In January 2010, a package manager was introduced for the Node.js environment called npm.[32] The package manager makes it easier for programmers to publish and share source code of Node.js libraries and is designed to simplify installation, updating, and uninstallation of libraries.[31]

In June 2011, Microsoft and Joyent implemented a native Windows version of Node.js.[33] The first Node.js build supporting Windows was released in July 2011.

In January 2012, Dahl stepped aside, promoting coworker and npm creator Isaac Schlueter to manage the project.[34] In January 2014, Schlueter announced that Timothy J. Fontaine would lead the project.[35]

In December 2014, Fedor Indutny started io.js, a fork of Node.js. Due to the internal conflict over Joyent's governance, io.js was created as an open governance alternative with a separate technical committee.[36][37] Unlike Node.js,[38] the authors planned to keep io.js up-to-date with the latest releases of the Google V8 JavaScript engine.[39]

In February 2015, the intent to form a neutral Node.js Foundation was announced. By June 2015, the Node.js and io.js communities voted to work together under the Node.js Foundation.[40]

In September 2015, Node.js v0.12 and io.js v3.3 were merged back together into Node v4.0.[41] This brought V8 ES6 features into Node.js, and a long-term support release cycle.[42] As of 2016, the io.js website recommends that developers switch back to Node.js and that no further releases of io.js are planned due to the merger.[43]

Overview
Node.js allows the creation of Web servers and networking tools using JavaScript and a collection of "modules" that handle various core functionality.[28][31][44][45][46] Modules are provided for file system I/O, networking (DNS, HTTP, TCP, TLS/SSL, or UDP), binary data (buffers), cryptography functions, data streams, and other core functions.[31][45][47] Node.js's modules use an API designed to reduce the complexity of writing server applications.[31][45]

Node.js is officially supported on Linux, macOS, Microsoft Windows, SmartOS, FreeBSD, and IBM AIX.[3] The provided source code may also be built on similar operating systems or be modified by third parties to support others such as NonStop[48] and Unix servers. Alternatively, they can be written with CoffeeScript[49] (a JavaScript alternative), Dart or TypeScript (strongly typed forms of JavaScript), or any other language that can compile to JavaScript.[49][50]

Node.js is primarily used to build network programs such as Web servers.[44] The biggest difference between Node.js and PHP is that most functions in PHP block until completion (commands execute only after previous commands finish), while Node.js functions are non-blocking (commands execute concurrently or even in parallel,[51][52] and use callbacks to signal completion or failure).[44]

Platform architecture
Node.js brings event-driven programming to web servers, enabling development of fast web servers in JavaScript.[31] Developers can create highly scalable servers without using threading, by using a simplified model of event-driven programming that uses callbacks to signal the completion of a task.[31] Node.js connects the ease of a scripting language (JavaScript) with the power of Unix network programming.[31]

Node.js was built on the Google V8 JavaScript engine since it was open-sourced under the BSD license. It is extremely fast and proficient with internet fundamentals such as HTTP, DNS, TCP.[28] Also, JavaScript was a well-known language, making Node.js immediately accessible to the entire web development community.[28]

Industry support
There are thousands of open-source libraries for Node.js, most of them hosted on the npm website. The Node.js developer community has two main mailing lists and the IRC channel #node.js on freenode. There are multiple developer conferences and events that support the Node.js community including NodeConf, Node Interactive and Node Summit as well as a number of regional events.

The open-source community has developed web frameworks to accelerate the development of applications. Such frameworks include Connect, Express.js, Socket.IO, Koa.js, Hapi.js, Sails.js, Meteor, Derby, and many others.[31][53] Various packages have also been created for interfacing with other languages or runtime environments such as Microsoft .NET.[54]

Modern desktop IDEs provide editing and debugging features specifically for Node.js applications. Such IDEs include Atom, Brackets, JetBrains WebStorm,[55][56] Microsoft Visual Studio (with Node.js Tools for Visual Studio,[57] or TypeScript with Node definitions,[58][59][60][61]) NetBeans,[62] Nodeclipse Enide Studio [63] (Eclipse-based), and Visual Studio Code.[64][65] Certain online web-based IDEs also support Node.js, such as Codeanywhere, Codenvy, Cloud9 IDE, Koding, and the visual flow editor in Node-RED.

Releases
Release	Code name	Release date	LTS status	Active LTS start	Maintenance start	Maintenance end
v0.10.x		2013-03-11	End-of-life	-	2015-10-01	2016-10-31
v0.12.x		2015-02-06	End-of-life	-	2016-04-01	2016-12-31
4.x	Argon[66]	2015-09-08	End-of-life	2015-10-01	2017-04-01	2018-04-30
5.x		2015-10-29	No LTS	N/A	2016-06-30
6.x	Boron[66]	2016-04-26	Maintenance	2016-10-18	2018-04-30	April 2019
7.x		2016-10-25	No LTS	N/A	2017-06-30
8.x	Carbon[66]	2017-05-30	Active	2017-10-31	April 2019	December 2019
9.x		2017-10-01	No LTS	N/A	June 2018
10.x	Dubnium[66]	2018-04-24	Active	October 2018	April 2020	April 2021
11.x[66]		2018-10-23	No LTS	N/A	June 2019
New major releases of Node.js are cut from the GitHub master branch every six months. Even-numbered versions are cut in April and odd-numbered versions are cut in October. When a new odd version is released, the previous even version undergoes transition to Long Term Support (LTS), which gives that version 18 months of active support from the date it is designated LTS. After these 18 months expire, an LTS release receives an additional 12 months of maintenance support. An active version receives non-breaking backports of changes a few weeks after they land in the current release. A maintenance release only receives critical fixes and documentation updates.[66] The LTS Working Group manages strategy and policy in collaboration with the Technical Steering Committee of the Node.js Foundation.

Technical details

This section may be too technical for most readers to understand. Please help improve it to make it understandable to non-experts, without removing the technical details. (August 2015) (Learn how and when to remove this template message)
Node.js is a Javascript runtime environment that processes incoming requests in a loop, called the event loop.

Threading
Node.js operates on a single thread, using non-blocking I/O calls, allowing it to support tens of thousands of concurrent connections without incurring the cost of thread context switching.[67] The design of sharing a single thread among all the requests that use the observer pattern is intended for building highly concurrent applications, where any function performing I/O must use a callback. To accommodate the single-threaded event loop, Node.js uses the libuv libraryâ€”which, in turn, uses a fixed-sized thread pool that handles some of the non-blocking asynchronous I/O operations.[6]

A downside of this single-threaded approach is that Node.js doesn't allow vertical scaling by increasing the number of CPU cores of the machine it is running on without using an additional module, such as cluster,[51] StrongLoop Process Manager,[68] or pm2.[69] However, developers can increase the default number of threads in the libuv thread pool. The server operating system (OS) is likely to distribute these threads across multiple cores.[70]

A thread pool handles execution of parallel tasks in Node.js. The main thread call functions post tasks to the shared task queue, which threads in the thread pool pull and execute. Inherently non-blocking system functions such as networking translate to kernel-side non-blocking sockets, while inherently blocking system functions such as file I/O run in a blocking way on their own threads. When a thread in the thread pool completes a task, it informs the main thread of this, which in turn, wakes up and executes the registered callback. Since Node.js handles callbacks in serial on the main thread, long lasting computations and other CPU-bound tasks freeze the entire event-loop until completion.[citation needed]

V8
V8 is the JavaScript execution engine built for Google Chrome and open-sourced by Google in 2008. Written in C++, V8 compiles JavaScript source code to native machine code instead of interpreting it in real time.[6]

Node.js uses libuv to handle asynchronous events. Libuv is an abstraction layer for network and file system functionality on both Windows and POSIX-based systems such as Linux, macOS, OSS on NonStop, and Unix.

The core functionality of Node.js resides in a JavaScript library. The Node.js bindings, written in C++, connect these technologies to each other and to the operating system.

Package management
npm is the pre-installed package manager for the Node.js server platform. It installs Node.js programs from the npm registry, organizing the installation and management of third-party Node.js programs. Packages in the npm registry can range from simple helper libraries such as Lodash to task runners such as Grunt.

Unified API
Node.js can be combined with a browser, a database that supports JSON data (such as Postgres,[71] MongoDB, or CouchDB) and JSON for a unified JavaScript development stack. With the adaptation of what were essentially server-side development patterns such as MVC, MVP, MVVM, etc., Node.js allows the reuse of the same model and service interface between client-side and server-side.

Event loop
Node.js registers with the operating system so the OS notifies it of connections and issues a callback. Within the Node.js runtime, each connection is a small heap allocation. Traditionally, relatively heavyweight OS processes or threads handled each connection. Node.js uses an event loop for scalability, instead of processes or threads.[72] In contrast to other event-driven servers, Node.js's event loop does not need to be called explicitly. Instead callbacks are defined, and the server automatically enters the event loop at the end of the callback definition. Node.js exits the event loop when there are no further callbacks to be performed.

Project governance
In 2015, various branches of the greater Node.js community began working under the vendor-neutral Node.js Foundation. The stated purpose of the organization "is to enable widespread adoption and help accelerate development of Node.js and other related modules through an open governance model that encourages participation, technical contribution, and a framework for long-term stewardship by an ecosystem invested in Node.js' success."[73]

The Node.js Foundation Technical Steering Committee (TSC) is the technical governing body of the Node.js Foundation. The TSC is responsible for the core Node.js repo as well as dependent and adjacent projects. Generally the TSC delegates administration of these projects to working groups or committees.[74] The LTS group that manages long term supported releases is one such group. Other current groups include: Website, Streams, Build, Diagnostics, i18n, Evangelism, Docker, Addon API, Benchmarking, Post-mortem, Intl, Documentation, and Testing.[75]

In August, 2017, a governance breakdown precipitated efforts to repair the resulting damage and to create a path to future stability of governance.[76]

See also
	Free software portal
List of server-side JavaScript implementations
List of JavaScript libraries
MEAN (software bundle)
Online JavaScript IDE
Rhino (JavaScript engine)
Application server

Node.js
Node.js logo.svg
Original author(s)	Ryan Dahl
Developer(s)	Joyent
Initial release	May 27, 2009; 9 years ago[1]
Stable release	
10.4.0 / June 6, 2018; 6 days ago[2]
Repository	
https://github.com/nodejs/node
Edit this at Wikidata
Written in	C, C++, JavaScript
Operating system	Linux, macOS, Microsoft Windows, SmartOS, FreeBSD, IBM AIX[3]
Type	Run-time environment
License	MIT[4]
Website	nodejs.org
Node.js is an open-source, cross-platform JavaScript run-time environment that executes JavaScript code server-side. Historically, JavaScript was used primarily for client-side scripting, in which scripts written in JavaScript are embedded in a webpage's HTML and run client-side by a JavaScript engine in the user's web browser. Node.js lets developers use JavaScript for server-side scriptingâ€”running scripts server-side to produce dynamic web page content before the page is sent to the user's web browser. Consequently, Node.js represents a "JavaScript everywhere" paradigm,[5] unifying web application development around a single programming language, rather than different languages for server side and client side scripts.

Though .js is the conventional filename extension for JavaScript code, the name "Node.js" does not refer to a particular file in this context and is merely the name of the product. Node.js has an event-driven architecture capable of asynchronous I/O. These design choices aim to optimize throughput and scalability in web applications with many input/output operations, as well as for real-time Web applications (e.g., real-time communication programs and browser games).[6]

The Node.js distributed development project, governed by the Node.js Foundation,[7] is facilitated by the Linux Foundation's Collaborative Projects program.[8]

Corporate users of Node.js software include GoDaddy,[9] Groupon,[10] IBM,[11] LinkedIn,[12][13] Microsoft,[14][15] Netflix,[16] PayPal,[17][18] Rakuten, SAP, Tuenti,[19] Voxer,[20] Walmart,[21] and Yahoo!.[22]

Contents 
1	History
2	Overview
2.1	Platform architecture
2.2	Industry support
3	Releases
4	Technical details
4.1	Threading
4.2	V8
4.3	Package management
4.4	Unified API
4.5	Event loop
5	Project governance
6	See also
7	References
8	Further reading
9	External links
History

Ryan Dahl, creator of Node.js, in 2010
Node.js was originally written by Ryan Dahl in 2009,[23] about thirteen years after the introduction of the first server-side JavaScript environment, Netscape's LiveWire Pro Web.[24] The initial release supported only Linux and Mac OS X. Its development and maintenance was led by Dahl and later sponsored by Joyent.[25]

Dahl was inspired to create Node.js after seeing a file upload progress bar on Flickr. The browser did not know how much of the file had been uploaded and had to query the Web server. Dahl desired an easier way.[6][26]

Dahl criticized the limited possibilities of the most popular web server in 2009, Apache HTTP Server, to handle a lot of concurrent connections (up to 10,000 and more) and the most common way of creating code (sequential programming), when code either blocked the entire process or implied multiple execution stacks in the case of simultaneous connections.[27]

Dahl demonstrated the project at the inaugural European JSConf on November 8, 2009.[28][29][30] Node.js combined Google's V8 JavaScript engine, an event loop, and a low-level I/O API.[31]

In January 2010, a package manager was introduced for the Node.js environment called npm.[32] The package manager makes it easier for programmers to publish and share source code of Node.js libraries and is designed to simplify installation, updating, and uninstallation of libraries.[31]

In June 2011, Microsoft and Joyent implemented a native Windows version of Node.js.[33] The first Node.js build supporting Windows was released in July 2011.

In January 2012, Dahl stepped aside, promoting coworker and npm creator Isaac Schlueter to manage the project.[34] In January 2014, Schlueter announced that Timothy J. Fontaine would lead the project.[35]

In December 2014, Fedor Indutny started io.js, a fork of Node.js. Due to the internal conflict over Joyent's governance, io.js was created as an open governance alternative with a separate technical committee.[36][37] Unlike Node.js,[38] the authors planned to keep io.js up-to-date with the latest releases of the Google V8 JavaScript engine.[39]

In February 2015, the intent to form a neutral Node.js Foundation was announced. By June 2015, the Node.js and io.js communities voted to work together under the Node.js Foundation.[40]

In September 2015, Node.js v0.12 and io.js v3.3 were merged back together into Node v4.0.[41] This brought V8 ES6 features into Node.js, and a long-term support release cycle.[42] As of 2016, the io.js website recommends that developers switch back to Node.js and that no further releases of io.js are planned due to the merger.[43]

Overview
Node.js allows the creation of Web servers and networking tools using JavaScript and a collection of "modules" that handle various core functionality.[28][31][44][45][46] Modules are provided for file system I/O, networking (DNS, HTTP, TCP, TLS/SSL, or UDP), binary data (buffers), cryptography functions, data streams, and other core functions.[31][45][47] Node.js's modules use an API designed to reduce the complexity of writing server applications.[31][45]

Node.js is officially supported on Linux, macOS, Microsoft Windows, SmartOS, FreeBSD, and IBM AIX.[3] The provided source code may also be built on similar operating systems or be modified by third parties to support others such as NonStop[48] and Unix servers. Alternatively, they can be written with CoffeeScript[49] (a JavaScript alternative), Dart or TypeScript (strongly typed forms of JavaScript), or any other language that can compile to JavaScript.[49][50]

Node.js is primarily used to build network programs such as Web servers.[44] The biggest difference between Node.js and PHP is that most functions in PHP block until completion (commands execute only after previous commands finish), while Node.js functions are non-blocking (commands execute concurrently or even in parallel,[51][52] and use callbacks to signal completion or failure).[44]

Platform architecture
Node.js brings event-driven programming to web servers, enabling development of fast web servers in JavaScript.[31] Developers can create highly scalable servers without using threading, by using a simplified model of event-driven programming that uses callbacks to signal the completion of a task.[31] Node.js connects the ease of a scripting language (JavaScript) with the power of Unix network programming.[31]

Node.js was built on the Google V8 JavaScript engine since it was open-sourced under the BSD license. It is extremely fast and proficient with internet fundamentals such as HTTP, DNS, TCP.[28] Also, JavaScript was a well-known language, making Node.js immediately accessible to the entire web development community.[28]

Industry support
There are thousands of open-source libraries for Node.js, most of them hosted on the npm website. The Node.js developer community has two main mailing lists and the IRC channel #node.js on freenode. There are multiple developer conferences and events that support the Node.js community including NodeConf, Node Interactive and Node Summit as well as a number of regional events.

The open-source community has developed web frameworks to accelerate the development of applications. Such frameworks include Connect, Express.js, Socket.IO, Koa.js, Hapi.js, Sails.js, Meteor, Derby, and many others.[31][53] Various packages have also been created for interfacing with other languages or runtime environments such as Microsoft .NET.[54]

Modern desktop IDEs provide editing and debugging features specifically for Node.js applications. Such IDEs include Atom, Brackets, JetBrains WebStorm,[55][56] Microsoft Visual Studio (with Node.js Tools for Visual Studio,[57] or TypeScript with Node definitions,[58][59][60][61]) NetBeans,[62] Nodeclipse Enide Studio [63] (Eclipse-based), and Visual Studio Code.[64][65] Certain online web-based IDEs also support Node.js, such as Codeanywhere, Codenvy, Cloud9 IDE, Koding, and the visual flow editor in Node-RED.

Releases
Release	Code name	Release date	LTS status	Active LTS start	Maintenance start	Maintenance end
v0.10.x		2013-03-11	End-of-life	-	2015-10-01	2016-10-31
v0.12.x		2015-02-06	End-of-life	-	2016-04-01	2016-12-31
4.x	Argon[66]	2015-09-08	End-of-life	2015-10-01	2017-04-01	2018-04-30
5.x		2015-10-29	No LTS	N/A	2016-06-30
6.x	Boron[66]	2016-04-26	Maintenance	2016-10-18	2018-04-30	April 2019
7.x		2016-10-25	No LTS	N/A	2017-06-30
8.x	Carbon[66]	2017-05-30	Active	2017-10-31	April 2019	December 2019
9.x		2017-10-01	No LTS	N/A	June 2018
10.x	Dubnium[66]	2018-04-24	Active	October 2018	April 2020	April 2021
11.x[66]		2018-10-23	No LTS	N/A	June 2019
New major releases of Node.js are cut from the GitHub master branch every six months. Even-numbered versions are cut in April and odd-numbered versions are cut in October. When a new odd version is released, the previous even version undergoes transition to Long Term Support (LTS), which gives that version 18 months of active support from the date it is designated LTS. After these 18 months expire, an LTS release receives an additional 12 months of maintenance support. An active version receives non-breaking backports of changes a few weeks after they land in the current release. A maintenance release only receives critical fixes and documentation updates.[66] The LTS Working Group manages strategy and policy in collaboration with the Technical Steering Committee of the Node.js Foundation.

Technical details

This section may be too technical for most readers to understand. Please help improve it to make it understandable to non-experts, without removing the technical details. (August 2015) (Learn how and when to remove this template message)
Node.js is a Javascript runtime environment that processes incoming requests in a loop, called the event loop.

Threading
Node.js operates on a single thread, using non-blocking I/O calls, allowing it to support tens of thousands of concurrent connections without incurring the cost of thread context switching.[67] The design of sharing a single thread among all the requests that use the observer pattern is intended for building highly concurrent applications, where any function performing I/O must use a callback. To accommodate the single-threaded event loop, Node.js uses the libuv libraryâ€”which, in turn, uses a fixed-sized thread pool that handles some of the non-blocking asynchronous I/O operations.[6]

A downside of this single-threaded approach is that Node.js doesn't allow vertical scaling by increasing the number of CPU cores of the machine it is running on without using an additional module, such as cluster,[51] StrongLoop Process Manager,[68] or pm2.[69] However, developers can increase the default number of threads in the libuv thread pool. The server operating system (OS) is likely to distribute these threads across multiple cores.[70]

A thread pool handles execution of parallel tasks in Node.js. The main thread call functions post tasks to the shared task queue, which threads in the thread pool pull and execute. Inherently non-blocking system functions such as networking translate to kernel-side non-blocking sockets, while inherently blocking system functions such as file I/O run in a blocking way on their own threads. When a thread in the thread pool completes a task, it informs the main thread of this, which in turn, wakes up and executes the registered callback. Since Node.js handles callbacks in serial on the main thread, long lasting computations and other CPU-bound tasks freeze the entire event-loop until completion.[citation needed]

V8
V8 is the JavaScript execution engine built for Google Chrome and open-sourced by Google in 2008. Written in C++, V8 compiles JavaScript source code to native machine code instead of interpreting it in real time.[6]

Node.js uses libuv to handle asynchronous events. Libuv is an abstraction layer for network and file system functionality on both Windows and POSIX-based systems such as Linux, macOS, OSS on NonStop, and Unix.

The core functionality of Node.js resides in a JavaScript library. The Node.js bindings, written in C++, connect these technologies to each other and to the operating system.

Package management
npm is the pre-installed package manager for the Node.js server platform. It installs Node.js programs from the npm registry, organizing the installation and management of third-party Node.js programs. Packages in the npm registry can range from simple helper libraries such as Lodash to task runners such as Grunt.

Unified API
Node.js can be combined with a browser, a database that supports JSON data (such as Postgres,[71] MongoDB, or CouchDB) and JSON for a unified JavaScript development stack. With the adaptation of what were essentially server-side development patterns such as MVC, MVP, MVVM, etc., Node.js allows the reuse of the same model and service interface between client-side and server-side.

Event loop
Node.js registers with the operating system so the OS notifies it of connections and issues a callback. Within the Node.js runtime, each connection is a small heap allocation. Traditionally, relatively heavyweight OS processes or threads handled each connection. Node.js uses an event loop for scalability, instead of processes or threads.[72] In contrast to other event-driven servers, Node.js's event loop does not need to be called explicitly. Instead callbacks are defined, and the server automatically enters the event loop at the end of the callback definition. Node.js exits the event loop when there are no further callbacks to be performed.

Project governance
In 2015, various branches of the greater Node.js community began working under the vendor-neutral Node.js Foundation. The stated purpose of the organization "is to enable widespread adoption and help accelerate development of Node.js and other related modules through an open governance model that encourages participation, technical contribution, and a framework for long-term stewardship by an ecosystem invested in Node.js' success."[73]

The Node.js Foundation Technical Steering Committee (TSC) is the technical governing body of the Node.js Foundation. The TSC is responsible for the core Node.js repo as well as dependent and adjacent projects. Generally the TSC delegates administration of these projects to working groups or committees.[74] The LTS group that manages long term supported releases is one such group. Other current groups include: Website, Streams, Build, Diagnostics, i18n, Evangelism, Docker, Addon API, Benchmarking, Post-mortem, Intl, Documentation, and Testing.[75]

In August, 2017, a governance breakdown precipitated efforts to repair the resulting damage and to create a path to future stability of governance.[76]

See also
	Free software portal
List of server-side JavaScript implementations
List of JavaScript libraries
MEAN (software bundle)
Online JavaScript IDE
Rhino (JavaScript engine)
Application server

Node.js
Node.js logo.svg
Original author(s)	Ryan Dahl
Developer(s)	Joyent
Initial release	May 27, 2009; 9 years ago[1]
Stable release	
10.4.0 / June 6, 2018; 6 days ago[2]
Repository	
https://github.com/nodejs/node
Edit this at Wikidata
Written in	C, C++, JavaScript
Operating system	Linux, macOS, Microsoft Windows, SmartOS, FreeBSD, IBM AIX[3]
Type	Run-time environment
License	MIT[4]
Website	nodejs.org
Node.js is an open-source, cross-platform JavaScript run-time environment that executes JavaScript code server-side. Historically, JavaScript was used primarily for client-side scripting, in which scripts written in JavaScript are embedded in a webpage's HTML and run client-side by a JavaScript engine in the user's web browser. Node.js lets developers use JavaScript for server-side scriptingâ€”running scripts server-side to produce dynamic web page content before the page is sent to the user's web browser. Consequently, Node.js represents a "JavaScript everywhere" paradigm,[5] unifying web application development around a single programming language, rather than different languages for server side and client side scripts.

Though .js is the conventional filename extension for JavaScript code, the name "Node.js" does not refer to a particular file in this context and is merely the name of the product. Node.js has an event-driven architecture capable of asynchronous I/O. These design choices aim to optimize throughput and scalability in web applications with many input/output operations, as well as for real-time Web applications (e.g., real-time communication programs and browser games).[6]

The Node.js distributed development project, governed by the Node.js Foundation,[7] is facilitated by the Linux Foundation's Collaborative Projects program.[8]

Corporate users of Node.js software include GoDaddy,[9] Groupon,[10] IBM,[11] LinkedIn,[12][13] Microsoft,[14][15] Netflix,[16] PayPal,[17][18] Rakuten, SAP, Tuenti,[19] Voxer,[20] Walmart,[21] and Yahoo!.[22]

Contents 
1	History
2	Overview
2.1	Platform architecture
2.2	Industry support
3	Releases
4	Technical details
4.1	Threading
4.2	V8
4.3	Package management
4.4	Unified API
4.5	Event loop
5	Project governance
6	See also
7	References
8	Further reading
9	External links
History

Ryan Dahl, creator of Node.js, in 2010
Node.js was originally written by Ryan Dahl in 2009,[23] about thirteen years after the introduction of the first server-side JavaScript environment, Netscape's LiveWire Pro Web.[24] The initial release supported only Linux and Mac OS X. Its development and maintenance was led by Dahl and later sponsored by Joyent.[25]

Dahl was inspired to create Node.js after seeing a file upload progress bar on Flickr. The browser did not know how much of the file had been uploaded and had to query the Web server. Dahl desired an easier way.[6][26]

Dahl criticized the limited possibilities of the most popular web server in 2009, Apache HTTP Server, to handle a lot of concurrent connections (up to 10,000 and more) and the most common way of creating code (sequential programming), when code either blocked the entire process or implied multiple execution stacks in the case of simultaneous connections.[27]

Dahl demonstrated the project at the inaugural European JSConf on November 8, 2009.[28][29][30] Node.js combined Google's V8 JavaScript engine, an event loop, and a low-level I/O API.[31]

In January 2010, a package manager was introduced for the Node.js environment called npm.[32] The package manager makes it easier for programmers to publish and share source code of Node.js libraries and is designed to simplify installation, updating, and uninstallation of libraries.[31]

In June 2011, Microsoft and Joyent implemented a native Windows version of Node.js.[33] The first Node.js build supporting Windows was released in July 2011.

In January 2012, Dahl stepped aside, promoting coworker and npm creator Isaac Schlueter to manage the project.[34] In January 2014, Schlueter announced that Timothy J. Fontaine would lead the project.[35]

In December 2014, Fedor Indutny started io.js, a fork of Node.js. Due to the internal conflict over Joyent's governance, io.js was created as an open governance alternative with a separate technical committee.[36][37] Unlike Node.js,[38] the authors planned to keep io.js up-to-date with the latest releases of the Google V8 JavaScript engine.[39]

In February 2015, the intent to form a neutral Node.js Foundation was announced. By June 2015, the Node.js and io.js communities voted to work together under the Node.js Foundation.[40]

In September 2015, Node.js v0.12 and io.js v3.3 were merged back together into Node v4.0.[41] This brought V8 ES6 features into Node.js, and a long-term support release cycle.[42] As of 2016, the io.js website recommends that developers switch back to Node.js and that no further releases of io.js are planned due to the merger.[43]

Overview
Node.js allows the creation of Web servers and networking tools using JavaScript and a collection of "modules" that handle various core functionality.[28][31][44][45][46] Modules are provided for file system I/O, networking (DNS, HTTP, TCP, TLS/SSL, or UDP), binary data (buffers), cryptography functions, data streams, and other core functions.[31][45][47] Node.js's modules use an API designed to reduce the complexity of writing server applications.[31][45]

Node.js is officially supported on Linux, macOS, Microsoft Windows, SmartOS, FreeBSD, and IBM AIX.[3] The provided source code may also be built on similar operating systems or be modified by third parties to support others such as NonStop[48] and Unix servers. Alternatively, they can be written with CoffeeScript[49] (a JavaScript alternative), Dart or TypeScript (strongly typed forms of JavaScript), or any other language that can compile to JavaScript.[49][50]

Node.js is primarily used to build network programs such as Web servers.[44] The biggest difference between Node.js and PHP is that most functions in PHP block until completion (commands execute only after previous commands finish), while Node.js functions are non-blocking (commands execute concurrently or even in parallel,[51][52] and use callbacks to signal completion or failure).[44]

Platform architecture
Node.js brings event-driven programming to web servers, enabling development of fast web servers in JavaScript.[31] Developers can create highly scalable servers without using threading, by using a simplified model of event-driven programming that uses callbacks to signal the completion of a task.[31] Node.js connects the ease of a scripting language (JavaScript) with the power of Unix network programming.[31]

Node.js was built on the Google V8 JavaScript engine since it was open-sourced under the BSD license. It is extremely fast and proficient with internet fundamentals such as HTTP, DNS, TCP.[28] Also, JavaScript was a well-known language, making Node.js immediately accessible to the entire web development community.[28]

Industry support
There are thousands of open-source libraries for Node.js, most of them hosted on the npm website. The Node.js developer community has two main mailing lists and the IRC channel #node.js on freenode. There are multiple developer conferences and events that support the Node.js community including NodeConf, Node Interactive and Node Summit as well as a number of regional events.

The open-source community has developed web frameworks to accelerate the development of applications. Such frameworks include Connect, Express.js, Socket.IO, Koa.js, Hapi.js, Sails.js, Meteor, Derby, and many others.[31][53] Various packages have also been created for interfacing with other languages or runtime environments such as Microsoft .NET.[54]

Modern desktop IDEs provide editing and debugging features specifically for Node.js applications. Such IDEs include Atom, Brackets, JetBrains WebStorm,[55][56] Microsoft Visual Studio (with Node.js Tools for Visual Studio,[57] or TypeScript with Node definitions,[58][59][60][61]) NetBeans,[62] Nodeclipse Enide Studio [63] (Eclipse-based), and Visual Studio Code.[64][65] Certain online web-based IDEs also support Node.js, such as Codeanywhere, Codenvy, Cloud9 IDE, Koding, and the visual flow editor in Node-RED.

Releases
Release	Code name	Release date	LTS status	Active LTS start	Maintenance start	Maintenance end
v0.10.x		2013-03-11	End-of-life	-	2015-10-01	2016-10-31
v0.12.x		2015-02-06	End-of-life	-	2016-04-01	2016-12-31
4.x	Argon[66]	2015-09-08	End-of-life	2015-10-01	2017-04-01	2018-04-30
5.x		2015-10-29	No LTS	N/A	2016-06-30
6.x	Boron[66]	2016-04-26	Maintenance	2016-10-18	2018-04-30	April 2019
7.x		2016-10-25	No LTS	N/A	2017-06-30
8.x	Carbon[66]	2017-05-30	Active	2017-10-31	April 2019	December 2019
9.x		2017-10-01	No LTS	N/A	June 2018
10.x	Dubnium[66]	2018-04-24	Active	October 2018	April 2020	April 2021
11.x[66]		2018-10-23	No LTS	N/A	June 2019
New major releases of Node.js are cut from the GitHub master branch every six months. Even-numbered versions are cut in April and odd-numbered versions are cut in October. When a new odd version is released, the previous even version undergoes transition to Long Term Support (LTS), which gives that version 18 months of active support from the date it is designated LTS. After these 18 months expire, an LTS release receives an additional 12 months of maintenance support. An active version receives non-breaking backports of changes a few weeks after they land in the current release. A maintenance release only receives critical fixes and documentation updates.[66] The LTS Working Group manages strategy and policy in collaboration with the Technical Steering Committee of the Node.js Foundation.

Technical details

This section may be too technical for most readers to understand. Please help improve it to make it understandable to non-experts, without removing the technical details. (August 2015) (Learn how and when to remove this template message)
Node.js is a Javascript runtime environment that processes incoming requests in a loop, called the event loop.

Threading
Node.js operates on a single thread, using non-blocking I/O calls, allowing it to support tens of thousands of concurrent connections without incurring the cost of thread context switching.[67] The design of sharing a single thread among all the requests that use the observer pattern is intended for building highly concurrent applications, where any function performing I/O must use a callback. To accommodate the single-threaded event loop, Node.js uses the libuv libraryâ€”which, in turn, uses a fixed-sized thread pool that handles some of the non-blocking asynchronous I/O operations.[6]

A downside of this single-threaded approach is that Node.js doesn't allow vertical scaling by increasing the number of CPU cores of the machine it is running on without using an additional module, such as cluster,[51] StrongLoop Process Manager,[68] or pm2.[69] However, developers can increase the default number of threads in the libuv thread pool. The server operating system (OS) is likely to distribute these threads across multiple cores.[70]

A thread pool handles execution of parallel tasks in Node.js. The main thread call functions post tasks to the shared task queue, which threads in the thread pool pull and execute. Inherently non-blocking system functions such as networking translate to kernel-side non-blocking sockets, while inherently blocking system functions such as file I/O run in a blocking way on their own threads. When a thread in the thread pool completes a task, it informs the main thread of this, which in turn, wakes up and executes the registered callback. Since Node.js handles callbacks in serial on the main thread, long lasting computations and other CPU-bound tasks freeze the entire event-loop until completion.[citation needed]

V8
V8 is the JavaScript execution engine built for Google Chrome and open-sourced by Google in 2008. Written in C++, V8 compiles JavaScript source code to native machine code instead of interpreting it in real time.[6]

Node.js uses libuv to handle asynchronous events. Libuv is an abstraction layer for network and file system functionality on both Windows and POSIX-based systems such as Linux, macOS, OSS on NonStop, and Unix.

The core functionality of Node.js resides in a JavaScript library. The Node.js bindings, written in C++, connect these technologies to each other and to the operating system.

Package management
npm is the pre-installed package manager for the Node.js server platform. It installs Node.js programs from the npm registry, organizing the installation and management of third-party Node.js programs. Packages in the npm registry can range from simple helper libraries such as Lodash to task runners such as Grunt.

Unified API
Node.js can be combined with a browser, a database that supports JSON data (such as Postgres,[71] MongoDB, or CouchDB) and JSON for a unified JavaScript development stack. With the adaptation of what were essentially server-side development patterns such as MVC, MVP, MVVM, etc., Node.js allows the reuse of the same model and service interface between client-side and server-side.

Event loop
Node.js registers with the operating system so the OS notifies it of connections and issues a callback. Within the Node.js runtime, each connection is a small heap allocation. Traditionally, relatively heavyweight OS processes or threads handled each connection. Node.js uses an event loop for scalability, instead of processes or threads.[72] In contrast to other event-driven servers, Node.js's event loop does not need to be called explicitly. Instead callbacks are defined, and the server automatically enters the event loop at the end of the callback definition. Node.js exits the event loop when there are no further callbacks to be performed.

Project governance
In 2015, various branches of the greater Node.js community began working under the vendor-neutral Node.js Foundation. The stated purpose of the organization "is to enable widespread adoption and help accelerate development of Node.js and other related modules through an open governance model that encourages participation, technical contribution, and a framework for long-term stewardship by an ecosystem invested in Node.js' success."[73]

The Node.js Foundation Technical Steering Committee (TSC) is the technical governing body of the Node.js Foundation. The TSC is responsible for the core Node.js repo as well as dependent and adjacent projects. Generally the TSC delegates administration of these projects to working groups or committees.[74] The LTS group that manages long term supported releases is one such group. Other current groups include: Website, Streams, Build, Diagnostics, i18n, Evangelism, Docker, Addon API, Benchmarking, Post-mortem, Intl, Documentation, and Testing.[75]

In August, 2017, a governance breakdown precipitated efforts to repair the resulting damage and to create a path to future stability of governance.[76]

See also
	Free software portal
List of server-side JavaScript implementations
List of JavaScript libraries
MEAN (software bundle)
Online JavaScript IDE
Rhino (JavaScript engine)
Application server

Node.js
Node.js logo.svg
Original author(s)	Ryan Dahl
Developer(s)	Joyent
Initial release	May 27, 2009; 9 years ago[1]
Stable release	
10.4.0 / June 6, 2018; 6 days ago[2]
Repository	
https://github.com/nodejs/node
Edit this at Wikidata
Written in	C, C++, JavaScript
Operating system	Linux, macOS, Microsoft Windows, SmartOS, FreeBSD, IBM AIX[3]
Type	Run-time environment
License	MIT[4]
Website	nodejs.org
Node.js is an open-source, cross-platform JavaScript run-time environment that executes JavaScript code server-side. Historically, JavaScript was used primarily for client-side scripting, in which scripts written in JavaScript are embedded in a webpage's HTML and run client-side by a JavaScript engine in the user's web browser. Node.js lets developers use JavaScript for server-side scriptingâ€”running scripts server-side to produce dynamic web page content before the page is sent to the user's web browser. Consequently, Node.js represents a "JavaScript everywhere" paradigm,[5] unifying web application development around a single programming language, rather than different languages for server side and client side scripts.

Though .js is the conventional filename extension for JavaScript code, the name "Node.js" does not refer to a particular file in this context and is merely the name of the product. Node.js has an event-driven architecture capable of asynchronous I/O. These design choices aim to optimize throughput and scalability in web applications with many input/output operations, as well as for real-time Web applications (e.g., real-time communication programs and browser games).[6]

The Node.js distributed development project, governed by the Node.js Foundation,[7] is facilitated by the Linux Foundation's Collaborative Projects program.[8]

Corporate users of Node.js software include GoDaddy,[9] Groupon,[10] IBM,[11] LinkedIn,[12][13] Microsoft,[14][15] Netflix,[16] PayPal,[17][18] Rakuten, SAP, Tuenti,[19] Voxer,[20] Walmart,[21] and Yahoo!.[22]

Contents 
1	History
2	Overview
2.1	Platform architecture
2.2	Industry support
3	Releases
4	Technical details
4.1	Threading
4.2	V8
4.3	Package management
4.4	Unified API
4.5	Event loop
5	Project governance
6	See also
7	References
8	Further reading
9	External links
History

Ryan Dahl, creator of Node.js, in 2010
Node.js was originally written by Ryan Dahl in 2009,[23] about thirteen years after the introduction of the first server-side JavaScript environment, Netscape's LiveWire Pro Web.[24] The initial release supported only Linux and Mac OS X. Its development and maintenance was led by Dahl and later sponsored by Joyent.[25]

Dahl was inspired to create Node.js after seeing a file upload progress bar on Flickr. The browser did not know how much of the file had been uploaded and had to query the Web server. Dahl desired an easier way.[6][26]

Dahl criticized the limited possibilities of the most popular web server in 2009, Apache HTTP Server, to handle a lot of concurrent connections (up to 10,000 and more) and the most common way of creating code (sequential programming), when code either blocked the entire process or implied multiple execution stacks in the case of simultaneous connections.[27]

Dahl demonstrated the project at the inaugural European JSConf on November 8, 2009.[28][29][30] Node.js combined Google's V8 JavaScript engine, an event loop, and a low-level I/O API.[31]

In January 2010, a package manager was introduced for the Node.js environment called npm.[32] The package manager makes it easier for programmers to publish and share source code of Node.js libraries and is designed to simplify installation, updating, and uninstallation of libraries.[31]

In June 2011, Microsoft and Joyent implemented a native Windows version of Node.js.[33] The first Node.js build supporting Windows was released in July 2011.

In January 2012, Dahl stepped aside, promoting coworker and npm creator Isaac Schlueter to manage the project.[34] In January 2014, Schlueter announced that Timothy J. Fontaine would lead the project.[35]

In December 2014, Fedor Indutny started io.js, a fork of Node.js. Due to the internal conflict over Joyent's governance, io.js was created as an open governance alternative with a separate technical committee.[36][37] Unlike Node.js,[38] the authors planned to keep io.js up-to-date with the latest releases of the Google V8 JavaScript engine.[39]

In February 2015, the intent to form a neutral Node.js Foundation was announced. By June 2015, the Node.js and io.js communities voted to work together under the Node.js Foundation.[40]

In September 2015, Node.js v0.12 and io.js v3.3 were merged back together into Node v4.0.[41] This brought V8 ES6 features into Node.js, and a long-term support release cycle.[42] As of 2016, the io.js website recommends that developers switch back to Node.js and that no further releases of io.js are planned due to the merger.[43]

Overview
Node.js allows the creation of Web servers and networking tools using JavaScript and a collection of "modules" that handle various core functionality.[28][31][44][45][46] Modules are provided for file system I/O, networking (DNS, HTTP, TCP, TLS/SSL, or UDP), binary data (buffers), cryptography functions, data streams, and other core functions.[31][45][47] Node.js's modules use an API designed to reduce the complexity of writing server applications.[31][45]

Node.js is officially supported on Linux, macOS, Microsoft Windows, SmartOS, FreeBSD, and IBM AIX.[3] The provided source code may also be built on similar operating systems or be modified by third parties to support others such as NonStop[48] and Unix servers. Alternatively, they can be written with CoffeeScript[49] (a JavaScript alternative), Dart or TypeScript (strongly typed forms of JavaScript), or any other language that can compile to JavaScript.[49][50]

Node.js is primarily used to build network programs such as Web servers.[44] The biggest difference between Node.js and PHP is that most functions in PHP block until completion (commands execute only after previous commands finish), while Node.js functions are non-blocking (commands execute concurrently or even in parallel,[51][52] and use callbacks to signal completion or failure).[44]

Platform architecture
Node.js brings event-driven programming to web servers, enabling development of fast web servers in JavaScript.[31] Developers can create highly scalable servers without using threading, by using a simplified model of event-driven programming that uses callbacks to signal the completion of a task.[31] Node.js connects the ease of a scripting language (JavaScript) with the power of Unix network programming.[31]

Node.js was built on the Google V8 JavaScript engine since it was open-sourced under the BSD license. It is extremely fast and proficient with internet fundamentals such as HTTP, DNS, TCP.[28] Also, JavaScript was a well-known language, making Node.js immediately accessible to the entire web development community.[28]

Industry support
There are thousands of open-source libraries for Node.js, most of them hosted on the npm website. The Node.js developer community has two main mailing lists and the IRC channel #node.js on freenode. There are multiple developer conferences and events that support the Node.js community including NodeConf, Node Interactive and Node Summit as well as a number of regional events.

The open-source community has developed web frameworks to accelerate the development of applications. Such frameworks include Connect, Express.js, Socket.IO, Koa.js, Hapi.js, Sails.js, Meteor, Derby, and many others.[31][53] Various packages have also been created for interfacing with other languages or runtime environments such as Microsoft .NET.[54]

Modern desktop IDEs provide editing and debugging features specifically for Node.js applications. Such IDEs include Atom, Brackets, JetBrains WebStorm,[55][56] Microsoft Visual Studio (with Node.js Tools for Visual Studio,[57] or TypeScript with Node definitions,[58][59][60][61]) NetBeans,[62] Nodeclipse Enide Studio [63] (Eclipse-based), and Visual Studio Code.[64][65] Certain online web-based IDEs also support Node.js, such as Codeanywhere, Codenvy, Cloud9 IDE, Koding, and the visual flow editor in Node-RED.

Releases
Release	Code name	Release date	LTS status	Active LTS start	Maintenance start	Maintenance end
v0.10.x		2013-03-11	End-of-life	-	2015-10-01	2016-10-31
v0.12.x		2015-02-06	End-of-life	-	2016-04-01	2016-12-31
4.x	Argon[66]	2015-09-08	End-of-life	2015-10-01	2017-04-01	2018-04-30
5.x		2015-10-29	No LTS	N/A	2016-06-30
6.x	Boron[66]	2016-04-26	Maintenance	2016-10-18	2018-04-30	April 2019
7.x		2016-10-25	No LTS	N/A	2017-06-30
8.x	Carbon[66]	2017-05-30	Active	2017-10-31	April 2019	December 2019
9.x		2017-10-01	No LTS	N/A	June 2018
10.x	Dubnium[66]	2018-04-24	Active	October 2018	April 2020	April 2021
11.x[66]		2018-10-23	No LTS	N/A	June 2019
New major releases of Node.js are cut from the GitHub master branch every six months. Even-numbered versions are cut in April and odd-numbered versions are cut in October. When a new odd version is released, the previous even version undergoes transition to Long Term Support (LTS), which gives that version 18 months of active support from the date it is designated LTS. After these 18 months expire, an LTS release receives an additional 12 months of maintenance support. An active version receives non-breaking backports of changes a few weeks after they land in the current release. A maintenance release only receives critical fixes and documentation updates.[66] The LTS Working Group manages strategy and policy in collaboration with the Technical Steering Committee of the Node.js Foundation.

Technical details

This section may be too technical for most readers to understand. Please help improve it to make it understandable to non-experts, without removing the technical details. (August 2015) (Learn how and when to remove this template message)
Node.js is a Javascript runtime environment that processes incoming requests in a loop, called the event loop.

Threading
Node.js operates on a single thread, using non-blocking I/O calls, allowing it to support tens of thousands of concurrent connections without incurring the cost of thread context switching.[67] The design of sharing a single thread among all the requests that use the observer pattern is intended for building highly concurrent applications, where any function performing I/O must use a callback. To accommodate the single-threaded event loop, Node.js uses the libuv libraryâ€”which, in turn, uses a fixed-sized thread pool that handles some of the non-blocking asynchronous I/O operations.[6]

A downside of this single-threaded approach is that Node.js doesn't allow vertical scaling by increasing the number of CPU cores of the machine it is running on without using an additional module, such as cluster,[51] StrongLoop Process Manager,[68] or pm2.[69] However, developers can increase the default number of threads in the libuv thread pool. The server operating system (OS) is likely to distribute these threads across multiple cores.[70]

A thread pool handles execution of parallel tasks in Node.js. The main thread call functions post tasks to the shared task queue, which threads in the thread pool pull and execute. Inherently non-blocking system functions such as networking translate to kernel-side non-blocking sockets, while inherently blocking system functions such as file I/O run in a blocking way on their own threads. When a thread in the thread pool completes a task, it informs the main thread of this, which in turn, wakes up and executes the registered callback. Since Node.js handles callbacks in serial on the main thread, long lasting computations and other CPU-bound tasks freeze the entire event-loop until completion.[citation needed]

V8
V8 is the JavaScript execution engine built for Google Chrome and open-sourced by Google in 2008. Written in C++, V8 compiles JavaScript source code to native machine code instead of interpreting it in real time.[6]

Node.js uses libuv to handle asynchronous events. Libuv is an abstraction layer for network and file system functionality on both Windows and POSIX-based systems such as Linux, macOS, OSS on NonStop, and Unix.

The core functionality of Node.js resides in a JavaScript library. The Node.js bindings, written in C++, connect these technologies to each other and to the operating system.

Package management
npm is the pre-installed package manager for the Node.js server platform. It installs Node.js programs from the npm registry, organizing the installation and management of third-party Node.js programs. Packages in the npm registry can range from simple helper libraries such as Lodash to task runners such as Grunt.

Unified API
Node.js can be combined with a browser, a database that supports JSON data (such as Postgres,[71] MongoDB, or CouchDB) and JSON for a unified JavaScript development stack. With the adaptation of what were essentially server-side development patterns such as MVC, MVP, MVVM, etc., Node.js allows the reuse of the same model and service interface between client-side and server-side.

Event loop
Node.js registers with the operating system so the OS notifies it of connections and issues a callback. Within the Node.js runtime, each connection is a small heap allocation. Traditionally, relatively heavyweight OS processes or threads handled each connection. Node.js uses an event loop for scalability, instead of processes or threads.[72] In contrast to other event-driven servers, Node.js's event loop does not need to be called explicitly. Instead callbacks are defined, and the server automatically enters the event loop at the end of the callback definition. Node.js exits the event loop when there are no further callbacks to be performed.

Project governance
In 2015, various branches of the greater Node.js community began working under the vendor-neutral Node.js Foundation. The stated purpose of the organization "is to enable widespread adoption and help accelerate development of Node.js and other related modules through an open governance model that encourages participation, technical contribution, and a framework for long-term stewardship by an ecosystem invested in Node.js' success."[73]

The Node.js Foundation Technical Steering Committee (TSC) is the technical governing body of the Node.js Foundation. The TSC is responsible for the core Node.js repo as well as dependent and adjacent projects. Generally the TSC delegates administration of these projects to working groups or committees.[74] The LTS group that manages long term supported releases is one such group. Other current groups include: Website, Streams, Build, Diagnostics, i18n, Evangelism, Docker, Addon API, Benchmarking, Post-mortem, Intl, Documentation, and Testing.[75]

In August, 2017, a governance breakdown precipitated efforts to repair the resulting damage and to create a path to future stability of governance.[76]

See also
	Free software portal
List of server-side JavaScript implementations
List of JavaScript libraries
MEAN (software bundle)
Online JavaScript IDE
Rhino (JavaScript engine)
Application server

Node.js
Node.js logo.svg
Original author(s)	Ryan Dahl
Developer(s)	Joyent
Initial release	May 27, 2009; 9 years ago[1]
Stable release	
10.4.0 / June 6, 2018; 6 days ago[2]
Repository	
https://github.com/nodejs/node
Edit this at Wikidata
Written in	C, C++, JavaScript
Operating system	Linux, macOS, Microsoft Windows, SmartOS, FreeBSD, IBM AIX[3]
Type	Run-time environment
License	MIT[4]
Website	nodejs.org
Node.js is an open-source, cross-platform JavaScript run-time environment that executes JavaScript code server-side. Historically, JavaScript was used primarily for client-side scripting, in which scripts written in JavaScript are embedded in a webpage's HTML and run client-side by a JavaScript engine in the user's web browser. Node.js lets developers use JavaScript for server-side scriptingâ€”running scripts server-side to produce dynamic web page content before the page is sent to the user's web browser. Consequently, Node.js represents a "JavaScript everywhere" paradigm,[5] unifying web application development around a single programming language, rather than different languages for server side and client side scripts.

Though .js is the conventional filename extension for JavaScript code, the name "Node.js" does not refer to a particular file in this context and is merely the name of the product. Node.js has an event-driven architecture capable of asynchronous I/O. These design choices aim to optimize throughput and scalability in web applications with many input/output operations, as well as for real-time Web applications (e.g., real-time communication programs and browser games).[6]

The Node.js distributed development project, governed by the Node.js Foundation,[7] is facilitated by the Linux Foundation's Collaborative Projects program.[8]

Corporate users of Node.js software include GoDaddy,[9] Groupon,[10] IBM,[11] LinkedIn,[12][13] Microsoft,[14][15] Netflix,[16] PayPal,[17][18] Rakuten, SAP, Tuenti,[19] Voxer,[20] Walmart,[21] and Yahoo!.[22]

Contents 
1	History
2	Overview
2.1	Platform architecture
2.2	Industry support
3	Releases
4	Technical details
4.1	Threading
4.2	V8
4.3	Package management
4.4	Unified API
4.5	Event loop
5	Project governance
6	See also
7	References
8	Further reading
9	External links
History

Ryan Dahl, creator of Node.js, in 2010
Node.js was originally written by Ryan Dahl in 2009,[23] about thirteen years after the introduction of the first server-side JavaScript environment, Netscape's LiveWire Pro Web.[24] The initial release supported only Linux and Mac OS X. Its development and maintenance was led by Dahl and later sponsored by Joyent.[25]

Dahl was inspired to create Node.js after seeing a file upload progress bar on Flickr. The browser did not know how much of the file had been uploaded and had to query the Web server. Dahl desired an easier way.[6][26]

Dahl criticized the limited possibilities of the most popular web server in 2009, Apache HTTP Server, to handle a lot of concurrent connections (up to 10,000 and more) and the most common way of creating code (sequential programming), when code either blocked the entire process or implied multiple execution stacks in the case of simultaneous connections.[27]

Dahl demonstrated the project at the inaugural European JSConf on November 8, 2009.[28][29][30] Node.js combined Google's V8 JavaScript engine, an event loop, and a low-level I/O API.[31]

In January 2010, a package manager was introduced for the Node.js environment called npm.[32] The package manager makes it easier for programmers to publish and share source code of Node.js libraries and is designed to simplify installation, updating, and uninstallation of libraries.[31]

In June 2011, Microsoft and Joyent implemented a native Windows version of Node.js.[33] The first Node.js build supporting Windows was released in July 2011.

In January 2012, Dahl stepped aside, promoting coworker and npm creator Isaac Schlueter to manage the project.[34] In January 2014, Schlueter announced that Timothy J. Fontaine would lead the project.[35]

In December 2014, Fedor Indutny started io.js, a fork of Node.js. Due to the internal conflict over Joyent's governance, io.js was created as an open governance alternative with a separate technical committee.[36][37] Unlike Node.js,[38] the authors planned to keep io.js up-to-date with the latest releases of the Google V8 JavaScript engine.[39]

In February 2015, the intent to form a neutral Node.js Foundation was announced. By June 2015, the Node.js and io.js communities voted to work together under the Node.js Foundation.[40]

In September 2015, Node.js v0.12 and io.js v3.3 were merged back together into Node v4.0.[41] This brought V8 ES6 features into Node.js, and a long-term support release cycle.[42] As of 2016, the io.js website recommends that developers switch back to Node.js and that no further releases of io.js are planned due to the merger.[43]

Overview
Node.js allows the creation of Web servers and networking tools using JavaScript and a collection of "modules" that handle various core functionality.[28][31][44][45][46] Modules are provided for file system I/O, networking (DNS, HTTP, TCP, TLS/SSL, or UDP), binary data (buffers), cryptography functions, data streams, and other core functions.[31][45][47] Node.js's modules use an API designed to reduce the complexity of writing server applications.[31][45]

Node.js is officially supported on Linux, macOS, Microsoft Windows, SmartOS, FreeBSD, and IBM AIX.[3] The provided source code may also be built on similar operating systems or be modified by third parties to support others such as NonStop[48] and Unix servers. Alternatively, they can be written with CoffeeScript[49] (a JavaScript alternative), Dart or TypeScript (strongly typed forms of JavaScript), or any other language that can compile to JavaScript.[49][50]

Node.js is primarily used to build network programs such as Web servers.[44] The biggest difference between Node.js and PHP is that most functions in PHP block until completion (commands execute only after previous commands finish), while Node.js functions are non-blocking (commands execute concurrently or even in parallel,[51][52] and use callbacks to signal completion or failure).[44]

Platform architecture
Node.js brings event-driven programming to web servers, enabling development of fast web servers in JavaScript.[31] Developers can create highly scalable servers without using threading, by using a simplified model of event-driven programming that uses callbacks to signal the completion of a task.[31] Node.js connects the ease of a scripting language (JavaScript) with the power of Unix network programming.[31]

Node.js was built on the Google V8 JavaScript engine since it was open-sourced under the BSD license. It is extremely fast and proficient with internet fundamentals such as HTTP, DNS, TCP.[28] Also, JavaScript was a well-known language, making Node.js immediately accessible to the entire web development community.[28]

Industry support
There are thousands of open-source libraries for Node.js, most of them hosted on the npm website. The Node.js developer community has two main mailing lists and the IRC channel #node.js on freenode. There are multiple developer conferences and events that support the Node.js community including NodeConf, Node Interactive and Node Summit as well as a number of regional events.

The open-source community has developed web frameworks to accelerate the development of applications. Such frameworks include Connect, Express.js, Socket.IO, Koa.js, Hapi.js, Sails.js, Meteor, Derby, and many others.[31][53] Various packages have also been created for interfacing with other languages or runtime environments such as Microsoft .NET.[54]

Modern desktop IDEs provide editing and debugging features specifically for Node.js applications. Such IDEs include Atom, Brackets, JetBrains WebStorm,[55][56] Microsoft Visual Studio (with Node.js Tools for Visual Studio,[57] or TypeScript with Node definitions,[58][59][60][61]) NetBeans,[62] Nodeclipse Enide Studio [63] (Eclipse-based), and Visual Studio Code.[64][65] Certain online web-based IDEs also support Node.js, such as Codeanywhere, Codenvy, Cloud9 IDE, Koding, and the visual flow editor in Node-RED.

Releases
Release	Code name	Release date	LTS status	Active LTS start	Maintenance start	Maintenance end
v0.10.x		2013-03-11	End-of-life	-	2015-10-01	2016-10-31
v0.12.x		2015-02-06	End-of-life	-	2016-04-01	2016-12-31
4.x	Argon[66]	2015-09-08	End-of-life	2015-10-01	2017-04-01	2018-04-30
5.x		2015-10-29	No LTS	N/A	2016-06-30
6.x	Boron[66]	2016-04-26	Maintenance	2016-10-18	2018-04-30	April 2019
7.x		2016-10-25	No LTS	N/A	2017-06-30
8.x	Carbon[66]	2017-05-30	Active	2017-10-31	April 2019	December 2019
9.x		2017-10-01	No LTS	N/A	June 2018
10.x	Dubnium[66]	2018-04-24	Active	October 2018	April 2020	April 2021
11.x[66]		2018-10-23	No LTS	N/A	June 2019
New major releases of Node.js are cut from the GitHub master branch every six months. Even-numbered versions are cut in April and odd-numbered versions are cut in October. When a new odd version is released, the previous even version undergoes transition to Long Term Support (LTS), which gives that version 18 months of active support from the date it is designated LTS. After these 18 months expire, an LTS release receives an additional 12 months of maintenance support. An active version receives non-breaking backports of changes a few weeks after they land in the current release. A maintenance release only receives critical fixes and documentation updates.[66] The LTS Working Group manages strategy and policy in collaboration with the Technical Steering Committee of the Node.js Foundation.

Technical details

This section may be too technical for most readers to understand. Please help improve it to make it understandable to non-experts, without removing the technical details. (August 2015) (Learn how and when to remove this template message)
Node.js is a Javascript runtime environment that processes incoming requests in a loop, called the event loop.

Threading
Node.js operates on a single thread, using non-blocking I/O calls, allowing it to support tens of thousands of concurrent connections without incurring the cost of thread context switching.[67] The design of sharing a single thread among all the requests that use the observer pattern is intended for building highly concurrent applications, where any function performing I/O must use a callback. To accommodate the single-threaded event loop, Node.js uses the libuv libraryâ€”which, in turn, uses a fixed-sized thread pool that handles some of the non-blocking asynchronous I/O operations.[6]

A downside of this single-threaded approach is that Node.js doesn't allow vertical scaling by increasing the number of CPU cores of the machine it is running on without using an additional module, such as cluster,[51] StrongLoop Process Manager,[68] or pm2.[69] However, developers can increase the default number of threads in the libuv thread pool. The server operating system (OS) is likely to distribute these threads across multiple cores.[70]

A thread pool handles execution of parallel tasks in Node.js. The main thread call functions post tasks to the shared task queue, which threads in the thread pool pull and execute. Inherently non-blocking system functions such as networking translate to kernel-side non-blocking sockets, while inherently blocking system functions such as file I/O run in a blocking way on their own threads. When a thread in the thread pool completes a task, it informs the main thread of this, which in turn, wakes up and executes the registered callback. Since Node.js handles callbacks in serial on the main thread, long lasting computations and other CPU-bound tasks freeze the entire event-loop until completion.[citation needed]

V8
V8 is the JavaScript execution engine built for Google Chrome and open-sourced by Google in 2008. Written in C++, V8 compiles JavaScript source code to native machine code instead of interpreting it in real time.[6]

Node.js uses libuv to handle asynchronous events. Libuv is an abstraction layer for network and file system functionality on both Windows and POSIX-based systems such as Linux, macOS, OSS on NonStop, and Unix.

The core functionality of Node.js resides in a JavaScript library. The Node.js bindings, written in C++, connect these technologies to each other and to the operating system.

Package management
npm is the pre-installed package manager for the Node.js server platform. It installs Node.js programs from the npm registry, organizing the installation and management of third-party Node.js programs. Packages in the npm registry can range from simple helper libraries such as Lodash to task runners such as Grunt.

Unified API
Node.js can be combined with a browser, a database that supports JSON data (such as Postgres,[71] MongoDB, or CouchDB) and JSON for a unified JavaScript development stack. With the adaptation of what were essentially server-side development patterns such as MVC, MVP, MVVM, etc., Node.js allows the reuse of the same model and service interface between client-side and server-side.

Event loop
Node.js registers with the operating system so the OS notifies it of connections and issues a callback. Within the Node.js runtime, each connection is a small heap allocation. Traditionally, relatively heavyweight OS processes or threads handled each connection. Node.js uses an event loop for scalability, instead of processes or threads.[72] In contrast to other event-driven servers, Node.js's event loop does not need to be called explicitly. Instead callbacks are defined, and the server automatically enters the event loop at the end of the callback definition. Node.js exits the event loop when there are no further callbacks to be performed.

Project governance
In 2015, various branches of the greater Node.js community began working under the vendor-neutral Node.js Foundation. The stated purpose of the organization "is to enable widespread adoption and help accelerate development of Node.js and other related modules through an open governance model that encourages participation, technical contribution, and a framework for long-term stewardship by an ecosystem invested in Node.js' success."[73]

The Node.js Foundation Technical Steering Committee (TSC) is the technical governing body of the Node.js Foundation. The TSC is responsible for the core Node.js repo as well as dependent and adjacent projects. Generally the TSC delegates administration of these projects to working groups or committees.[74] The LTS group that manages long term supported releases is one such group. Other current groups include: Website, Streams, Build, Diagnostics, i18n, Evangelism, Docker, Addon API, Benchmarking, Post-mortem, Intl, Documentation, and Testing.[75]

In August, 2017, a governance breakdown precipitated efforts to repair the resulting damage and to create a path to future stability of governance.[76]

See also
	Free software portal
List of server-side JavaScript implementations
List of JavaScript libraries
MEAN (software bundle)
Online JavaScript IDE
Rhino (JavaScript engine)
Application server

Node.js
Node.js logo.svg
Original author(s)	Ryan Dahl
Developer(s)	Joyent
Initial release	May 27, 2009; 9 years ago[1]
Stable release	
10.4.0 / June 6, 2018; 6 days ago[2]
Repository	
https://github.com/nodejs/node
Edit this at Wikidata
Written in	C, C++, JavaScript
Operating system	Linux, macOS, Microsoft Windows, SmartOS, FreeBSD, IBM AIX[3]
Type	Run-time environment
License	MIT[4]
Website	nodejs.org
Node.js is an open-source, cross-platform JavaScript run-time environment that executes JavaScript code server-side. Historically, JavaScript was used primarily for client-side scripting, in which scripts written in JavaScript are embedded in a webpage's HTML and run client-side by a JavaScript engine in the user's web browser. Node.js lets developers use JavaScript for server-side scriptingâ€”running scripts server-side to produce dynamic web page content before the page is sent to the user's web browser. Consequently, Node.js represents a "JavaScript everywhere" paradigm,[5] unifying web application development around a single programming language, rather than different languages for server side and client side scripts.

Though .js is the conventional filename extension for JavaScript code, the name "Node.js" does not refer to a particular file in this context and is merely the name of the product. Node.js has an event-driven architecture capable of asynchronous I/O. These design choices aim to optimize throughput and scalability in web applications with many input/output operations, as well as for real-time Web applications (e.g., real-time communication programs and browser games).[6]

The Node.js distributed development project, governed by the Node.js Foundation,[7] is facilitated by the Linux Foundation's Collaborative Projects program.[8]

Corporate users of Node.js software include GoDaddy,[9] Groupon,[10] IBM,[11] LinkedIn,[12][13] Microsoft,[14][15] Netflix,[16] PayPal,[17][18] Rakuten, SAP, Tuenti,[19] Voxer,[20] Walmart,[21] and Yahoo!.[22]

Contents 
1	History
2	Overview
2.1	Platform architecture
2.2	Industry support
3	Releases
4	Technical details
4.1	Threading
4.2	V8
4.3	Package management
4.4	Unified API
4.5	Event loop
5	Project governance
6	See also
7	References
8	Further reading
9	External links
History

Ryan Dahl, creator of Node.js, in 2010
Node.js was originally written by Ryan Dahl in 2009,[23] about thirteen years after the introduction of the first server-side JavaScript environment, Netscape's LiveWire Pro Web.[24] The initial release supported only Linux and Mac OS X. Its development and maintenance was led by Dahl and later sponsored by Joyent.[25]

Dahl was inspired to create Node.js after seeing a file upload progress bar on Flickr. The browser did not know how much of the file had been uploaded and had to query the Web server. Dahl desired an easier way.[6][26]

Dahl criticized the limited possibilities of the most popular web server in 2009, Apache HTTP Server, to handle a lot of concurrent connections (up to 10,000 and more) and the most common way of creating code (sequential programming), when code either blocked the entire process or implied multiple execution stacks in the case of simultaneous connections.[27]

Dahl demonstrated the project at the inaugural European JSConf on November 8, 2009.[28][29][30] Node.js combined Google's V8 JavaScript engine, an event loop, and a low-level I/O API.[31]

In January 2010, a package manager was introduced for the Node.js environment called npm.[32] The package manager makes it easier for programmers to publish and share source code of Node.js libraries and is designed to simplify installation, updating, and uninstallation of libraries.[31]

In June 2011, Microsoft and Joyent implemented a native Windows version of Node.js.[33] The first Node.js build supporting Windows was released in July 2011.

In January 2012, Dahl stepped aside, promoting coworker and npm creator Isaac Schlueter to manage the project.[34] In January 2014, Schlueter announced that Timothy J. Fontaine would lead the project.[35]

In December 2014, Fedor Indutny started io.js, a fork of Node.js. Due to the internal conflict over Joyent's governance, io.js was created as an open governance alternative with a separate technical committee.[36][37] Unlike Node.js,[38] the authors planned to keep io.js up-to-date with the latest releases of the Google V8 JavaScript engine.[39]

In February 2015, the intent to form a neutral Node.js Foundation was announced. By June 2015, the Node.js and io.js communities voted to work together under the Node.js Foundation.[40]

In September 2015, Node.js v0.12 and io.js v3.3 were merged back together into Node v4.0.[41] This brought V8 ES6 features into Node.js, and a long-term support release cycle.[42] As of 2016, the io.js website recommends that developers switch back to Node.js and that no further releases of io.js are planned due to the merger.[43]

Overview
Node.js allows the creation of Web servers and networking tools using JavaScript and a collection of "modules" that handle various core functionality.[28][31][44][45][46] Modules are provided for file system I/O, networking (DNS, HTTP, TCP, TLS/SSL, or UDP), binary data (buffers), cryptography functions, data streams, and other core functions.[31][45][47] Node.js's modules use an API designed to reduce the complexity of writing server applications.[31][45]

Node.js is officially supported on Linux, macOS, Microsoft Windows, SmartOS, FreeBSD, and IBM AIX.[3] The provided source code may also be built on similar operating systems or be modified by third parties to support others such as NonStop[48] and Unix servers. Alternatively, they can be written with CoffeeScript[49] (a JavaScript alternative), Dart or TypeScript (strongly typed forms of JavaScript), or any other language that can compile to JavaScript.[49][50]

Node.js is primarily used to build network programs such as Web servers.[44] The biggest difference between Node.js and PHP is that most functions in PHP block until completion (commands execute only after previous commands finish), while Node.js functions are non-blocking (commands execute concurrently or even in parallel,[51][52] and use callbacks to signal completion or failure).[44]

Platform architecture
Node.js brings event-driven programming to web servers, enabling development of fast web servers in JavaScript.[31] Developers can create highly scalable servers without using threading, by using a simplified model of event-driven programming that uses callbacks to signal the completion of a task.[31] Node.js connects the ease of a scripting language (JavaScript) with the power of Unix network programming.[31]

Node.js was built on the Google V8 JavaScript engine since it was open-sourced under the BSD license. It is extremely fast and proficient with internet fundamentals such as HTTP, DNS, TCP.[28] Also, JavaScript was a well-known language, making Node.js immediately accessible to the entire web development community.[28]

Industry support
There are thousands of open-source libraries for Node.js, most of them hosted on the npm website. The Node.js developer community has two main mailing lists and the IRC channel #node.js on freenode. There are multiple developer conferences and events that support the Node.js community including NodeConf, Node Interactive and Node Summit as well as a number of regional events.

The open-source community has developed web frameworks to accelerate the development of applications. Such frameworks include Connect, Express.js, Socket.IO, Koa.js, Hapi.js, Sails.js, Meteor, Derby, and many others.[31][53] Various packages have also been created for interfacing with other languages or runtime environments such as Microsoft .NET.[54]

Modern desktop IDEs provide editing and debugging features specifically for Node.js applications. Such IDEs include Atom, Brackets, JetBrains WebStorm,[55][56] Microsoft Visual Studio (with Node.js Tools for Visual Studio,[57] or TypeScript with Node definitions,[58][59][60][61]) NetBeans,[62] Nodeclipse Enide Studio [63] (Eclipse-based), and Visual Studio Code.[64][65] Certain online web-based IDEs also support Node.js, such as Codeanywhere, Codenvy, Cloud9 IDE, Koding, and the visual flow editor in Node-RED.

Releases
Release	Code name	Release date	LTS status	Active LTS start	Maintenance start	Maintenance end
v0.10.x		2013-03-11	End-of-life	-	2015-10-01	2016-10-31
v0.12.x		2015-02-06	End-of-life	-	2016-04-01	2016-12-31
4.x	Argon[66]	2015-09-08	End-of-life	2015-10-01	2017-04-01	2018-04-30
5.x		2015-10-29	No LTS	N/A	2016-06-30
6.x	Boron[66]	2016-04-26	Maintenance	2016-10-18	2018-04-30	April 2019
7.x		2016-10-25	No LTS	N/A	2017-06-30
8.x	Carbon[66]	2017-05-30	Active	2017-10-31	April 2019	December 2019
9.x		2017-10-01	No LTS	N/A	June 2018
10.x	Dubnium[66]	2018-04-24	Active	October 2018	April 2020	April 2021
11.x[66]		2018-10-23	No LTS	N/A	June 2019
New major releases of Node.js are cut from the GitHub master branch every six months. Even-numbered versions are cut in April and odd-numbered versions are cut in October. When a new odd version is released, the previous even version undergoes transition to Long Term Support (LTS), which gives that version 18 months of active support from the date it is designated LTS. After these 18 months expire, an LTS release receives an additional 12 months of maintenance support. An active version receives non-breaking backports of changes a few weeks after they land in the current release. A maintenance release only receives critical fixes and documentation updates.[66] The LTS Working Group manages strategy and policy in collaboration with the Technical Steering Committee of the Node.js Foundation.

Technical details

This section may be too technical for most readers to understand. Please help improve it to make it understandable to non-experts, without removing the technical details. (August 2015) (Learn how and when to remove this template message)
Node.js is a Javascript runtime environment that processes incoming requests in a loop, called the event loop.

Threading
Node.js operates on a single thread, using non-blocking I/O calls, allowing it to support tens of thousands of concurrent connections without incurring the cost of thread context switching.[67] The design of sharing a single thread among all the requests that use the observer pattern is intended for building highly concurrent applications, where any function performing I/O must use a callback. To accommodate the single-threaded event loop, Node.js uses the libuv libraryâ€”which, in turn, uses a fixed-sized thread pool that handles some of the non-blocking asynchronous I/O operations.[6]

A downside of this single-threaded approach is that Node.js doesn't allow vertical scaling by increasing the number of CPU cores of the machine it is running on without using an additional module, such as cluster,[51] StrongLoop Process Manager,[68] or pm2.[69] However, developers can increase the default number of threads in the libuv thread pool. The server operating system (OS) is likely to distribute these threads across multiple cores.[70]

A thread pool handles execution of parallel tasks in Node.js. The main thread call functions post tasks to the shared task queue, which threads in the thread pool pull and execute. Inherently non-blocking system functions such as networking translate to kernel-side non-blocking sockets, while inherently blocking system functions such as file I/O run in a blocking way on their own threads. When a thread in the thread pool completes a task, it informs the main thread of this, which in turn, wakes up and executes the registered callback. Since Node.js handles callbacks in serial on the main thread, long lasting computations and other CPU-bound tasks freeze the entire event-loop until completion.[citation needed]

V8
V8 is the JavaScript execution engine built for Google Chrome and open-sourced by Google in 2008. Written in C++, V8 compiles JavaScript source code to native machine code instead of interpreting it in real time.[6]

Node.js uses libuv to handle asynchronous events. Libuv is an abstraction layer for network and file system functionality on both Windows and POSIX-based systems such as Linux, macOS, OSS on NonStop, and Unix.

The core functionality of Node.js resides in a JavaScript library. The Node.js bindings, written in C++, connect these technologies to each other and to the operating system.

Package management
npm is the pre-installed package manager for the Node.js server platform. It installs Node.js programs from the npm registry, organizing the installation and management of third-party Node.js programs. Packages in the npm registry can range from simple helper libraries such as Lodash to task runners such as Grunt.

Unified API
Node.js can be combined with a browser, a database that supports JSON data (such as Postgres,[71] MongoDB, or CouchDB) and JSON for a unified JavaScript development stack. With the adaptation of what were essentially server-side development patterns such as MVC, MVP, MVVM, etc., Node.js allows the reuse of the same model and service interface between client-side and server-side.

Event loop
Node.js registers with the operating system so the OS notifies it of connections and issues a callback. Within the Node.js runtime, each connection is a small heap allocation. Traditionally, relatively heavyweight OS processes or threads handled each connection. Node.js uses an event loop for scalability, instead of processes or threads.[72] In contrast to other event-driven servers, Node.js's event loop does not need to be called explicitly. Instead callbacks are defined, and the server automatically enters the event loop at the end of the callback definition. Node.js exits the event loop when there are no further callbacks to be performed.

Project governance
In 2015, various branches of the greater Node.js community began working under the vendor-neutral Node.js Foundation. The stated purpose of the organization "is to enable widespread adoption and help accelerate development of Node.js and other related modules through an open governance model that encourages participation, technical contribution, and a framework for long-term stewardship by an ecosystem invested in Node.js' success."[73]

The Node.js Foundation Technical Steering Committee (TSC) is the technical governing body of the Node.js Foundation. The TSC is responsible for the core Node.js repo as well as dependent and adjacent projects. Generally the TSC delegates administration of these projects to working groups or committees.[74] The LTS group that manages long term supported releases is one such group. Other current groups include: Website, Streams, Build, Diagnostics, i18n, Evangelism, Docker, Addon API, Benchmarking, Post-mortem, Intl, Documentation, and Testing.[75]

In August, 2017, a governance breakdown precipitated efforts to repair the resulting damage and to create a path to future stability of governance.[76]

See also
	Free software portal
List of server-side JavaScript implementations
List of JavaScript libraries
MEAN (software bundle)
Online JavaScript IDE
Rhino (JavaScript engine)
Application server

Node.js
Node.js logo.svg
Original author(s)	Ryan Dahl
Developer(s)	Joyent
Initial release	May 27, 2009; 9 years ago[1]
Stable release	
10.4.0 / June 6, 2018; 6 days ago[2]
Repository	
https://github.com/nodejs/node
Edit this at Wikidata
Written in	C, C++, JavaScript
Operating system	Linux, macOS, Microsoft Windows, SmartOS, FreeBSD, IBM AIX[3]
Type	Run-time environment
License	MIT[4]
Website	nodejs.org
Node.js is an open-source, cross-platform JavaScript run-time environment that executes JavaScript code server-side. Historically, JavaScript was used primarily for client-side scripting, in which scripts written in JavaScript are embedded in a webpage's HTML and run client-side by a JavaScript engine in the user's web browser. Node.js lets developers use JavaScript for server-side scriptingâ€”running scripts server-side to produce dynamic web page content before the page is sent to the user's web browser. Consequently, Node.js represents a "JavaScript everywhere" paradigm,[5] unifying web application development around a single programming language, rather than different languages for server side and client side scripts.

Though .js is the conventional filename extension for JavaScript code, the name "Node.js" does not refer to a particular file in this context and is merely the name of the product. Node.js has an event-driven architecture capable of asynchronous I/O. These design choices aim to optimize throughput and scalability in web applications with many input/output operations, as well as for real-time Web applications (e.g., real-time communication programs and browser games).[6]

The Node.js distributed development project, governed by the Node.js Foundation,[7] is facilitated by the Linux Foundation's Collaborative Projects program.[8]

Corporate users of Node.js software include GoDaddy,[9] Groupon,[10] IBM,[11] LinkedIn,[12][13] Microsoft,[14][15] Netflix,[16] PayPal,[17][18] Rakuten, SAP, Tuenti,[19] Voxer,[20] Walmart,[21] and Yahoo!.[22]

Contents 
1	History
2	Overview
2.1	Platform architecture
2.2	Industry support
3	Releases
4	Technical details
4.1	Threading
4.2	V8
4.3	Package management
4.4	Unified API
4.5	Event loop
5	Project governance
6	See also
7	References
8	Further reading
9	External links
History

Ryan Dahl, creator of Node.js, in 2010
Node.js was originally written by Ryan Dahl in 2009,[23] about thirteen years after the introduction of the first server-side JavaScript environment, Netscape's LiveWire Pro Web.[24] The initial release supported only Linux and Mac OS X. Its development and maintenance was led by Dahl and later sponsored by Joyent.[25]

Dahl was inspired to create Node.js after seeing a file upload progress bar on Flickr. The browser did not know how much of the file had been uploaded and had to query the Web server. Dahl desired an easier way.[6][26]

Dahl criticized the limited possibilities of the most popular web server in 2009, Apache HTTP Server, to handle a lot of concurrent connections (up to 10,000 and more) and the most common way of creating code (sequential programming), when code either blocked the entire process or implied multiple execution stacks in the case of simultaneous connections.[27]

Dahl demonstrated the project at the inaugural European JSConf on November 8, 2009.[28][29][30] Node.js combined Google's V8 JavaScript engine, an event loop, and a low-level I/O API.[31]

In January 2010, a package manager was introduced for the Node.js environment called npm.[32] The package manager makes it easier for programmers to publish and share source code of Node.js libraries and is designed to simplify installation, updating, and uninstallation of libraries.[31]

In June 2011, Microsoft and Joyent implemented a native Windows version of Node.js.[33] The first Node.js build supporting Windows was released in July 2011.

In January 2012, Dahl stepped aside, promoting coworker and npm creator Isaac Schlueter to manage the project.[34] In January 2014, Schlueter announced that Timothy J. Fontaine would lead the project.[35]

In December 2014, Fedor Indutny started io.js, a fork of Node.js. Due to the internal conflict over Joyent's governance, io.js was created as an open governance alternative with a separate technical committee.[36][37] Unlike Node.js,[38] the authors planned to keep io.js up-to-date with the latest releases of the Google V8 JavaScript engine.[39]

In February 2015, the intent to form a neutral Node.js Foundation was announced. By June 2015, the Node.js and io.js communities voted to work together under the Node.js Foundation.[40]

In September 2015, Node.js v0.12 and io.js v3.3 were merged back together into Node v4.0.[41] This brought V8 ES6 features into Node.js, and a long-term support release cycle.[42] As of 2016, the io.js website recommends that developers switch back to Node.js and that no further releases of io.js are planned due to the merger.[43]

Overview
Node.js allows the creation of Web servers and networking tools using JavaScript and a collection of "modules" that handle various core functionality.[28][31][44][45][46] Modules are provided for file system I/O, networking (DNS, HTTP, TCP, TLS/SSL, or UDP), binary data (buffers), cryptography functions, data streams, and other core functions.[31][45][47] Node.js's modules use an API designed to reduce the complexity of writing server applications.[31][45]

Node.js is officially supported on Linux, macOS, Microsoft Windows, SmartOS, FreeBSD, and IBM AIX.[3] The provided source code may also be built on similar operating systems or be modified by third parties to support others such as NonStop[48] and Unix servers. Alternatively, they can be written with CoffeeScript[49] (a JavaScript alternative), Dart or TypeScript (strongly typed forms of JavaScript), or any other language that can compile to JavaScript.[49][50]

Node.js is primarily used to build network programs such as Web servers.[44] The biggest difference between Node.js and PHP is that most functions in PHP block until completion (commands execute only after previous commands finish), while Node.js functions are non-blocking (commands execute concurrently or even in parallel,[51][52] and use callbacks to signal completion or failure).[44]

Platform architecture
Node.js brings event-driven programming to web servers, enabling development of fast web servers in JavaScript.[31] Developers can create highly scalable servers without using threading, by using a simplified model of event-driven programming that uses callbacks to signal the completion of a task.[31] Node.js connects the ease of a scripting language (JavaScript) with the power of Unix network programming.[31]

Node.js was built on the Google V8 JavaScript engine since it was open-sourced under the BSD license. It is extremely fast and proficient with internet fundamentals such as HTTP, DNS, TCP.[28] Also, JavaScript was a well-known language, making Node.js immediately accessible to the entire web development community.[28]

Industry support
There are thousands of open-source libraries for Node.js, most of them hosted on the npm website. The Node.js developer community has two main mailing lists and the IRC channel #node.js on freenode. There are multiple developer conferences and events that support the Node.js community including NodeConf, Node Interactive and Node Summit as well as a number of regional events.

The open-source community has developed web frameworks to accelerate the development of applications. Such frameworks include Connect, Express.js, Socket.IO, Koa.js, Hapi.js, Sails.js, Meteor, Derby, and many others.[31][53] Various packages have also been created for interfacing with other languages or runtime environments such as Microsoft .NET.[54]

Modern desktop IDEs provide editing and debugging features specifically for Node.js applications. Such IDEs include Atom, Brackets, JetBrains WebStorm,[55][56] Microsoft Visual Studio (with Node.js Tools for Visual Studio,[57] or TypeScript with Node definitions,[58][59][60][61]) NetBeans,[62] Nodeclipse Enide Studio [63] (Eclipse-based), and Visual Studio Code.[64][65] Certain online web-based IDEs also support Node.js, such as Codeanywhere, Codenvy, Cloud9 IDE, Koding, and the visual flow editor in Node-RED.

Releases
Release	Code name	Release date	LTS status	Active LTS start	Maintenance start	Maintenance end
v0.10.x		2013-03-11	End-of-life	-	2015-10-01	2016-10-31
v0.12.x		2015-02-06	End-of-life	-	2016-04-01	2016-12-31
4.x	Argon[66]	2015-09-08	End-of-life	2015-10-01	2017-04-01	2018-04-30
5.x		2015-10-29	No LTS	N/A	2016-06-30
6.x	Boron[66]	2016-04-26	Maintenance	2016-10-18	2018-04-30	April 2019
7.x		2016-10-25	No LTS	N/A	2017-06-30
8.x	Carbon[66]	2017-05-30	Active	2017-10-31	April 2019	December 2019
9.x		2017-10-01	No LTS	N/A	June 2018
10.x	Dubnium[66]	2018-04-24	Active	October 2018	April 2020	April 2021
11.x[66]		2018-10-23	No LTS	N/A	June 2019
New major releases of Node.js are cut from the GitHub master branch every six months. Even-numbered versions are cut in April and odd-numbered versions are cut in October. When a new odd version is released, the previous even version undergoes transition to Long Term Support (LTS), which gives that version 18 months of active support from the date it is designated LTS. After these 18 months expire, an LTS release receives an additional 12 months of maintenance support. An active version receives non-breaking backports of changes a few weeks after they land in the current release. A maintenance release only receives critical fixes and documentation updates.[66] The LTS Working Group manages strategy and policy in collaboration with the Technical Steering Committee of the Node.js Foundation.

Technical details

This section may be too technical for most readers to understand. Please help improve it to make it understandable to non-experts, without removing the technical details. (August 2015) (Learn how and when to remove this template message)
Node.js is a Javascript runtime environment that processes incoming requests in a loop, called the event loop.

Threading
Node.js operates on a single thread, using non-blocking I/O calls, allowing it to support tens of thousands of concurrent connections without incurring the cost of thread context switching.[67] The design of sharing a single thread among all the requests that use the observer pattern is intended for building highly concurrent applications, where any function performing I/O must use a callback. To accommodate the single-threaded event loop, Node.js uses the libuv libraryâ€”which, in turn, uses a fixed-sized thread pool that handles some of the non-blocking asynchronous I/O operations.[6]

A downside of this single-threaded approach is that Node.js doesn't allow vertical scaling by increasing the number of CPU cores of the machine it is running on without using an additional module, such as cluster,[51] StrongLoop Process Manager,[68] or pm2.[69] However, developers can increase the default number of threads in the libuv thread pool. The server operating system (OS) is likely to distribute these threads across multiple cores.[70]

A thread pool handles execution of parallel tasks in Node.js. The main thread call functions post tasks to the shared task queue, which threads in the thread pool pull and execute. Inherently non-blocking system functions such as networking translate to kernel-side non-blocking sockets, while inherently blocking system functions such as file I/O run in a blocking way on their own threads. When a thread in the thread pool completes a task, it informs the main thread of this, which in turn, wakes up and executes the registered callback. Since Node.js handles callbacks in serial on the main thread, long lasting computations and other CPU-bound tasks freeze the entire event-loop until completion.[citation needed]

V8
V8 is the JavaScript execution engine built for Google Chrome and open-sourced by Google in 2008. Written in C++, V8 compiles JavaScript source code to native machine code instead of interpreting it in real time.[6]

Node.js uses libuv to handle asynchronous events. Libuv is an abstraction layer for network and file system functionality on both Windows and POSIX-based systems such as Linux, macOS, OSS on NonStop, and Unix.

The core functionality of Node.js resides in a JavaScript library. The Node.js bindings, written in C++, connect these technologies to each other and to the operating system.

Package management
npm is the pre-installed package manager for the Node.js server platform. It installs Node.js programs from the npm registry, organizing the installation and management of third-party Node.js programs. Packages in the npm registry can range from simple helper libraries such as Lodash to task runners such as Grunt.

Unified API
Node.js can be combined with a browser, a database that supports JSON data (such as Postgres,[71] MongoDB, or CouchDB) and JSON for a unified JavaScript development stack. With the adaptation of what were essentially server-side development patterns such as MVC, MVP, MVVM, etc., Node.js allows the reuse of the same model and service interface between client-side and server-side.

Event loop
Node.js registers with the operating system so the OS notifies it of connections and issues a callback. Within the Node.js runtime, each connection is a small heap allocation. Traditionally, relatively heavyweight OS processes or threads handled each connection. Node.js uses an event loop for scalability, instead of processes or threads.[72] In contrast to other event-driven servers, Node.js's event loop does not need to be called explicitly. Instead callbacks are defined, and the server automatically enters the event loop at the end of the callback definition. Node.js exits the event loop when there are no further callbacks to be performed.

Project governance
In 2015, various branches of the greater Node.js community began working under the vendor-neutral Node.js Foundation. The stated purpose of the organization "is to enable widespread adoption and help accelerate development of Node.js and other related modules through an open governance model that encourages participation, technical contribution, and a framework for long-term stewardship by an ecosystem invested in Node.js' success."[73]

The Node.js Foundation Technical Steering Committee (TSC) is the technical governing body of the Node.js Foundation. The TSC is responsible for the core Node.js repo as well as dependent and adjacent projects. Generally the TSC delegates administration of these projects to working groups or committees.[74] The LTS group that manages long term supported releases is one such group. Other current groups include: Website, Streams, Build, Diagnostics, i18n, Evangelism, Docker, Addon API, Benchmarking, Post-mortem, Intl, Documentation, and Testing.[75]

In August, 2017, a governance breakdown precipitated efforts to repair the resulting damage and to create a path to future stability of governance.[76]

See also
	Free software portal
List of server-side JavaScript implementations
List of JavaScript libraries
MEAN (software bundle)
Online JavaScript IDE
Rhino (JavaScript engine)
Application server

Node.js
Node.js logo.svg
Original author(s)	Ryan Dahl
Developer(s)	Joyent
Initial release	May 27, 2009; 9 years ago[1]
Stable release	
10.4.0 / June 6, 2018; 6 days ago[2]
Repository	
https://github.com/nodejs/node
Edit this at Wikidata
Written in	C, C++, JavaScript
Operating system	Linux, macOS, Microsoft Windows, SmartOS, FreeBSD, IBM AIX[3]
Type	Run-time environment
License	MIT[4]
Website	nodejs.org
Node.js is an open-source, cross-platform JavaScript run-time environment that executes JavaScript code server-side. Historically, JavaScript was used primarily for client-side scripting, in which scripts written in JavaScript are embedded in a webpage's HTML and run client-side by a JavaScript engine in the user's web browser. Node.js lets developers use JavaScript for server-side scriptingâ€”running scripts server-side to produce dynamic web page content before the page is sent to the user's web browser. Consequently, Node.js represents a "JavaScript everywhere" paradigm,[5] unifying web application development around a single programming language, rather than different languages for server side and client side scripts.

Though .js is the conventional filename extension for JavaScript code, the name "Node.js" does not refer to a particular file in this context and is merely the name of the product. Node.js has an event-driven architecture capable of asynchronous I/O. These design choices aim to optimize throughput and scalability in web applications with many input/output operations, as well as for real-time Web applications (e.g., real-time communication programs and browser games).[6]

The Node.js distributed development project, governed by the Node.js Foundation,[7] is facilitated by the Linux Foundation's Collaborative Projects program.[8]

Corporate users of Node.js software include GoDaddy,[9] Groupon,[10] IBM,[11] LinkedIn,[12][13] Microsoft,[14][15] Netflix,[16] PayPal,[17][18] Rakuten, SAP, Tuenti,[19] Voxer,[20] Walmart,[21] and Yahoo!.[22]

Contents 
1	History
2	Overview
2.1	Platform architecture
2.2	Industry support
3	Releases
4	Technical details
4.1	Threading
4.2	V8
4.3	Package management
4.4	Unified API
4.5	Event loop
5	Project governance
6	See also
7	References
8	Further reading
9	External links
History

Ryan Dahl, creator of Node.js, in 2010
Node.js was originally written by Ryan Dahl in 2009,[23] about thirteen years after the introduction of the first server-side JavaScript environment, Netscape's LiveWire Pro Web.[24] The initial release supported only Linux and Mac OS X. Its development and maintenance was led by Dahl and later sponsored by Joyent.[25]

Dahl was inspired to create Node.js after seeing a file upload progress bar on Flickr. The browser did not know how much of the file had been uploaded and had to query the Web server. Dahl desired an easier way.[6][26]

Dahl criticized the limited possibilities of the most popular web server in 2009, Apache HTTP Server, to handle a lot of concurrent connections (up to 10,000 and more) and the most common way of creating code (sequential programming), when code either blocked the entire process or implied multiple execution stacks in the case of simultaneous connections.[27]

Dahl demonstrated the project at the inaugural European JSConf on November 8, 2009.[28][29][30] Node.js combined Google's V8 JavaScript engine, an event loop, and a low-level I/O API.[31]

In January 2010, a package manager was introduced for the Node.js environment called npm.[32] The package manager makes it easier for programmers to publish and share source code of Node.js libraries and is designed to simplify installation, updating, and uninstallation of libraries.[31]

In June 2011, Microsoft and Joyent implemented a native Windows version of Node.js.[33] The first Node.js build supporting Windows was released in July 2011.

In January 2012, Dahl stepped aside, promoting coworker and npm creator Isaac Schlueter to manage the project.[34] In January 2014, Schlueter announced that Timothy J. Fontaine would lead the project.[35]

In December 2014, Fedor Indutny started io.js, a fork of Node.js. Due to the internal conflict over Joyent's governance, io.js was created as an open governance alternative with a separate technical committee.[36][37] Unlike Node.js,[38] the authors planned to keep io.js up-to-date with the latest releases of the Google V8 JavaScript engine.[39]

In February 2015, the intent to form a neutral Node.js Foundation was announced. By June 2015, the Node.js and io.js communities voted to work together under the Node.js Foundation.[40]

In September 2015, Node.js v0.12 and io.js v3.3 were merged back together into Node v4.0.[41] This brought V8 ES6 features into Node.js, and a long-term support release cycle.[42] As of 2016, the io.js website recommends that developers switch back to Node.js and that no further releases of io.js are planned due to the merger.[43]

Overview
Node.js allows the creation of Web servers and networking tools using JavaScript and a collection of "modules" that handle various core functionality.[28][31][44][45][46] Modules are provided for file system I/O, networking (DNS, HTTP, TCP, TLS/SSL, or UDP), binary data (buffers), cryptography functions, data streams, and other core functions.[31][45][47] Node.js's modules use an API designed to reduce the complexity of writing server applications.[31][45]

Node.js is officially supported on Linux, macOS, Microsoft Windows, SmartOS, FreeBSD, and IBM AIX.[3] The provided source code may also be built on similar operating systems or be modified by third parties to support others such as NonStop[48] and Unix servers. Alternatively, they can be written with CoffeeScript[49] (a JavaScript alternative), Dart or TypeScript (strongly typed forms of JavaScript), or any other language that can compile to JavaScript.[49][50]

Node.js is primarily used to build network programs such as Web servers.[44] The biggest difference between Node.js and PHP is that most functions in PHP block until completion (commands execute only after previous commands finish), while Node.js functions are non-blocking (commands execute concurrently or even in parallel,[51][52] and use callbacks to signal completion or failure).[44]

Platform architecture
Node.js brings event-driven programming to web servers, enabling development of fast web servers in JavaScript.[31] Developers can create highly scalable servers without using threading, by using a simplified model of event-driven programming that uses callbacks to signal the completion of a task.[31] Node.js connects the ease of a scripting language (JavaScript) with the power of Unix network programming.[31]

Node.js was built on the Google V8 JavaScript engine since it was open-sourced under the BSD license. It is extremely fast and proficient with internet fundamentals such as HTTP, DNS, TCP.[28] Also, JavaScript was a well-known language, making Node.js immediately accessible to the entire web development community.[28]

Industry support
There are thousands of open-source libraries for Node.js, most of them hosted on the npm website. The Node.js developer community has two main mailing lists and the IRC channel #node.js on freenode. There are multiple developer conferences and events that support the Node.js community including NodeConf, Node Interactive and Node Summit as well as a number of regional events.

The open-source community has developed web frameworks to accelerate the development of applications. Such frameworks include Connect, Express.js, Socket.IO, Koa.js, Hapi.js, Sails.js, Meteor, Derby, and many others.[31][53] Various packages have also been created for interfacing with other languages or runtime environments such as Microsoft .NET.[54]

Modern desktop IDEs provide editing and debugging features specifically for Node.js applications. Such IDEs include Atom, Brackets, JetBrains WebStorm,[55][56] Microsoft Visual Studio (with Node.js Tools for Visual Studio,[57] or TypeScript with Node definitions,[58][59][60][61]) NetBeans,[62] Nodeclipse Enide Studio [63] (Eclipse-based), and Visual Studio Code.[64][65] Certain online web-based IDEs also support Node.js, such as Codeanywhere, Codenvy, Cloud9 IDE, Koding, and the visual flow editor in Node-RED.

Releases
Release	Code name	Release date	LTS status	Active LTS start	Maintenance start	Maintenance end
v0.10.x		2013-03-11	End-of-life	-	2015-10-01	2016-10-31
v0.12.x		2015-02-06	End-of-life	-	2016-04-01	2016-12-31
4.x	Argon[66]	2015-09-08	End-of-life	2015-10-01	2017-04-01	2018-04-30
5.x		2015-10-29	No LTS	N/A	2016-06-30
6.x	Boron[66]	2016-04-26	Maintenance	2016-10-18	2018-04-30	April 2019
7.x		2016-10-25	No LTS	N/A	2017-06-30
8.x	Carbon[66]	2017-05-30	Active	2017-10-31	April 2019	December 2019
9.x		2017-10-01	No LTS	N/A	June 2018
10.x	Dubnium[66]	2018-04-24	Active	October 2018	April 2020	April 2021
11.x[66]		2018-10-23	No LTS	N/A	June 2019
New major releases of Node.js are cut from the GitHub master branch every six months. Even-numbered versions are cut in April and odd-numbered versions are cut in October. When a new odd version is released, the previous even version undergoes transition to Long Term Support (LTS), which gives that version 18 months of active support from the date it is designated LTS. After these 18 months expire, an LTS release receives an additional 12 months of maintenance support. An active version receives non-breaking backports of changes a few weeks after they land in the current release. A maintenance release only receives critical fixes and documentation updates.[66] The LTS Working Group manages strategy and policy in collaboration with the Technical Steering Committee of the Node.js Foundation.

Technical details

This section may be too technical for most readers to understand. Please help improve it to make it understandable to non-experts, without removing the technical details. (August 2015) (Learn how and when to remove this template message)
Node.js is a Javascript runtime environment that processes incoming requests in a loop, called the event loop.

Threading
Node.js operates on a single thread, using non-blocking I/O calls, allowing it to support tens of thousands of concurrent connections without incurring the cost of thread context switching.[67] The design of sharing a single thread among all the requests that use the observer pattern is intended for building highly concurrent applications, where any function performing I/O must use a callback. To accommodate the single-threaded event loop, Node.js uses the libuv libraryâ€”which, in turn, uses a fixed-sized thread pool that handles some of the non-blocking asynchronous I/O operations.[6]

A downside of this single-threaded approach is that Node.js doesn't allow vertical scaling by increasing the number of CPU cores of the machine it is running on without using an additional module, such as cluster,[51] StrongLoop Process Manager,[68] or pm2.[69] However, developers can increase the default number of threads in the libuv thread pool. The server operating system (OS) is likely to distribute these threads across multiple cores.[70]

A thread pool handles execution of parallel tasks in Node.js. The main thread call functions post tasks to the shared task queue, which threads in the thread pool pull and execute. Inherently non-blocking system functions such as networking translate to kernel-side non-blocking sockets, while inherently blocking system functions such as file I/O run in a blocking way on their own threads. When a thread in the thread pool completes a task, it informs the main thread of this, which in turn, wakes up and executes the registered callback. Since Node.js handles callbacks in serial on the main thread, long lasting computations and other CPU-bound tasks freeze the entire event-loop until completion.[citation needed]

V8
V8 is the JavaScript execution engine built for Google Chrome and open-sourced by Google in 2008. Written in C++, V8 compiles JavaScript source code to native machine code instead of interpreting it in real time.[6]

Node.js uses libuv to handle asynchronous events. Libuv is an abstraction layer for network and file system functionality on both Windows and POSIX-based systems such as Linux, macOS, OSS on NonStop, and Unix.

The core functionality of Node.js resides in a JavaScript library. The Node.js bindings, written in C++, connect these technologies to each other and to the operating system.

Package management
npm is the pre-installed package manager for the Node.js server platform. It installs Node.js programs from the npm registry, organizing the installation and management of third-party Node.js programs. Packages in the npm registry can range from simple helper libraries such as Lodash to task runners such as Grunt.

Unified API
Node.js can be combined with a browser, a database that supports JSON data (such as Postgres,[71] MongoDB, or CouchDB) and JSON for a unified JavaScript development stack. With the adaptation of what were essentially server-side development patterns such as MVC, MVP, MVVM, etc., Node.js allows the reuse of the same model and service interface between client-side and server-side.

Event loop
Node.js registers with the operating system so the OS notifies it of connections and issues a callback. Within the Node.js runtime, each connection is a small heap allocation. Traditionally, relatively heavyweight OS processes or threads handled each connection. Node.js uses an event loop for scalability, instead of processes or threads.[72] In contrast to other event-driven servers, Node.js's event loop does not need to be called explicitly. Instead callbacks are defined, and the server automatically enters the event loop at the end of the callback definition. Node.js exits the event loop when there are no further callbacks to be performed.

Project governance
In 2015, various branches of the greater Node.js community began working under the vendor-neutral Node.js Foundation. The stated purpose of the organization "is to enable widespread adoption and help accelerate development of Node.js and other related modules through an open governance model that encourages participation, technical contribution, and a framework for long-term stewardship by an ecosystem invested in Node.js' success."[73]

The Node.js Foundation Technical Steering Committee (TSC) is the technical governing body of the Node.js Foundation. The TSC is responsible for the core Node.js repo as well as dependent and adjacent projects. Generally the TSC delegates administration of these projects to working groups or committees.[74] The LTS group that manages long term supported releases is one such group. Other current groups include: Website, Streams, Build, Diagnostics, i18n, Evangelism, Docker, Addon API, Benchmarking, Post-mortem, Intl, Documentation, and Testing.[75]

In August, 2017, a governance breakdown precipitated efforts to repair the resulting damage and to create a path to future stability of governance.[76]

See also
	Free software portal
List of server-side JavaScript implementations
List of JavaScript libraries
MEAN (software bundle)
Online JavaScript IDE
Rhino (JavaScript engine)
Application server

Node.js
Node.js logo.svg
Original author(s)	Ryan Dahl
Developer(s)	Joyent
Initial release	May 27, 2009; 9 years ago[1]
Stable release	
10.4.0 / June 6, 2018; 6 days ago[2]
Repository	
https://github.com/nodejs/node
Edit this at Wikidata
Written in	C, C++, JavaScript
Operating system	Linux, macOS, Microsoft Windows, SmartOS, FreeBSD, IBM AIX[3]
Type	Run-time environment
License	MIT[4]
Website	nodejs.org
Node.js is an open-source, cross-platform JavaScript run-time environment that executes JavaScript code server-side. Historically, JavaScript was used primarily for client-side scripting, in which scripts written in JavaScript are embedded in a webpage's HTML and run client-side by a JavaScript engine in the user's web browser. Node.js lets developers use JavaScript for server-side scriptingâ€”running scripts server-side to produce dynamic web page content before the page is sent to the user's web browser. Consequently, Node.js represents a "JavaScript everywhere" paradigm,[5] unifying web application development around a single programming language, rather than different languages for server side and client side scripts.

Though .js is the conventional filename extension for JavaScript code, the name "Node.js" does not refer to a particular file in this context and is merely the name of the product. Node.js has an event-driven architecture capable of asynchronous I/O. These design choices aim to optimize throughput and scalability in web applications with many input/output operations, as well as for real-time Web applications (e.g., real-time communication programs and browser games).[6]

The Node.js distributed development project, governed by the Node.js Foundation,[7] is facilitated by the Linux Foundation's Collaborative Projects program.[8]

Corporate users of Node.js software include GoDaddy,[9] Groupon,[10] IBM,[11] LinkedIn,[12][13] Microsoft,[14][15] Netflix,[16] PayPal,[17][18] Rakuten, SAP, Tuenti,[19] Voxer,[20] Walmart,[21] and Yahoo!.[22]

Contents 
1	History
2	Overview
2.1	Platform architecture
2.2	Industry support
3	Releases
4	Technical details
4.1	Threading
4.2	V8
4.3	Package management
4.4	Unified API
4.5	Event loop
5	Project governance
6	See also
7	References
8	Further reading
9	External links
History

Ryan Dahl, creator of Node.js, in 2010
Node.js was originally written by Ryan Dahl in 2009,[23] about thirteen years after the introduction of the first server-side JavaScript environment, Netscape's LiveWire Pro Web.[24] The initial release supported only Linux and Mac OS X. Its development and maintenance was led by Dahl and later sponsored by Joyent.[25]

Dahl was inspired to create Node.js after seeing a file upload progress bar on Flickr. The browser did not know how much of the file had been uploaded and had to query the Web server. Dahl desired an easier way.[6][26]

Dahl criticized the limited possibilities of the most popular web server in 2009, Apache HTTP Server, to handle a lot of concurrent connections (up to 10,000 and more) and the most common way of creating code (sequential programming), when code either blocked the entire process or implied multiple execution stacks in the case of simultaneous connections.[27]

Dahl demonstrated the project at the inaugural European JSConf on November 8, 2009.[28][29][30] Node.js combined Google's V8 JavaScript engine, an event loop, and a low-level I/O API.[31]

In January 2010, a package manager was introduced for the Node.js environment called npm.[32] The package manager makes it easier for programmers to publish and share source code of Node.js libraries and is designed to simplify installation, updating, and uninstallation of libraries.[31]

In June 2011, Microsoft and Joyent implemented a native Windows version of Node.js.[33] The first Node.js build supporting Windows was released in July 2011.

In January 2012, Dahl stepped aside, promoting coworker and npm creator Isaac Schlueter to manage the project.[34] In January 2014, Schlueter announced that Timothy J. Fontaine would lead the project.[35]

In December 2014, Fedor Indutny started io.js, a fork of Node.js. Due to the internal conflict over Joyent's governance, io.js was created as an open governance alternative with a separate technical committee.[36][37] Unlike Node.js,[38] the authors planned to keep io.js up-to-date with the latest releases of the Google V8 JavaScript engine.[39]

In February 2015, the intent to form a neutral Node.js Foundation was announced. By June 2015, the Node.js and io.js communities voted to work together under the Node.js Foundation.[40]

In September 2015, Node.js v0.12 and io.js v3.3 were merged back together into Node v4.0.[41] This brought V8 ES6 features into Node.js, and a long-term support release cycle.[42] As of 2016, the io.js website recommends that developers switch back to Node.js and that no further releases of io.js are planned due to the merger.[43]

Overview
Node.js allows the creation of Web servers and networking tools using JavaScript and a collection of "modules" that handle various core functionality.[28][31][44][45][46] Modules are provided for file system I/O, networking (DNS, HTTP, TCP, TLS/SSL, or UDP), binary data (buffers), cryptography functions, data streams, and other core functions.[31][45][47] Node.js's modules use an API designed to reduce the complexity of writing server applications.[31][45]

Node.js is officially supported on Linux, macOS, Microsoft Windows, SmartOS, FreeBSD, and IBM AIX.[3] The provided source code may also be built on similar operating systems or be modified by third parties to support others such as NonStop[48] and Unix servers. Alternatively, they can be written with CoffeeScript[49] (a JavaScript alternative), Dart or TypeScript (strongly typed forms of JavaScript), or any other language that can compile to JavaScript.[49][50]

Node.js is primarily used to build network programs such as Web servers.[44] The biggest difference between Node.js and PHP is that most functions in PHP block until completion (commands execute only after previous commands finish), while Node.js functions are non-blocking (commands execute concurrently or even in parallel,[51][52] and use callbacks to signal completion or failure).[44]

Platform architecture
Node.js brings event-driven programming to web servers, enabling development of fast web servers in JavaScript.[31] Developers can create highly scalable servers without using threading, by using a simplified model of event-driven programming that uses callbacks to signal the completion of a task.[31] Node.js connects the ease of a scripting language (JavaScript) with the power of Unix network programming.[31]

Node.js was built on the Google V8 JavaScript engine since it was open-sourced under the BSD license. It is extremely fast and proficient with internet fundamentals such as HTTP, DNS, TCP.[28] Also, JavaScript was a well-known language, making Node.js immediately accessible to the entire web development community.[28]

Industry support
There are thousands of open-source libraries for Node.js, most of them hosted on the npm website. The Node.js developer community has two main mailing lists and the IRC channel #node.js on freenode. There are multiple developer conferences and events that support the Node.js community including NodeConf, Node Interactive and Node Summit as well as a number of regional events.

The open-source community has developed web frameworks to accelerate the development of applications. Such frameworks include Connect, Express.js, Socket.IO, Koa.js, Hapi.js, Sails.js, Meteor, Derby, and many others.[31][53] Various packages have also been created for interfacing with other languages or runtime environments such as Microsoft .NET.[54]

Modern desktop IDEs provide editing and debugging features specifically for Node.js applications. Such IDEs include Atom, Brackets, JetBrains WebStorm,[55][56] Microsoft Visual Studio (with Node.js Tools for Visual Studio,[57] or TypeScript with Node definitions,[58][59][60][61]) NetBeans,[62] Nodeclipse Enide Studio [63] (Eclipse-based), and Visual Studio Code.[64][65] Certain online web-based IDEs also support Node.js, such as Codeanywhere, Codenvy, Cloud9 IDE, Koding, and the visual flow editor in Node-RED.

Releases
Release	Code name	Release date	LTS status	Active LTS start	Maintenance start	Maintenance end
v0.10.x		2013-03-11	End-of-life	-	2015-10-01	2016-10-31
v0.12.x		2015-02-06	End-of-life	-	2016-04-01	2016-12-31
4.x	Argon[66]	2015-09-08	End-of-life	2015-10-01	2017-04-01	2018-04-30
5.x		2015-10-29	No LTS	N/A	2016-06-30
6.x	Boron[66]	2016-04-26	Maintenance	2016-10-18	2018-04-30	April 2019
7.x		2016-10-25	No LTS	N/A	2017-06-30
8.x	Carbon[66]	2017-05-30	Active	2017-10-31	April 2019	December 2019
9.x		2017-10-01	No LTS	N/A	June 2018
10.x	Dubnium[66]	2018-04-24	Active	October 2018	April 2020	April 2021
11.x[66]		2018-10-23	No LTS	N/A	June 2019
New major releases of Node.js are cut from the GitHub master branch every six months. Even-numbered versions are cut in April and odd-numbered versions are cut in October. When a new odd version is released, the previous even version undergoes transition to Long Term Support (LTS), which gives that version 18 months of active support from the date it is designated LTS. After these 18 months expire, an LTS release receives an additional 12 months of maintenance support. An active version receives non-breaking backports of changes a few weeks after they land in the current release. A maintenance release only receives critical fixes and documentation updates.[66] The LTS Working Group manages strategy and policy in collaboration with the Technical Steering Committee of the Node.js Foundation.

Technical details

This section may be too technical for most readers to understand. Please help improve it to make it understandable to non-experts, without removing the technical details. (August 2015) (Learn how and when to remove this template message)
Node.js is a Javascript runtime environment that processes incoming requests in a loop, called the event loop.

Threading
Node.js operates on a single thread, using non-blocking I/O calls, allowing it to support tens of thousands of concurrent connections without incurring the cost of thread context switching.[67] The design of sharing a single thread among all the requests that use the observer pattern is intended for building highly concurrent applications, where any function performing I/O must use a callback. To accommodate the single-threaded event loop, Node.js uses the libuv libraryâ€”which, in turn, uses a fixed-sized thread pool that handles some of the non-blocking asynchronous I/O operations.[6]

A downside of this single-threaded approach is that Node.js doesn't allow vertical scaling by increasing the number of CPU cores of the machine it is running on without using an additional module, such as cluster,[51] StrongLoop Process Manager,[68] or pm2.[69] However, developers can increase the default number of threads in the libuv thread pool. The server operating system (OS) is likely to distribute these threads across multiple cores.[70]

A thread pool handles execution of parallel tasks in Node.js. The main thread call functions post tasks to the shared task queue, which threads in the thread pool pull and execute. Inherently non-blocking system functions such as networking translate to kernel-side non-blocking sockets, while inherently blocking system functions such as file I/O run in a blocking way on their own threads. When a thread in the thread pool completes a task, it informs the main thread of this, which in turn, wakes up and executes the registered callback. Since Node.js handles callbacks in serial on the main thread, long lasting computations and other CPU-bound tasks freeze the entire event-loop until completion.[citation needed]

V8
V8 is the JavaScript execution engine built for Google Chrome and open-sourced by Google in 2008. Written in C++, V8 compiles JavaScript source code to native machine code instead of interpreting it in real time.[6]

Node.js uses libuv to handle asynchronous events. Libuv is an abstraction layer for network and file system functionality on both Windows and POSIX-based systems such as Linux, macOS, OSS on NonStop, and Unix.

The core functionality of Node.js resides in a JavaScript library. The Node.js bindings, written in C++, connect these technologies to each other and to the operating system.

Package management
npm is the pre-installed package manager for the Node.js server platform. It installs Node.js programs from the npm registry, organizing the installation and management of third-party Node.js programs. Packages in the npm registry can range from simple helper libraries such as Lodash to task runners such as Grunt.

Unified API
Node.js can be combined with a browser, a database that supports JSON data (such as Postgres,[71] MongoDB, or CouchDB) and JSON for a unified JavaScript development stack. With the adaptation of what were essentially server-side development patterns such as MVC, MVP, MVVM, etc., Node.js allows the reuse of the same model and service interface between client-side and server-side.

Event loop
Node.js registers with the operating system so the OS notifies it of connections and issues a callback. Within the Node.js runtime, each connection is a small heap allocation. Traditionally, relatively heavyweight OS processes or threads handled each connection. Node.js uses an event loop for scalability, instead of processes or threads.[72] In contrast to other event-driven servers, Node.js's event loop does not need to be called explicitly. Instead callbacks are defined, and the server automatically enters the event loop at the end of the callback definition. Node.js exits the event loop when there are no further callbacks to be performed.

Project governance
In 2015, various branches of the greater Node.js community began working under the vendor-neutral Node.js Foundation. The stated purpose of the organization "is to enable widespread adoption and help accelerate development of Node.js and other related modules through an open governance model that encourages participation, technical contribution, and a framework for long-term stewardship by an ecosystem invested in Node.js' success."[73]

The Node.js Foundation Technical Steering Committee (TSC) is the technical governing body of the Node.js Foundation. The TSC is responsible for the core Node.js repo as well as dependent and adjacent projects. Generally the TSC delegates administration of these projects to working groups or committees.[74] The LTS group that manages long term supported releases is one such group. Other current groups include: Website, Streams, Build, Diagnostics, i18n, Evangelism, Docker, Addon API, Benchmarking, Post-mortem, Intl, Documentation, and Testing.[75]

In August, 2017, a governance breakdown precipitated efforts to repair the resulting damage and to create a path to future stability of governance.[76]

See also
	Free software portal
List of server-side JavaScript implementations
List of JavaScript libraries
MEAN (software bundle)
Online JavaScript IDE
Rhino (JavaScript engine)
Application server

Node.js
Node.js logo.svg
Original author(s)	Ryan Dahl
Developer(s)	Joyent
Initial release	May 27, 2009; 9 years ago[1]
Stable release	
10.4.0 / June 6, 2018; 6 days ago[2]
Repository	
https://github.com/nodejs/node
Edit this at Wikidata
Written in	C, C++, JavaScript
Operating system	Linux, macOS, Microsoft Windows, SmartOS, FreeBSD, IBM AIX[3]
Type	Run-time environment
License	MIT[4]
Website	nodejs.org
Node.js is an open-source, cross-platform JavaScript run-time environment that executes JavaScript code server-side. Historically, JavaScript was used primarily for client-side scripting, in which scripts written in JavaScript are embedded in a webpage's HTML and run client-side by a JavaScript engine in the user's web browser. Node.js lets developers use JavaScript for server-side scriptingâ€”running scripts server-side to produce dynamic web page content before the page is sent to the user's web browser. Consequently, Node.js represents a "JavaScript everywhere" paradigm,[5] unifying web application development around a single programming language, rather than different languages for server side and client side scripts.

Though .js is the conventional filename extension for JavaScript code, the name "Node.js" does not refer to a particular file in this context and is merely the name of the product. Node.js has an event-driven architecture capable of asynchronous I/O. These design choices aim to optimize throughput and scalability in web applications with many input/output operations, as well as for real-time Web applications (e.g., real-time communication programs and browser games).[6]

The Node.js distributed development project, governed by the Node.js Foundation,[7] is facilitated by the Linux Foundation's Collaborative Projects program.[8]

Corporate users of Node.js software include GoDaddy,[9] Groupon,[10] IBM,[11] LinkedIn,[12][13] Microsoft,[14][15] Netflix,[16] PayPal,[17][18] Rakuten, SAP, Tuenti,[19] Voxer,[20] Walmart,[21] and Yahoo!.[22]

Contents 
1	History
2	Overview
2.1	Platform architecture
2.2	Industry support
3	Releases
4	Technical details
4.1	Threading
4.2	V8
4.3	Package management
4.4	Unified API
4.5	Event loop
5	Project governance
6	See also
7	References
8	Further reading
9	External links
History

Ryan Dahl, creator of Node.js, in 2010
Node.js was originally written by Ryan Dahl in 2009,[23] about thirteen years after the introduction of the first server-side JavaScript environment, Netscape's LiveWire Pro Web.[24] The initial release supported only Linux and Mac OS X. Its development and maintenance was led by Dahl and later sponsored by Joyent.[25]

Dahl was inspired to create Node.js after seeing a file upload progress bar on Flickr. The browser did not know how much of the file had been uploaded and had to query the Web server. Dahl desired an easier way.[6][26]

Dahl criticized the limited possibilities of the most popular web server in 2009, Apache HTTP Server, to handle a lot of concurrent connections (up to 10,000 and more) and the most common way of creating code (sequential programming), when code either blocked the entire process or implied multiple execution stacks in the case of simultaneous connections.[27]

Dahl demonstrated the project at the inaugural European JSConf on November 8, 2009.[28][29][30] Node.js combined Google's V8 JavaScript engine, an event loop, and a low-level I/O API.[31]

In January 2010, a package manager was introduced for the Node.js environment called npm.[32] The package manager makes it easier for programmers to publish and share source code of Node.js libraries and is designed to simplify installation, updating, and uninstallation of libraries.[31]

In June 2011, Microsoft and Joyent implemented a native Windows version of Node.js.[33] The first Node.js build supporting Windows was released in July 2011.

In January 2012, Dahl stepped aside, promoting coworker and npm creator Isaac Schlueter to manage the project.[34] In January 2014, Schlueter announced that Timothy J. Fontaine would lead the project.[35]

In December 2014, Fedor Indutny started io.js, a fork of Node.js. Due to the internal conflict over Joyent's governance, io.js was created as an open governance alternative with a separate technical committee.[36][37] Unlike Node.js,[38] the authors planned to keep io.js up-to-date with the latest releases of the Google V8 JavaScript engine.[39]

In February 2015, the intent to form a neutral Node.js Foundation was announced. By June 2015, the Node.js and io.js communities voted to work together under the Node.js Foundation.[40]

In September 2015, Node.js v0.12 and io.js v3.3 were merged back together into Node v4.0.[41] This brought V8 ES6 features into Node.js, and a long-term support release cycle.[42] As of 2016, the io.js website recommends that developers switch back to Node.js and that no further releases of io.js are planned due to the merger.[43]

Overview
Node.js allows the creation of Web servers and networking tools using JavaScript and a collection of "modules" that handle various core functionality.[28][31][44][45][46] Modules are provided for file system I/O, networking (DNS, HTTP, TCP, TLS/SSL, or UDP), binary data (buffers), cryptography functions, data streams, and other core functions.[31][45][47] Node.js's modules use an API designed to reduce the complexity of writing server applications.[31][45]

Node.js is officially supported on Linux, macOS, Microsoft Windows, SmartOS, FreeBSD, and IBM AIX.[3] The provided source code may also be built on similar operating systems or be modified by third parties to support others such as NonStop[48] and Unix servers. Alternatively, they can be written with CoffeeScript[49] (a JavaScript alternative), Dart or TypeScript (strongly typed forms of JavaScript), or any other language that can compile to JavaScript.[49][50]

Node.js is primarily used to build network programs such as Web servers.[44] The biggest difference between Node.js and PHP is that most functions in PHP block until completion (commands execute only after previous commands finish), while Node.js functions are non-blocking (commands execute concurrently or even in parallel,[51][52] and use callbacks to signal completion or failure).[44]

Platform architecture
Node.js brings event-driven programming to web servers, enabling development of fast web servers in JavaScript.[31] Developers can create highly scalable servers without using threading, by using a simplified model of event-driven programming that uses callbacks to signal the completion of a task.[31] Node.js connects the ease of a scripting language (JavaScript) with the power of Unix network programming.[31]

Node.js was built on the Google V8 JavaScript engine since it was open-sourced under the BSD license. It is extremely fast and proficient with internet fundamentals such as HTTP, DNS, TCP.[28] Also, JavaScript was a well-known language, making Node.js immediately accessible to the entire web development community.[28]

Industry support
There are thousands of open-source libraries for Node.js, most of them hosted on the npm website. The Node.js developer community has two main mailing lists and the IRC channel #node.js on freenode. There are multiple developer conferences and events that support the Node.js community including NodeConf, Node Interactive and Node Summit as well as a number of regional events.

The open-source community has developed web frameworks to accelerate the development of applications. Such frameworks include Connect, Express.js, Socket.IO, Koa.js, Hapi.js, Sails.js, Meteor, Derby, and many others.[31][53] Various packages have also been created for interfacing with other languages or runtime environments such as Microsoft .NET.[54]

Modern desktop IDEs provide editing and debugging features specifically for Node.js applications. Such IDEs include Atom, Brackets, JetBrains WebStorm,[55][56] Microsoft Visual Studio (with Node.js Tools for Visual Studio,[57] or TypeScript with Node definitions,[58][59][60][61]) NetBeans,[62] Nodeclipse Enide Studio [63] (Eclipse-based), and Visual Studio Code.[64][65] Certain online web-based IDEs also support Node.js, such as Codeanywhere, Codenvy, Cloud9 IDE, Koding, and the visual flow editor in Node-RED.

Releases
Release	Code name	Release date	LTS status	Active LTS start	Maintenance start	Maintenance end
v0.10.x		2013-03-11	End-of-life	-	2015-10-01	2016-10-31
v0.12.x		2015-02-06	End-of-life	-	2016-04-01	2016-12-31
4.x	Argon[66]	2015-09-08	End-of-life	2015-10-01	2017-04-01	2018-04-30
5.x		2015-10-29	No LTS	N/A	2016-06-30
6.x	Boron[66]	2016-04-26	Maintenance	2016-10-18	2018-04-30	April 2019
7.x		2016-10-25	No LTS	N/A	2017-06-30
8.x	Carbon[66]	2017-05-30	Active	2017-10-31	April 2019	December 2019
9.x		2017-10-01	No LTS	N/A	June 2018
10.x	Dubnium[66]	2018-04-24	Active	October 2018	April 2020	April 2021
11.x[66]		2018-10-23	No LTS	N/A	June 2019
New major releases of Node.js are cut from the GitHub master branch every six months. Even-numbered versions are cut in April and odd-numbered versions are cut in October. When a new odd version is released, the previous even version undergoes transition to Long Term Support (LTS), which gives that version 18 months of active support from the date it is designated LTS. After these 18 months expire, an LTS release receives an additional 12 months of maintenance support. An active version receives non-breaking backports of changes a few weeks after they land in the current release. A maintenance release only receives critical fixes and documentation updates.[66] The LTS Working Group manages strategy and policy in collaboration with the Technical Steering Committee of the Node.js Foundation.

Technical details

This section may be too technical for most readers to understand. Please help improve it to make it understandable to non-experts, without removing the technical details. (August 2015) (Learn how and when to remove this template message)
Node.js is a Javascript runtime environment that processes incoming requests in a loop, called the event loop.

Threading
Node.js operates on a single thread, using non-blocking I/O calls, allowing it to support tens of thousands of concurrent connections without incurring the cost of thread context switching.[67] The design of sharing a single thread among all the requests that use the observer pattern is intended for building highly concurrent applications, where any function performing I/O must use a callback. To accommodate the single-threaded event loop, Node.js uses the libuv libraryâ€”which, in turn, uses a fixed-sized thread pool that handles some of the non-blocking asynchronous I/O operations.[6]

A downside of this single-threaded approach is that Node.js doesn't allow vertical scaling by increasing the number of CPU cores of the machine it is running on without using an additional module, such as cluster,[51] StrongLoop Process Manager,[68] or pm2.[69] However, developers can increase the default number of threads in the libuv thread pool. The server operating system (OS) is likely to distribute these threads across multiple cores.[70]

A thread pool handles execution of parallel tasks in Node.js. The main thread call functions post tasks to the shared task queue, which threads in the thread pool pull and execute. Inherently non-blocking system functions such as networking translate to kernel-side non-blocking sockets, while inherently blocking system functions such as file I/O run in a blocking way on their own threads. When a thread in the thread pool completes a task, it informs the main thread of this, which in turn, wakes up and executes the registered callback. Since Node.js handles callbacks in serial on the main thread, long lasting computations and other CPU-bound tasks freeze the entire event-loop until completion.[citation needed]

V8
V8 is the JavaScript execution engine built for Google Chrome and open-sourced by Google in 2008. Written in C++, V8 compiles JavaScript source code to native machine code instead of interpreting it in real time.[6]

Node.js uses libuv to handle asynchronous events. Libuv is an abstraction layer for network and file system functionality on both Windows and POSIX-based systems such as Linux, macOS, OSS on NonStop, and Unix.

The core functionality of Node.js resides in a JavaScript library. The Node.js bindings, written in C++, connect these technologies to each other and to the operating system.

Package management
npm is the pre-installed package manager for the Node.js server platform. It installs Node.js programs from the npm registry, organizing the installation and management of third-party Node.js programs. Packages in the npm registry can range from simple helper libraries such as Lodash to task runners such as Grunt.

Unified API
Node.js can be combined with a browser, a database that supports JSON data (such as Postgres,[71] MongoDB, or CouchDB) and JSON for a unified JavaScript development stack. With the adaptation of what were essentially server-side development patterns such as MVC, MVP, MVVM, etc., Node.js allows the reuse of the same model and service interface between client-side and server-side.

Event loop
Node.js registers with the operating system so the OS notifies it of connections and issues a callback. Within the Node.js runtime, each connection is a small heap allocation. Traditionally, relatively heavyweight OS processes or threads handled each connection. Node.js uses an event loop for scalability, instead of processes or threads.[72] In contrast to other event-driven servers, Node.js's event loop does not need to be called explicitly. Instead callbacks are defined, and the server automatically enters the event loop at the end of the callback definition. Node.js exits the event loop when there are no further callbacks to be performed.

Project governance
In 2015, various branches of the greater Node.js community began working under the vendor-neutral Node.js Foundation. The stated purpose of the organization "is to enable widespread adoption and help accelerate development of Node.js and other related modules through an open governance model that encourages participation, technical contribution, and a framework for long-term stewardship by an ecosystem invested in Node.js' success."[73]

The Node.js Foundation Technical Steering Committee (TSC) is the technical governing body of the Node.js Foundation. The TSC is responsible for the core Node.js repo as well as dependent and adjacent projects. Generally the TSC delegates administration of these projects to working groups or committees.[74] The LTS group that manages long term supported releases is one such group. Other current groups include: Website, Streams, Build, Diagnostics, i18n, Evangelism, Docker, Addon API, Benchmarking, Post-mortem, Intl, Documentation, and Testing.[75]

In August, 2017, a governance breakdown precipitated efforts to repair the resulting damage and to create a path to future stability of governance.[76]

See also
	Free software portal
List of server-side JavaScript implementations
List of JavaScript libraries
MEAN (software bundle)
Online JavaScript IDE
Rhino (JavaScript engine)
Application server

Node.js
Node.js logo.svg
Original author(s)	Ryan Dahl
Developer(s)	Joyent
Initial release	May 27, 2009; 9 years ago[1]
Stable release	
10.4.0 / June 6, 2018; 6 days ago[2]
Repository	
https://github.com/nodejs/node
Edit this at Wikidata
Written in	C, C++, JavaScript
Operating system	Linux, macOS, Microsoft Windows, SmartOS, FreeBSD, IBM AIX[3]
Type	Run-time environment
License	MIT[4]
Website	nodejs.org
Node.js is an open-source, cross-platform JavaScript run-time environment that executes JavaScript code server-side. Historically, JavaScript was used primarily for client-side scripting, in which scripts written in JavaScript are embedded in a webpage's HTML and run client-side by a JavaScript engine in the user's web browser. Node.js lets developers use JavaScript for server-side scriptingâ€”running scripts server-side to produce dynamic web page content before the page is sent to the user's web browser. Consequently, Node.js represents a "JavaScript everywhere" paradigm,[5] unifying web application development around a single programming language, rather than different languages for server side and client side scripts.

Though .js is the conventional filename extension for JavaScript code, the name "Node.js" does not refer to a particular file in this context and is merely the name of the product. Node.js has an event-driven architecture capable of asynchronous I/O. These design choices aim to optimize throughput and scalability in web applications with many input/output operations, as well as for real-time Web applications (e.g., real-time communication programs and browser games).[6]

The Node.js distributed development project, governed by the Node.js Foundation,[7] is facilitated by the Linux Foundation's Collaborative Projects program.[8]

Corporate users of Node.js software include GoDaddy,[9] Groupon,[10] IBM,[11] LinkedIn,[12][13] Microsoft,[14][15] Netflix,[16] PayPal,[17][18] Rakuten, SAP, Tuenti,[19] Voxer,[20] Walmart,[21] and Yahoo!.[22]

Contents 
1	History
2	Overview
2.1	Platform architecture
2.2	Industry support
3	Releases
4	Technical details
4.1	Threading
4.2	V8
4.3	Package management
4.4	Unified API
4.5	Event loop
5	Project governance
6	See also
7	References
8	Further reading
9	External links
History

Ryan Dahl, creator of Node.js, in 2010
Node.js was originally written by Ryan Dahl in 2009,[23] about thirteen years after the introduction of the first server-side JavaScript environment, Netscape's LiveWire Pro Web.[24] The initial release supported only Linux and Mac OS X. Its development and maintenance was led by Dahl and later sponsored by Joyent.[25]

Dahl was inspired to create Node.js after seeing a file upload progress bar on Flickr. The browser did not know how much of the file had been uploaded and had to query the Web server. Dahl desired an easier way.[6][26]

Dahl criticized the limited possibilities of the most popular web server in 2009, Apache HTTP Server, to handle a lot of concurrent connections (up to 10,000 and more) and the most common way of creating code (sequential programming), when code either blocked the entire process or implied multiple execution stacks in the case of simultaneous connections.[27]

Dahl demonstrated the project at the inaugural European JSConf on November 8, 2009.[28][29][30] Node.js combined Google's V8 JavaScript engine, an event loop, and a low-level I/O API.[31]

In January 2010, a package manager was introduced for the Node.js environment called npm.[32] The package manager makes it easier for programmers to publish and share source code of Node.js libraries and is designed to simplify installation, updating, and uninstallation of libraries.[31]

In June 2011, Microsoft and Joyent implemented a native Windows version of Node.js.[33] The first Node.js build supporting Windows was released in July 2011.

In January 2012, Dahl stepped aside, promoting coworker and npm creator Isaac Schlueter to manage the project.[34] In January 2014, Schlueter announced that Timothy J. Fontaine would lead the project.[35]

In December 2014, Fedor Indutny started io.js, a fork of Node.js. Due to the internal conflict over Joyent's governance, io.js was created as an open governance alternative with a separate technical committee.[36][37] Unlike Node.js,[38] the authors planned to keep io.js up-to-date with the latest releases of the Google V8 JavaScript engine.[39]

In February 2015, the intent to form a neutral Node.js Foundation was announced. By June 2015, the Node.js and io.js communities voted to work together under the Node.js Foundation.[40]

In September 2015, Node.js v0.12 and io.js v3.3 were merged back together into Node v4.0.[41] This brought V8 ES6 features into Node.js, and a long-term support release cycle.[42] As of 2016, the io.js website recommends that developers switch back to Node.js and that no further releases of io.js are planned due to the merger.[43]

Overview
Node.js allows the creation of Web servers and networking tools using JavaScript and a collection of "modules" that handle various core functionality.[28][31][44][45][46] Modules are provided for file system I/O, networking (DNS, HTTP, TCP, TLS/SSL, or UDP), binary data (buffers), cryptography functions, data streams, and other core functions.[31][45][47] Node.js's modules use an API designed to reduce the complexity of writing server applications.[31][45]

Node.js is officially supported on Linux, macOS, Microsoft Windows, SmartOS, FreeBSD, and IBM AIX.[3] The provided source code may also be built on similar operating systems or be modified by third parties to support others such as NonStop[48] and Unix servers. Alternatively, they can be written with CoffeeScript[49] (a JavaScript alternative), Dart or TypeScript (strongly typed forms of JavaScript), or any other language that can compile to JavaScript.[49][50]

Node.js is primarily used to build network programs such as Web servers.[44] The biggest difference between Node.js and PHP is that most functions in PHP block until completion (commands execute only after previous commands finish), while Node.js functions are non-blocking (commands execute concurrently or even in parallel,[51][52] and use callbacks to signal completion or failure).[44]

Platform architecture
Node.js brings event-driven programming to web servers, enabling development of fast web servers in JavaScript.[31] Developers can create highly scalable servers without using threading, by using a simplified model of event-driven programming that uses callbacks to signal the completion of a task.[31] Node.js connects the ease of a scripting language (JavaScript) with the power of Unix network programming.[31]

Node.js was built on the Google V8 JavaScript engine since it was open-sourced under the BSD license. It is extremely fast and proficient with internet fundamentals such as HTTP, DNS, TCP.[28] Also, JavaScript was a well-known language, making Node.js immediately accessible to the entire web development community.[28]

Industry support
There are thousands of open-source libraries for Node.js, most of them hosted on the npm website. The Node.js developer community has two main mailing lists and the IRC channel #node.js on freenode. There are multiple developer conferences and events that support the Node.js community including NodeConf, Node Interactive and Node Summit as well as a number of regional events.

The open-source community has developed web frameworks to accelerate the development of applications. Such frameworks include Connect, Express.js, Socket.IO, Koa.js, Hapi.js, Sails.js, Meteor, Derby, and many others.[31][53] Various packages have also been created for interfacing with other languages or runtime environments such as Microsoft .NET.[54]

Modern desktop IDEs provide editing and debugging features specifically for Node.js applications. Such IDEs include Atom, Brackets, JetBrains WebStorm,[55][56] Microsoft Visual Studio (with Node.js Tools for Visual Studio,[57] or TypeScript with Node definitions,[58][59][60][61]) NetBeans,[62] Nodeclipse Enide Studio [63] (Eclipse-based), and Visual Studio Code.[64][65] Certain online web-based IDEs also support Node.js, such as Codeanywhere, Codenvy, Cloud9 IDE, Koding, and the visual flow editor in Node-RED.

Releases
Release	Code name	Release date	LTS status	Active LTS start	Maintenance start	Maintenance end
v0.10.x		2013-03-11	End-of-life	-	2015-10-01	2016-10-31
v0.12.x		2015-02-06	End-of-life	-	2016-04-01	2016-12-31
4.x	Argon[66]	2015-09-08	End-of-life	2015-10-01	2017-04-01	2018-04-30
5.x		2015-10-29	No LTS	N/A	2016-06-30
6.x	Boron[66]	2016-04-26	Maintenance	2016-10-18	2018-04-30	April 2019
7.x		2016-10-25	No LTS	N/A	2017-06-30
8.x	Carbon[66]	2017-05-30	Active	2017-10-31	April 2019	December 2019
9.x		2017-10-01	No LTS	N/A	June 2018
10.x	Dubnium[66]	2018-04-24	Active	October 2018	April 2020	April 2021
11.x[66]		2018-10-23	No LTS	N/A	June 2019
New major releases of Node.js are cut from the GitHub master branch every six months. Even-numbered versions are cut in April and odd-numbered versions are cut in October. When a new odd version is released, the previous even version undergoes transition to Long Term Support (LTS), which gives that version 18 months of active support from the date it is designated LTS. After these 18 months expire, an LTS release receives an additional 12 months of maintenance support. An active version receives non-breaking backports of changes a few weeks after they land in the current release. A maintenance release only receives critical fixes and documentation updates.[66] The LTS Working Group manages strategy and policy in collaboration with the Technical Steering Committee of the Node.js Foundation.

Technical details

This section may be too technical for most readers to understand. Please help improve it to make it understandable to non-experts, without removing the technical details. (August 2015) (Learn how and when to remove this template message)
Node.js is a Javascript runtime environment that processes incoming requests in a loop, called the event loop.

Threading
Node.js operates on a single thread, using non-blocking I/O calls, allowing it to support tens of thousands of concurrent connections without incurring the cost of thread context switching.[67] The design of sharing a single thread among all the requests that use the observer pattern is intended for building highly concurrent applications, where any function performing I/O must use a callback. To accommodate the single-threaded event loop, Node.js uses the libuv libraryâ€”which, in turn, uses a fixed-sized thread pool that handles some of the non-blocking asynchronous I/O operations.[6]

A downside of this single-threaded approach is that Node.js doesn't allow vertical scaling by increasing the number of CPU cores of the machine it is running on without using an additional module, such as cluster,[51] StrongLoop Process Manager,[68] or pm2.[69] However, developers can increase the default number of threads in the libuv thread pool. The server operating system (OS) is likely to distribute these threads across multiple cores.[70]

A thread pool handles execution of parallel tasks in Node.js. The main thread call functions post tasks to the shared task queue, which threads in the thread pool pull and execute. Inherently non-blocking system functions such as networking translate to kernel-side non-blocking sockets, while inherently blocking system functions such as file I/O run in a blocking way on their own threads. When a thread in the thread pool completes a task, it informs the main thread of this, which in turn, wakes up and executes the registered callback. Since Node.js handles callbacks in serial on the main thread, long lasting computations and other CPU-bound tasks freeze the entire event-loop until completion.[citation needed]

V8
V8 is the JavaScript execution engine built for Google Chrome and open-sourced by Google in 2008. Written in C++, V8 compiles JavaScript source code to native machine code instead of interpreting it in real time.[6]

Node.js uses libuv to handle asynchronous events. Libuv is an abstraction layer for network and file system functionality on both Windows and POSIX-based systems such as Linux, macOS, OSS on NonStop, and Unix.

The core functionality of Node.js resides in a JavaScript library. The Node.js bindings, written in C++, connect these technologies to each other and to the operating system.

Package management
npm is the pre-installed package manager for the Node.js server platform. It installs Node.js programs from the npm registry, organizing the installation and management of third-party Node.js programs. Packages in the npm registry can range from simple helper libraries such as Lodash to task runners such as Grunt.

Unified API
Node.js can be combined with a browser, a database that supports JSON data (such as Postgres,[71] MongoDB, or CouchDB) and JSON for a unified JavaScript development stack. With the adaptation of what were essentially server-side development patterns such as MVC, MVP, MVVM, etc., Node.js allows the reuse of the same model and service interface between client-side and server-side.

Event loop
Node.js registers with the operating system so the OS notifies it of connections and issues a callback. Within the Node.js runtime, each connection is a small heap allocation. Traditionally, relatively heavyweight OS processes or threads handled each connection. Node.js uses an event loop for scalability, instead of processes or threads.[72] In contrast to other event-driven servers, Node.js's event loop does not need to be called explicitly. Instead callbacks are defined, and the server automatically enters the event loop at the end of the callback definition. Node.js exits the event loop when there are no further callbacks to be performed.

Project governance
In 2015, various branches of the greater Node.js community began working under the vendor-neutral Node.js Foundation. The stated purpose of the organization "is to enable widespread adoption and help accelerate development of Node.js and other related modules through an open governance model that encourages participation, technical contribution, and a framework for long-term stewardship by an ecosystem invested in Node.js' success."[73]

The Node.js Foundation Technical Steering Committee (TSC) is the technical governing body of the Node.js Foundation. The TSC is responsible for the core Node.js repo as well as dependent and adjacent projects. Generally the TSC delegates administration of these projects to working groups or committees.[74] The LTS group that manages long term supported releases is one such group. Other current groups include: Website, Streams, Build, Diagnostics, i18n, Evangelism, Docker, Addon API, Benchmarking, Post-mortem, Intl, Documentation, and Testing.[75]

In August, 2017, a governance breakdown precipitated efforts to repair the resulting damage and to create a path to future stability of governance.[76]

See also
	Free software portal
List of server-side JavaScript implementations
List of JavaScript libraries
MEAN (software bundle)
Online JavaScript IDE
Rhino (JavaScript engine)
Application server

Node.js
Node.js logo.svg
Original author(s)	Ryan Dahl
Developer(s)	Joyent
Initial release	May 27, 2009; 9 years ago[1]
Stable release	
10.4.0 / June 6, 2018; 6 days ago[2]
Repository	
https://github.com/nodejs/node
Edit this at Wikidata
Written in	C, C++, JavaScript
Operating system	Linux, macOS, Microsoft Windows, SmartOS, FreeBSD, IBM AIX[3]
Type	Run-time environment
License	MIT[4]
Website	nodejs.org
Node.js is an open-source, cross-platform JavaScript run-time environment that executes JavaScript code server-side. Historically, JavaScript was used primarily for client-side scripting, in which scripts written in JavaScript are embedded in a webpage's HTML and run client-side by a JavaScript engine in the user's web browser. Node.js lets developers use JavaScript for server-side scriptingâ€”running scripts server-side to produce dynamic web page content before the page is sent to the user's web browser. Consequently, Node.js represents a "JavaScript everywhere" paradigm,[5] unifying web application development around a single programming language, rather than different languages for server side and client side scripts.

Though .js is the conventional filename extension for JavaScript code, the name "Node.js" does not refer to a particular file in this context and is merely the name of the product. Node.js has an event-driven architecture capable of asynchronous I/O. These design choices aim to optimize throughput and scalability in web applications with many input/output operations, as well as for real-time Web applications (e.g., real-time communication programs and browser games).[6]

The Node.js distributed development project, governed by the Node.js Foundation,[7] is facilitated by the Linux Foundation's Collaborative Projects program.[8]

Corporate users of Node.js software include GoDaddy,[9] Groupon,[10] IBM,[11] LinkedIn,[12][13] Microsoft,[14][15] Netflix,[16] PayPal,[17][18] Rakuten, SAP, Tuenti,[19] Voxer,[20] Walmart,[21] and Yahoo!.[22]

Contents 
1	History
2	Overview
2.1	Platform architecture
2.2	Industry support
3	Releases
4	Technical details
4.1	Threading
4.2	V8
4.3	Package management
4.4	Unified API
4.5	Event loop
5	Project governance
6	See also
7	References
8	Further reading
9	External links
History

Ryan Dahl, creator of Node.js, in 2010
Node.js was originally written by Ryan Dahl in 2009,[23] about thirteen years after the introduction of the first server-side JavaScript environment, Netscape's LiveWire Pro Web.[24] The initial release supported only Linux and Mac OS X. Its development and maintenance was led by Dahl and later sponsored by Joyent.[25]

Dahl was inspired to create Node.js after seeing a file upload progress bar on Flickr. The browser did not know how much of the file had been uploaded and had to query the Web server. Dahl desired an easier way.[6][26]

Dahl criticized the limited possibilities of the most popular web server in 2009, Apache HTTP Server, to handle a lot of concurrent connections (up to 10,000 and more) and the most common way of creating code (sequential programming), when code either blocked the entire process or implied multiple execution stacks in the case of simultaneous connections.[27]

Dahl demonstrated the project at the inaugural European JSConf on November 8, 2009.[28][29][30] Node.js combined Google's V8 JavaScript engine, an event loop, and a low-level I/O API.[31]

In January 2010, a package manager was introduced for the Node.js environment called npm.[32] The package manager makes it easier for programmers to publish and share source code of Node.js libraries and is designed to simplify installation, updating, and uninstallation of libraries.[31]

In June 2011, Microsoft and Joyent implemented a native Windows version of Node.js.[33] The first Node.js build supporting Windows was released in July 2011.

In January 2012, Dahl stepped aside, promoting coworker and npm creator Isaac Schlueter to manage the project.[34] In January 2014, Schlueter announced that Timothy J. Fontaine would lead the project.[35]

In December 2014, Fedor Indutny started io.js, a fork of Node.js. Due to the internal conflict over Joyent's governance, io.js was created as an open governance alternative with a separate technical committee.[36][37] Unlike Node.js,[38] the authors planned to keep io.js up-to-date with the latest releases of the Google V8 JavaScript engine.[39]

In February 2015, the intent to form a neutral Node.js Foundation was announced. By June 2015, the Node.js and io.js communities voted to work together under the Node.js Foundation.[40]

In September 2015, Node.js v0.12 and io.js v3.3 were merged back together into Node v4.0.[41] This brought V8 ES6 features into Node.js, and a long-term support release cycle.[42] As of 2016, the io.js website recommends that developers switch back to Node.js and that no further releases of io.js are planned due to the merger.[43]

Overview
Node.js allows the creation of Web servers and networking tools using JavaScript and a collection of "modules" that handle various core functionality.[28][31][44][45][46] Modules are provided for file system I/O, networking (DNS, HTTP, TCP, TLS/SSL, or UDP), binary data (buffers), cryptography functions, data streams, and other core functions.[31][45][47] Node.js's modules use an API designed to reduce the complexity of writing server applications.[31][45]

Node.js is officially supported on Linux, macOS, Microsoft Windows, SmartOS, FreeBSD, and IBM AIX.[3] The provided source code may also be built on similar operating systems or be modified by third parties to support others such as NonStop[48] and Unix servers. Alternatively, they can be written with CoffeeScript[49] (a JavaScript alternative), Dart or TypeScript (strongly typed forms of JavaScript), or any other language that can compile to JavaScript.[49][50]

Node.js is primarily used to build network programs such as Web servers.[44] The biggest difference between Node.js and PHP is that most functions in PHP block until completion (commands execute only after previous commands finish), while Node.js functions are non-blocking (commands execute concurrently or even in parallel,[51][52] and use callbacks to signal completion or failure).[44]

Platform architecture
Node.js brings event-driven programming to web servers, enabling development of fast web servers in JavaScript.[31] Developers can create highly scalable servers without using threading, by using a simplified model of event-driven programming that uses callbacks to signal the completion of a task.[31] Node.js connects the ease of a scripting language (JavaScript) with the power of Unix network programming.[31]

Node.js was built on the Google V8 JavaScript engine since it was open-sourced under the BSD license. It is extremely fast and proficient with internet fundamentals such as HTTP, DNS, TCP.[28] Also, JavaScript was a well-known language, making Node.js immediately accessible to the entire web development community.[28]

Industry support
There are thousands of open-source libraries for Node.js, most of them hosted on the npm website. The Node.js developer community has two main mailing lists and the IRC channel #node.js on freenode. There are multiple developer conferences and events that support the Node.js community including NodeConf, Node Interactive and Node Summit as well as a number of regional events.

The open-source community has developed web frameworks to accelerate the development of applications. Such frameworks include Connect, Express.js, Socket.IO, Koa.js, Hapi.js, Sails.js, Meteor, Derby, and many others.[31][53] Various packages have also been created for interfacing with other languages or runtime environments such as Microsoft .NET.[54]

Modern desktop IDEs provide editing and debugging features specifically for Node.js applications. Such IDEs include Atom, Brackets, JetBrains WebStorm,[55][56] Microsoft Visual Studio (with Node.js Tools for Visual Studio,[57] or TypeScript with Node definitions,[58][59][60][61]) NetBeans,[62] Nodeclipse Enide Studio [63] (Eclipse-based), and Visual Studio Code.[64][65] Certain online web-based IDEs also support Node.js, such as Codeanywhere, Codenvy, Cloud9 IDE, Koding, and the visual flow editor in Node-RED.

Releases
Release	Code name	Release date	LTS status	Active LTS start	Maintenance start	Maintenance end
v0.10.x		2013-03-11	End-of-life	-	2015-10-01	2016-10-31
v0.12.x		2015-02-06	End-of-life	-	2016-04-01	2016-12-31
4.x	Argon[66]	2015-09-08	End-of-life	2015-10-01	2017-04-01	2018-04-30
5.x		2015-10-29	No LTS	N/A	2016-06-30
6.x	Boron[66]	2016-04-26	Maintenance	2016-10-18	2018-04-30	April 2019
7.x		2016-10-25	No LTS	N/A	2017-06-30
8.x	Carbon[66]	2017-05-30	Active	2017-10-31	April 2019	December 2019
9.x		2017-10-01	No LTS	N/A	June 2018
10.x	Dubnium[66]	2018-04-24	Active	October 2018	April 2020	April 2021
11.x[66]		2018-10-23	No LTS	N/A	June 2019
New major releases of Node.js are cut from the GitHub master branch every six months. Even-numbered versions are cut in April and odd-numbered versions are cut in October. When a new odd version is released, the previous even version undergoes transition to Long Term Support (LTS), which gives that version 18 months of active support from the date it is designated LTS. After these 18 months expire, an LTS release receives an additional 12 months of maintenance support. An active version receives non-breaking backports of changes a few weeks after they land in the current release. A maintenance release only receives critical fixes and documentation updates.[66] The LTS Working Group manages strategy and policy in collaboration with the Technical Steering Committee of the Node.js Foundation.

Technical details

This section may be too technical for most readers to understand. Please help improve it to make it understandable to non-experts, without removing the technical details. (August 2015) (Learn how and when to remove this template message)
Node.js is a Javascript runtime environment that processes incoming requests in a loop, called the event loop.

Threading
Node.js operates on a single thread, using non-blocking I/O calls, allowing it to support tens of thousands of concurrent connections without incurring the cost of thread context switching.[67] The design of sharing a single thread among all the requests that use the observer pattern is intended for building highly concurrent applications, where any function performing I/O must use a callback. To accommodate the single-threaded event loop, Node.js uses the libuv libraryâ€”which, in turn, uses a fixed-sized thread pool that handles some of the non-blocking asynchronous I/O operations.[6]

A downside of this single-threaded approach is that Node.js doesn't allow vertical scaling by increasing the number of CPU cores of the machine it is running on without using an additional module, such as cluster,[51] StrongLoop Process Manager,[68] or pm2.[69] However, developers can increase the default number of threads in the libuv thread pool. The server operating system (OS) is likely to distribute these threads across multiple cores.[70]

A thread pool handles execution of parallel tasks in Node.js. The main thread call functions post tasks to the shared task queue, which threads in the thread pool pull and execute. Inherently non-blocking system functions such as networking translate to kernel-side non-blocking sockets, while inherently blocking system functions such as file I/O run in a blocking way on their own threads. When a thread in the thread pool completes a task, it informs the main thread of this, which in turn, wakes up and executes the registered callback. Since Node.js handles callbacks in serial on the main thread, long lasting computations and other CPU-bound tasks freeze the entire event-loop until completion.[citation needed]

V8
V8 is the JavaScript execution engine built for Google Chrome and open-sourced by Google in 2008. Written in C++, V8 compiles JavaScript source code to native machine code instead of interpreting it in real time.[6]

Node.js uses libuv to handle asynchronous events. Libuv is an abstraction layer for network and file system functionality on both Windows and POSIX-based systems such as Linux, macOS, OSS on NonStop, and Unix.

The core functionality of Node.js resides in a JavaScript library. The Node.js bindings, written in C++, connect these technologies to each other and to the operating system.

Package management
npm is the pre-installed package manager for the Node.js server platform. It installs Node.js programs from the npm registry, organizing the installation and management of third-party Node.js programs. Packages in the npm registry can range from simple helper libraries such as Lodash to task runners such as Grunt.

Unified API
Node.js can be combined with a browser, a database that supports JSON data (such as Postgres,[71] MongoDB, or CouchDB) and JSON for a unified JavaScript development stack. With the adaptation of what were essentially server-side development patterns such as MVC, MVP, MVVM, etc., Node.js allows the reuse of the same model and service interface between client-side and server-side.

Event loop
Node.js registers with the operating system so the OS notifies it of connections and issues a callback. Within the Node.js runtime, each connection is a small heap allocation. Traditionally, relatively heavyweight OS processes or threads handled each connection. Node.js uses an event loop for scalability, instead of processes or threads.[72] In contrast to other event-driven servers, Node.js's event loop does not need to be called explicitly. Instead callbacks are defined, and the server automatically enters the event loop at the end of the callback definition. Node.js exits the event loop when there are no further callbacks to be performed.

Project governance
In 2015, various branches of the greater Node.js community began working under the vendor-neutral Node.js Foundation. The stated purpose of the organization "is to enable widespread adoption and help accelerate development of Node.js and other related modules through an open governance model that encourages participation, technical contribution, and a framework for long-term stewardship by an ecosystem invested in Node.js' success."[73]

The Node.js Foundation Technical Steering Committee (TSC) is the technical governing body of the Node.js Foundation. The TSC is responsible for the core Node.js repo as well as dependent and adjacent projects. Generally the TSC delegates administration of these projects to working groups or committees.[74] The LTS group that manages long term supported releases is one such group. Other current groups include: Website, Streams, Build, Diagnostics, i18n, Evangelism, Docker, Addon API, Benchmarking, Post-mortem, Intl, Documentation, and Testing.[75]

In August, 2017, a governance breakdown precipitated efforts to repair the resulting damage and to create a path to future stability of governance.[76]

See also
	Free software portal
List of server-side JavaScript implementations
List of JavaScript libraries
MEAN (software bundle)
Online JavaScript IDE
Rhino (JavaScript engine)
Application server

Node.js
Node.js logo.svg
Original author(s)	Ryan Dahl
Developer(s)	Joyent
Initial release	May 27, 2009; 9 years ago[1]
Stable release	
10.4.0 / June 6, 2018; 6 days ago[2]
Repository	
https://github.com/nodejs/node
Edit this at Wikidata
Written in	C, C++, JavaScript
Operating system	Linux, macOS, Microsoft Windows, SmartOS, FreeBSD, IBM AIX[3]
Type	Run-time environment
License	MIT[4]
Website	nodejs.org
Node.js is an open-source, cross-platform JavaScript run-time environment that executes JavaScript code server-side. Historically, JavaScript was used primarily for client-side scripting, in which scripts written in JavaScript are embedded in a webpage's HTML and run client-side by a JavaScript engine in the user's web browser. Node.js lets developers use JavaScript for server-side scriptingâ€”running scripts server-side to produce dynamic web page content before the page is sent to the user's web browser. Consequently, Node.js represents a "JavaScript everywhere" paradigm,[5] unifying web application development around a single programming language, rather than different languages for server side and client side scripts.

Though .js is the conventional filename extension for JavaScript code, the name "Node.js" does not refer to a particular file in this context and is merely the name of the product. Node.js has an event-driven architecture capable of asynchronous I/O. These design choices aim to optimize throughput and scalability in web applications with many input/output operations, as well as for real-time Web applications (e.g., real-time communication programs and browser games).[6]

The Node.js distributed development project, governed by the Node.js Foundation,[7] is facilitated by the Linux Foundation's Collaborative Projects program.[8]

Corporate users of Node.js software include GoDaddy,[9] Groupon,[10] IBM,[11] LinkedIn,[12][13] Microsoft,[14][15] Netflix,[16] PayPal,[17][18] Rakuten, SAP, Tuenti,[19] Voxer,[20] Walmart,[21] and Yahoo!.[22]

Contents 
1	History
2	Overview
2.1	Platform architecture
2.2	Industry support
3	Releases
4	Technical details
4.1	Threading
4.2	V8
4.3	Package management
4.4	Unified API
4.5	Event loop
5	Project governance
6	See also
7	References
8	Further reading
9	External links
History

Ryan Dahl, creator of Node.js, in 2010
Node.js was originally written by Ryan Dahl in 2009,[23] about thirteen years after the introduction of the first server-side JavaScript environment, Netscape's LiveWire Pro Web.[24] The initial release supported only Linux and Mac OS X. Its development and maintenance was led by Dahl and later sponsored by Joyent.[25]

Dahl was inspired to create Node.js after seeing a file upload progress bar on Flickr. The browser did not know how much of the file had been uploaded and had to query the Web server. Dahl desired an easier way.[6][26]

Dahl criticized the limited possibilities of the most popular web server in 2009, Apache HTTP Server, to handle a lot of concurrent connections (up to 10,000 and more) and the most common way of creating code (sequential programming), when code either blocked the entire process or implied multiple execution stacks in the case of simultaneous connections.[27]

Dahl demonstrated the project at the inaugural European JSConf on November 8, 2009.[28][29][30] Node.js combined Google's V8 JavaScript engine, an event loop, and a low-level I/O API.[31]

In January 2010, a package manager was introduced for the Node.js environment called npm.[32] The package manager makes it easier for programmers to publish and share source code of Node.js libraries and is designed to simplify installation, updating, and uninstallation of libraries.[31]

In June 2011, Microsoft and Joyent implemented a native Windows version of Node.js.[33] The first Node.js build supporting Windows was released in July 2011.

In January 2012, Dahl stepped aside, promoting coworker and npm creator Isaac Schlueter to manage the project.[34] In January 2014, Schlueter announced that Timothy J. Fontaine would lead the project.[35]

In December 2014, Fedor Indutny started io.js, a fork of Node.js. Due to the internal conflict over Joyent's governance, io.js was created as an open governance alternative with a separate technical committee.[36][37] Unlike Node.js,[38] the authors planned to keep io.js up-to-date with the latest releases of the Google V8 JavaScript engine.[39]

In February 2015, the intent to form a neutral Node.js Foundation was announced. By June 2015, the Node.js and io.js communities voted to work together under the Node.js Foundation.[40]

In September 2015, Node.js v0.12 and io.js v3.3 were merged back together into Node v4.0.[41] This brought V8 ES6 features into Node.js, and a long-term support release cycle.[42] As of 2016, the io.js website recommends that developers switch back to Node.js and that no further releases of io.js are planned due to the merger.[43]

Overview
Node.js allows the creation of Web servers and networking tools using JavaScript and a collection of "modules" that handle various core functionality.[28][31][44][45][46] Modules are provided for file system I/O, networking (DNS, HTTP, TCP, TLS/SSL, or UDP), binary data (buffers), cryptography functions, data streams, and other core functions.[31][45][47] Node.js's modules use an API designed to reduce the complexity of writing server applications.[31][45]

Node.js is officially supported on Linux, macOS, Microsoft Windows, SmartOS, FreeBSD, and IBM AIX.[3] The provided source code may also be built on similar operating systems or be modified by third parties to support others such as NonStop[48] and Unix servers. Alternatively, they can be written with CoffeeScript[49] (a JavaScript alternative), Dart or TypeScript (strongly typed forms of JavaScript), or any other language that can compile to JavaScript.[49][50]

Node.js is primarily used to build network programs such as Web servers.[44] The biggest difference between Node.js and PHP is that most functions in PHP block until completion (commands execute only after previous commands finish), while Node.js functions are non-blocking (commands execute concurrently or even in parallel,[51][52] and use callbacks to signal completion or failure).[44]

Platform architecture
Node.js brings event-driven programming to web servers, enabling development of fast web servers in JavaScript.[31] Developers can create highly scalable servers without using threading, by using a simplified model of event-driven programming that uses callbacks to signal the completion of a task.[31] Node.js connects the ease of a scripting language (JavaScript) with the power of Unix network programming.[31]

Node.js was built on the Google V8 JavaScript engine since it was open-sourced under the BSD license. It is extremely fast and proficient with internet fundamentals such as HTTP, DNS, TCP.[28] Also, JavaScript was a well-known language, making Node.js immediately accessible to the entire web development community.[28]

Industry support
There are thousands of open-source libraries for Node.js, most of them hosted on the npm website. The Node.js developer community has two main mailing lists and the IRC channel #node.js on freenode. There are multiple developer conferences and events that support the Node.js community including NodeConf, Node Interactive and Node Summit as well as a number of regional events.

The open-source community has developed web frameworks to accelerate the development of applications. Such frameworks include Connect, Express.js, Socket.IO, Koa.js, Hapi.js, Sails.js, Meteor, Derby, and many others.[31][53] Various packages have also been created for interfacing with other languages or runtime environments such as Microsoft .NET.[54]

Modern desktop IDEs provide editing and debugging features specifically for Node.js applications. Such IDEs include Atom, Brackets, JetBrains WebStorm,[55][56] Microsoft Visual Studio (with Node.js Tools for Visual Studio,[57] or TypeScript with Node definitions,[58][59][60][61]) NetBeans,[62] Nodeclipse Enide Studio [63] (Eclipse-based), and Visual Studio Code.[64][65] Certain online web-based IDEs also support Node.js, such as Codeanywhere, Codenvy, Cloud9 IDE, Koding, and the visual flow editor in Node-RED.

Releases
Release	Code name	Release date	LTS status	Active LTS start	Maintenance start	Maintenance end
v0.10.x		2013-03-11	End-of-life	-	2015-10-01	2016-10-31
v0.12.x		2015-02-06	End-of-life	-	2016-04-01	2016-12-31
4.x	Argon[66]	2015-09-08	End-of-life	2015-10-01	2017-04-01	2018-04-30
5.x		2015-10-29	No LTS	N/A	2016-06-30
6.x	Boron[66]	2016-04-26	Maintenance	2016-10-18	2018-04-30	April 2019
7.x		2016-10-25	No LTS	N/A	2017-06-30
8.x	Carbon[66]	2017-05-30	Active	2017-10-31	April 2019	December 2019
9.x		2017-10-01	No LTS	N/A	June 2018
10.x	Dubnium[66]	2018-04-24	Active	October 2018	April 2020	April 2021
11.x[66]		2018-10-23	No LTS	N/A	June 2019
New major releases of Node.js are cut from the GitHub master branch every six months. Even-numbered versions are cut in April and odd-numbered versions are cut in October. When a new odd version is released, the previous even version undergoes transition to Long Term Support (LTS), which gives that version 18 months of active support from the date it is designated LTS. After these 18 months expire, an LTS release receives an additional 12 months of maintenance support. An active version receives non-breaking backports of changes a few weeks after they land in the current release. A maintenance release only receives critical fixes and documentation updates.[66] The LTS Working Group manages strategy and policy in collaboration with the Technical Steering Committee of the Node.js Foundation.

Technical details

This section may be too technical for most readers to understand. Please help improve it to make it understandable to non-experts, without removing the technical details. (August 2015) (Learn how and when to remove this template message)
Node.js is a Javascript runtime environment that processes incoming requests in a loop, called the event loop.

Threading
Node.js operates on a single thread, using non-blocking I/O calls, allowing it to support tens of thousands of concurrent connections without incurring the cost of thread context switching.[67] The design of sharing a single thread among all the requests that use the observer pattern is intended for building highly concurrent applications, where any function performing I/O must use a callback. To accommodate the single-threaded event loop, Node.js uses the libuv libraryâ€”which, in turn, uses a fixed-sized thread pool that handles some of the non-blocking asynchronous I/O operations.[6]

A downside of this single-threaded approach is that Node.js doesn't allow vertical scaling by increasing the number of CPU cores of the machine it is running on without using an additional module, such as cluster,[51] StrongLoop Process Manager,[68] or pm2.[69] However, developers can increase the default number of threads in the libuv thread pool. The server operating system (OS) is likely to distribute these threads across multiple cores.[70]

A thread pool handles execution of parallel tasks in Node.js. The main thread call functions post tasks to the shared task queue, which threads in the thread pool pull and execute. Inherently non-blocking system functions such as networking translate to kernel-side non-blocking sockets, while inherently blocking system functions such as file I/O run in a blocking way on their own threads. When a thread in the thread pool completes a task, it informs the main thread of this, which in turn, wakes up and executes the registered callback. Since Node.js handles callbacks in serial on the main thread, long lasting computations and other CPU-bound tasks freeze the entire event-loop until completion.[citation needed]

V8
V8 is the JavaScript execution engine built for Google Chrome and open-sourced by Google in 2008. Written in C++, V8 compiles JavaScript source code to native machine code instead of interpreting it in real time.[6]

Node.js uses libuv to handle asynchronous events. Libuv is an abstraction layer for network and file system functionality on both Windows and POSIX-based systems such as Linux, macOS, OSS on NonStop, and Unix.

The core functionality of Node.js resides in a JavaScript library. The Node.js bindings, written in C++, connect these technologies to each other and to the operating system.

Package management
npm is the pre-installed package manager for the Node.js server platform. It installs Node.js programs from the npm registry, organizing the installation and management of third-party Node.js programs. Packages in the npm registry can range from simple helper libraries such as Lodash to task runners such as Grunt.

Unified API
Node.js can be combined with a browser, a database that supports JSON data (such as Postgres,[71] MongoDB, or CouchDB) and JSON for a unified JavaScript development stack. With the adaptation of what were essentially server-side development patterns such as MVC, MVP, MVVM, etc., Node.js allows the reuse of the same model and service interface between client-side and server-side.

Event loop
Node.js registers with the operating system so the OS notifies it of connections and issues a callback. Within the Node.js runtime, each connection is a small heap allocation. Traditionally, relatively heavyweight OS processes or threads handled each connection. Node.js uses an event loop for scalability, instead of processes or threads.[72] In contrast to other event-driven servers, Node.js's event loop does not need to be called explicitly. Instead callbacks are defined, and the server automatically enters the event loop at the end of the callback definition. Node.js exits the event loop when there are no further callbacks to be performed.

Project governance
In 2015, various branches of the greater Node.js community began working under the vendor-neutral Node.js Foundation. The stated purpose of the organization "is to enable widespread adoption and help accelerate development of Node.js and other related modules through an open governance model that encourages participation, technical contribution, and a framework for long-term stewardship by an ecosystem invested in Node.js' success."[73]

The Node.js Foundation Technical Steering Committee (TSC) is the technical governing body of the Node.js Foundation. The TSC is responsible for the core Node.js repo as well as dependent and adjacent projects. Generally the TSC delegates administration of these projects to working groups or committees.[74] The LTS group that manages long term supported releases is one such group. Other current groups include: Website, Streams, Build, Diagnostics, i18n, Evangelism, Docker, Addon API, Benchmarking, Post-mortem, Intl, Documentation, and Testing.[75]

In August, 2017, a governance breakdown precipitated efforts to repair the resulting damage and to create a path to future stability of governance.[76]

See also
	Free software portal
List of server-side JavaScript implementations
List of JavaScript libraries
MEAN (software bundle)
Online JavaScript IDE
Rhino (JavaScript engine)
Application server

Node.js
Node.js logo.svg
Original author(s)	Ryan Dahl
Developer(s)	Joyent
Initial release	May 27, 2009; 9 years ago[1]
Stable release	
10.4.0 / June 6, 2018; 6 days ago[2]
Repository	
https://github.com/nodejs/node
Edit this at Wikidata
Written in	C, C++, JavaScript
Operating system	Linux, macOS, Microsoft Windows, SmartOS, FreeBSD, IBM AIX[3]
Type	Run-time environment
License	MIT[4]
Website	nodejs.org
Node.js is an open-source, cross-platform JavaScript run-time environment that executes JavaScript code server-side. Historically, JavaScript was used primarily for client-side scripting, in which scripts written in JavaScript are embedded in a webpage's HTML and run client-side by a JavaScript engine in the user's web browser. Node.js lets developers use JavaScript for server-side scriptingâ€”running scripts server-side to produce dynamic web page content before the page is sent to the user's web browser. Consequently, Node.js represents a "JavaScript everywhere" paradigm,[5] unifying web application development around a single programming language, rather than different languages for server side and client side scripts.

Though .js is the conventional filename extension for JavaScript code, the name "Node.js" does not refer to a particular file in this context and is merely the name of the product. Node.js has an event-driven architecture capable of asynchronous I/O. These design choices aim to optimize throughput and scalability in web applications with many input/output operations, as well as for real-time Web applications (e.g., real-time communication programs and browser games).[6]

The Node.js distributed development project, governed by the Node.js Foundation,[7] is facilitated by the Linux Foundation's Collaborative Projects program.[8]

Corporate users of Node.js software include GoDaddy,[9] Groupon,[10] IBM,[11] LinkedIn,[12][13] Microsoft,[14][15] Netflix,[16] PayPal,[17][18] Rakuten, SAP, Tuenti,[19] Voxer,[20] Walmart,[21] and Yahoo!.[22]

Contents 
1	History
2	Overview
2.1	Platform architecture
2.2	Industry support
3	Releases
4	Technical details
4.1	Threading
4.2	V8
4.3	Package management
4.4	Unified API
4.5	Event loop
5	Project governance
6	See also
7	References
8	Further reading
9	External links
History

Ryan Dahl, creator of Node.js, in 2010
Node.js was originally written by Ryan Dahl in 2009,[23] about thirteen years after the introduction of the first server-side JavaScript environment, Netscape's LiveWire Pro Web.[24] The initial release supported only Linux and Mac OS X. Its development and maintenance was led by Dahl and later sponsored by Joyent.[25]

Dahl was inspired to create Node.js after seeing a file upload progress bar on Flickr. The browser did not know how much of the file had been uploaded and had to query the Web server. Dahl desired an easier way.[6][26]

Dahl criticized the limited possibilities of the most popular web server in 2009, Apache HTTP Server, to handle a lot of concurrent connections (up to 10,000 and more) and the most common way of creating code (sequential programming), when code either blocked the entire process or implied multiple execution stacks in the case of simultaneous connections.[27]

Dahl demonstrated the project at the inaugural European JSConf on November 8, 2009.[28][29][30] Node.js combined Google's V8 JavaScript engine, an event loop, and a low-level I/O API.[31]

In January 2010, a package manager was introduced for the Node.js environment called npm.[32] The package manager makes it easier for programmers to publish and share source code of Node.js libraries and is designed to simplify installation, updating, and uninstallation of libraries.[31]

In June 2011, Microsoft and Joyent implemented a native Windows version of Node.js.[33] The first Node.js build supporting Windows was released in July 2011.

In January 2012, Dahl stepped aside, promoting coworker and npm creator Isaac Schlueter to manage the project.[34] In January 2014, Schlueter announced that Timothy J. Fontaine would lead the project.[35]

In December 2014, Fedor Indutny started io.js, a fork of Node.js. Due to the internal conflict over Joyent's governance, io.js was created as an open governance alternative with a separate technical committee.[36][37] Unlike Node.js,[38] the authors planned to keep io.js up-to-date with the latest releases of the Google V8 JavaScript engine.[39]

In February 2015, the intent to form a neutral Node.js Foundation was announced. By June 2015, the Node.js and io.js communities voted to work together under the Node.js Foundation.[40]

In September 2015, Node.js v0.12 and io.js v3.3 were merged back together into Node v4.0.[41] This brought V8 ES6 features into Node.js, and a long-term support release cycle.[42] As of 2016, the io.js website recommends that developers switch back to Node.js and that no further releases of io.js are planned due to the merger.[43]

Overview
Node.js allows the creation of Web servers and networking tools using JavaScript and a collection of "modules" that handle various core functionality.[28][31][44][45][46] Modules are provided for file system I/O, networking (DNS, HTTP, TCP, TLS/SSL, or UDP), binary data (buffers), cryptography functions, data streams, and other core functions.[31][45][47] Node.js's modules use an API designed to reduce the complexity of writing server applications.[31][45]

Node.js is officially supported on Linux, macOS, Microsoft Windows, SmartOS, FreeBSD, and IBM AIX.[3] The provided source code may also be built on similar operating systems or be modified by third parties to support others such as NonStop[48] and Unix servers. Alternatively, they can be written with CoffeeScript[49] (a JavaScript alternative), Dart or TypeScript (strongly typed forms of JavaScript), or any other language that can compile to JavaScript.[49][50]

Node.js is primarily used to build network programs such as Web servers.[44] The biggest difference between Node.js and PHP is that most functions in PHP block until completion (commands execute only after previous commands finish), while Node.js functions are non-blocking (commands execute concurrently or even in parallel,[51][52] and use callbacks to signal completion or failure).[44]

Platform architecture
Node.js brings event-driven programming to web servers, enabling development of fast web servers in JavaScript.[31] Developers can create highly scalable servers without using threading, by using a simplified model of event-driven programming that uses callbacks to signal the completion of a task.[31] Node.js connects the ease of a scripting language (JavaScript) with the power of Unix network programming.[31]

Node.js was built on the Google V8 JavaScript engine since it was open-sourced under the BSD license. It is extremely fast and proficient with internet fundamentals such as HTTP, DNS, TCP.[28] Also, JavaScript was a well-known language, making Node.js immediately accessible to the entire web development community.[28]

Industry support
There are thousands of open-source libraries for Node.js, most of them hosted on the npm website. The Node.js developer community has two main mailing lists and the IRC channel #node.js on freenode. There are multiple developer conferences and events that support the Node.js community including NodeConf, Node Interactive and Node Summit as well as a number of regional events.

The open-source community has developed web frameworks to accelerate the development of applications. Such frameworks include Connect, Express.js, Socket.IO, Koa.js, Hapi.js, Sails.js, Meteor, Derby, and many others.[31][53] Various packages have also been created for interfacing with other languages or runtime environments such as Microsoft .NET.[54]

Modern desktop IDEs provide editing and debugging features specifically for Node.js applications. Such IDEs include Atom, Brackets, JetBrains WebStorm,[55][56] Microsoft Visual Studio (with Node.js Tools for Visual Studio,[57] or TypeScript with Node definitions,[58][59][60][61]) NetBeans,[62] Nodeclipse Enide Studio [63] (Eclipse-based), and Visual Studio Code.[64][65] Certain online web-based IDEs also support Node.js, such as Codeanywhere, Codenvy, Cloud9 IDE, Koding, and the visual flow editor in Node-RED.

Releases
Release	Code name	Release date	LTS status	Active LTS start	Maintenance start	Maintenance end
v0.10.x		2013-03-11	End-of-life	-	2015-10-01	2016-10-31
v0.12.x		2015-02-06	End-of-life	-	2016-04-01	2016-12-31
4.x	Argon[66]	2015-09-08	End-of-life	2015-10-01	2017-04-01	2018-04-30
5.x		2015-10-29	No LTS	N/A	2016-06-30
6.x	Boron[66]	2016-04-26	Maintenance	2016-10-18	2018-04-30	April 2019
7.x		2016-10-25	No LTS	N/A	2017-06-30
8.x	Carbon[66]	2017-05-30	Active	2017-10-31	April 2019	December 2019
9.x		2017-10-01	No LTS	N/A	June 2018
10.x	Dubnium[66]	2018-04-24	Active	October 2018	April 2020	April 2021
11.x[66]		2018-10-23	No LTS	N/A	June 2019
New major releases of Node.js are cut from the GitHub master branch every six months. Even-numbered versions are cut in April and odd-numbered versions are cut in October. When a new odd version is released, the previous even version undergoes transition to Long Term Support (LTS), which gives that version 18 months of active support from the date it is designated LTS. After these 18 months expire, an LTS release receives an additional 12 months of maintenance support. An active version receives non-breaking backports of changes a few weeks after they land in the current release. A maintenance release only receives critical fixes and documentation updates.[66] The LTS Working Group manages strategy and policy in collaboration with the Technical Steering Committee of the Node.js Foundation.

Technical details

This section may be too technical for most readers to understand. Please help improve it to make it understandable to non-experts, without removing the technical details. (August 2015) (Learn how and when to remove this template message)
Node.js is a Javascript runtime environment that processes incoming requests in a loop, called the event loop.

Threading
Node.js operates on a single thread, using non-blocking I/O calls, allowing it to support tens of thousands of concurrent connections without incurring the cost of thread context switching.[67] The design of sharing a single thread among all the requests that use the observer pattern is intended for building highly concurrent applications, where any function performing I/O must use a callback. To accommodate the single-threaded event loop, Node.js uses the libuv libraryâ€”which, in turn, uses a fixed-sized thread pool that handles some of the non-blocking asynchronous I/O operations.[6]

A downside of this single-threaded approach is that Node.js doesn't allow vertical scaling by increasing the number of CPU cores of the machine it is running on without using an additional module, such as cluster,[51] StrongLoop Process Manager,[68] or pm2.[69] However, developers can increase the default number of threads in the libuv thread pool. The server operating system (OS) is likely to distribute these threads across multiple cores.[70]

A thread pool handles execution of parallel tasks in Node.js. The main thread call functions post tasks to the shared task queue, which threads in the thread pool pull and execute. Inherently non-blocking system functions such as networking translate to kernel-side non-blocking sockets, while inherently blocking system functions such as file I/O run in a blocking way on their own threads. When a thread in the thread pool completes a task, it informs the main thread of this, which in turn, wakes up and executes the registered callback. Since Node.js handles callbacks in serial on the main thread, long lasting computations and other CPU-bound tasks freeze the entire event-loop until completion.[citation needed]

V8
V8 is the JavaScript execution engine built for Google Chrome and open-sourced by Google in 2008. Written in C++, V8 compiles JavaScript source code to native machine code instead of interpreting it in real time.[6]

Node.js uses libuv to handle asynchronous events. Libuv is an abstraction layer for network and file system functionality on both Windows and POSIX-based systems such as Linux, macOS, OSS on NonStop, and Unix.

The core functionality of Node.js resides in a JavaScript library. The Node.js bindings, written in C++, connect these technologies to each other and to the operating system.

Package management
npm is the pre-installed package manager for the Node.js server platform. It installs Node.js programs from the npm registry, organizing the installation and management of third-party Node.js programs. Packages in the npm registry can range from simple helper libraries such as Lodash to task runners such as Grunt.

Unified API
Node.js can be combined with a browser, a database that supports JSON data (such as Postgres,[71] MongoDB, or CouchDB) and JSON for a unified JavaScript development stack. With the adaptation of what were essentially server-side development patterns such as MVC, MVP, MVVM, etc., Node.js allows the reuse of the same model and service interface between client-side and server-side.

Event loop
Node.js registers with the operating system so the OS notifies it of connections and issues a callback. Within the Node.js runtime, each connection is a small heap allocation. Traditionally, relatively heavyweight OS processes or threads handled each connection. Node.js uses an event loop for scalability, instead of processes or threads.[72] In contrast to other event-driven servers, Node.js's event loop does not need to be called explicitly. Instead callbacks are defined, and the server automatically enters the event loop at the end of the callback definition. Node.js exits the event loop when there are no further callbacks to be performed.

Project governance
In 2015, various branches of the greater Node.js community began working under the vendor-neutral Node.js Foundation. The stated purpose of the organization "is to enable widespread adoption and help accelerate development of Node.js and other related modules through an open governance model that encourages participation, technical contribution, and a framework for long-term stewardship by an ecosystem invested in Node.js' success."[73]

The Node.js Foundation Technical Steering Committee (TSC) is the technical governing body of the Node.js Foundation. The TSC is responsible for the core Node.js repo as well as dependent and adjacent projects. Generally the TSC delegates administration of these projects to working groups or committees.[74] The LTS group that manages long term supported releases is one such group. Other current groups include: Website, Streams, Build, Diagnostics, i18n, Evangelism, Docker, Addon API, Benchmarking, Post-mortem, Intl, Documentation, and Testing.[75]

In August, 2017, a governance breakdown precipitated efforts to repair the resulting damage and to create a path to future stability of governance.[76]

See also
	Free software portal
List of server-side JavaScript implementations
List of JavaScript libraries
MEAN (software bundle)
Online JavaScript IDE
Rhino (JavaScript engine)
Application server

Node.js
Node.js logo.svg
Original author(s)	Ryan Dahl
Developer(s)	Joyent
Initial release	May 27, 2009; 9 years ago[1]
Stable release	
10.4.0 / June 6, 2018; 6 days ago[2]
Repository	
https://github.com/nodejs/node
Edit this at Wikidata
Written in	C, C++, JavaScript
Operating system	Linux, macOS, Microsoft Windows, SmartOS, FreeBSD, IBM AIX[3]
Type	Run-time environment
License	MIT[4]
Website	nodejs.org
Node.js is an open-source, cross-platform JavaScript run-time environment that executes JavaScript code server-side. Historically, JavaScript was used primarily for client-side scripting, in which scripts written in JavaScript are embedded in a webpage's HTML and run client-side by a JavaScript engine in the user's web browser. Node.js lets developers use JavaScript for server-side scriptingâ€”running scripts server-side to produce dynamic web page content before the page is sent to the user's web browser. Consequently, Node.js represents a "JavaScript everywhere" paradigm,[5] unifying web application development around a single programming language, rather than different languages for server side and client side scripts.

Though .js is the conventional filename extension for JavaScript code, the name "Node.js" does not refer to a particular file in this context and is merely the name of the product. Node.js has an event-driven architecture capable of asynchronous I/O. These design choices aim to optimize throughput and scalability in web applications with many input/output operations, as well as for real-time Web applications (e.g., real-time communication programs and browser games).[6]

The Node.js distributed development project, governed by the Node.js Foundation,[7] is facilitated by the Linux Foundation's Collaborative Projects program.[8]

Corporate users of Node.js software include GoDaddy,[9] Groupon,[10] IBM,[11] LinkedIn,[12][13] Microsoft,[14][15] Netflix,[16] PayPal,[17][18] Rakuten, SAP, Tuenti,[19] Voxer,[20] Walmart,[21] and Yahoo!.[22]

Contents 
1	History
2	Overview
2.1	Platform architecture
2.2	Industry support
3	Releases
4	Technical details
4.1	Threading
4.2	V8
4.3	Package management
4.4	Unified API
4.5	Event loop
5	Project governance
6	See also
7	References
8	Further reading
9	External links
History

Ryan Dahl, creator of Node.js, in 2010
Node.js was originally written by Ryan Dahl in 2009,[23] about thirteen years after the introduction of the first server-side JavaScript environment, Netscape's LiveWire Pro Web.[24] The initial release supported only Linux and Mac OS X. Its development and maintenance was led by Dahl and later sponsored by Joyent.[25]

Dahl was inspired to create Node.js after seeing a file upload progress bar on Flickr. The browser did not know how much of the file had been uploaded and had to query the Web server. Dahl desired an easier way.[6][26]

Dahl criticized the limited possibilities of the most popular web server in 2009, Apache HTTP Server, to handle a lot of concurrent connections (up to 10,000 and more) and the most common way of creating code (sequential programming), when code either blocked the entire process or implied multiple execution stacks in the case of simultaneous connections.[27]

Dahl demonstrated the project at the inaugural European JSConf on November 8, 2009.[28][29][30] Node.js combined Google's V8 JavaScript engine, an event loop, and a low-level I/O API.[31]

In January 2010, a package manager was introduced for the Node.js environment called npm.[32] The package manager makes it easier for programmers to publish and share source code of Node.js libraries and is designed to simplify installation, updating, and uninstallation of libraries.[31]

In June 2011, Microsoft and Joyent implemented a native Windows version of Node.js.[33] The first Node.js build supporting Windows was released in July 2011.

In January 2012, Dahl stepped aside, promoting coworker and npm creator Isaac Schlueter to manage the project.[34] In January 2014, Schlueter announced that Timothy J. Fontaine would lead the project.[35]

In December 2014, Fedor Indutny started io.js, a fork of Node.js. Due to the internal conflict over Joyent's governance, io.js was created as an open governance alternative with a separate technical committee.[36][37] Unlike Node.js,[38] the authors planned to keep io.js up-to-date with the latest releases of the Google V8 JavaScript engine.[39]

In February 2015, the intent to form a neutral Node.js Foundation was announced. By June 2015, the Node.js and io.js communities voted to work together under the Node.js Foundation.[40]

In September 2015, Node.js v0.12 and io.js v3.3 were merged back together into Node v4.0.[41] This brought V8 ES6 features into Node.js, and a long-term support release cycle.[42] As of 2016, the io.js website recommends that developers switch back to Node.js and that no further releases of io.js are planned due to the merger.[43]

Overview
Node.js allows the creation of Web servers and networking tools using JavaScript and a collection of "modules" that handle various core functionality.[28][31][44][45][46] Modules are provided for file system I/O, networking (DNS, HTTP, TCP, TLS/SSL, or UDP), binary data (buffers), cryptography functions, data streams, and other core functions.[31][45][47] Node.js's modules use an API designed to reduce the complexity of writing server applications.[31][45]

Node.js is officially supported on Linux, macOS, Microsoft Windows, SmartOS, FreeBSD, and IBM AIX.[3] The provided source code may also be built on similar operating systems or be modified by third parties to support others such as NonStop[48] and Unix servers. Alternatively, they can be written with CoffeeScript[49] (a JavaScript alternative), Dart or TypeScript (strongly typed forms of JavaScript), or any other language that can compile to JavaScript.[49][50]

Node.js is primarily used to build network programs such as Web servers.[44] The biggest difference between Node.js and PHP is that most functions in PHP block until completion (commands execute only after previous commands finish), while Node.js functions are non-blocking (commands execute concurrently or even in parallel,[51][52] and use callbacks to signal completion or failure).[44]

Platform architecture
Node.js brings event-driven programming to web servers, enabling development of fast web servers in JavaScript.[31] Developers can create highly scalable servers without using threading, by using a simplified model of event-driven programming that uses callbacks to signal the completion of a task.[31] Node.js connects the ease of a scripting language (JavaScript) with the power of Unix network programming.[31]

Node.js was built on the Google V8 JavaScript engine since it was open-sourced under the BSD license. It is extremely fast and proficient with internet fundamentals such as HTTP, DNS, TCP.[28] Also, JavaScript was a well-known language, making Node.js immediately accessible to the entire web development community.[28]

Industry support
There are thousands of open-source libraries for Node.js, most of them hosted on the npm website. The Node.js developer community has two main mailing lists and the IRC channel #node.js on freenode. There are multiple developer conferences and events that support the Node.js community including NodeConf, Node Interactive and Node Summit as well as a number of regional events.

The open-source community has developed web frameworks to accelerate the development of applications. Such frameworks include Connect, Express.js, Socket.IO, Koa.js, Hapi.js, Sails.js, Meteor, Derby, and many others.[31][53] Various packages have also been created for interfacing with other languages or runtime environments such as Microsoft .NET.[54]

Modern desktop IDEs provide editing and debugging features specifically for Node.js applications. Such IDEs include Atom, Brackets, JetBrains WebStorm,[55][56] Microsoft Visual Studio (with Node.js Tools for Visual Studio,[57] or TypeScript with Node definitions,[58][59][60][61]) NetBeans,[62] Nodeclipse Enide Studio [63] (Eclipse-based), and Visual Studio Code.[64][65] Certain online web-based IDEs also support Node.js, such as Codeanywhere, Codenvy, Cloud9 IDE, Koding, and the visual flow editor in Node-RED.

Releases
Release	Code name	Release date	LTS status	Active LTS start	Maintenance start	Maintenance end
v0.10.x		2013-03-11	End-of-life	-	2015-10-01	2016-10-31
v0.12.x		2015-02-06	End-of-life	-	2016-04-01	2016-12-31
4.x	Argon[66]	2015-09-08	End-of-life	2015-10-01	2017-04-01	2018-04-30
5.x		2015-10-29	No LTS	N/A	2016-06-30
6.x	Boron[66]	2016-04-26	Maintenance	2016-10-18	2018-04-30	April 2019
7.x		2016-10-25	No LTS	N/A	2017-06-30
8.x	Carbon[66]	2017-05-30	Active	2017-10-31	April 2019	December 2019
9.x		2017-10-01	No LTS	N/A	June 2018
10.x	Dubnium[66]	2018-04-24	Active	October 2018	April 2020	April 2021
11.x[66]		2018-10-23	No LTS	N/A	June 2019
New major releases of Node.js are cut from the GitHub master branch every six months. Even-numbered versions are cut in April and odd-numbered versions are cut in October. When a new odd version is released, the previous even version undergoes transition to Long Term Support (LTS), which gives that version 18 months of active support from the date it is designated LTS. After these 18 months expire, an LTS release receives an additional 12 months of maintenance support. An active version receives non-breaking backports of changes a few weeks after they land in the current release. A maintenance release only receives critical fixes and documentation updates.[66] The LTS Working Group manages strategy and policy in collaboration with the Technical Steering Committee of the Node.js Foundation.

Technical details

This section may be too technical for most readers to understand. Please help improve it to make it understandable to non-experts, without removing the technical details. (August 2015) (Learn how and when to remove this template message)
Node.js is a Javascript runtime environment that processes incoming requests in a loop, called the event loop.

Threading
Node.js operates on a single thread, using non-blocking I/O calls, allowing it to support tens of thousands of concurrent connections without incurring the cost of thread context switching.[67] The design of sharing a single thread among all the requests that use the observer pattern is intended for building highly concurrent applications, where any function performing I/O must use a callback. To accommodate the single-threaded event loop, Node.js uses the libuv libraryâ€”which, in turn, uses a fixed-sized thread pool that handles some of the non-blocking asynchronous I/O operations.[6]

A downside of this single-threaded approach is that Node.js doesn't allow vertical scaling by increasing the number of CPU cores of the machine it is running on without using an additional module, such as cluster,[51] StrongLoop Process Manager,[68] or pm2.[69] However, developers can increase the default number of threads in the libuv thread pool. The server operating system (OS) is likely to distribute these threads across multiple cores.[70]

A thread pool handles execution of parallel tasks in Node.js. The main thread call functions post tasks to the shared task queue, which threads in the thread pool pull and execute. Inherently non-blocking system functions such as networking translate to kernel-side non-blocking sockets, while inherently blocking system functions such as file I/O run in a blocking way on their own threads. When a thread in the thread pool completes a task, it informs the main thread of this, which in turn, wakes up and executes the registered callback. Since Node.js handles callbacks in serial on the main thread, long lasting computations and other CPU-bound tasks freeze the entire event-loop until completion.[citation needed]

V8
V8 is the JavaScript execution engine built for Google Chrome and open-sourced by Google in 2008. Written in C++, V8 compiles JavaScript source code to native machine code instead of interpreting it in real time.[6]

Node.js uses libuv to handle asynchronous events. Libuv is an abstraction layer for network and file system functionality on both Windows and POSIX-based systems such as Linux, macOS, OSS on NonStop, and Unix.

The core functionality of Node.js resides in a JavaScript library. The Node.js bindings, written in C++, connect these technologies to each other and to the operating system.

Package management
npm is the pre-installed package manager for the Node.js server platform. It installs Node.js programs from the npm registry, organizing the installation and management of third-party Node.js programs. Packages in the npm registry can range from simple helper libraries such as Lodash to task runners such as Grunt.

Unified API
Node.js can be combined with a browser, a database that supports JSON data (such as Postgres,[71] MongoDB, or CouchDB) and JSON for a unified JavaScript development stack. With the adaptation of what were essentially server-side development patterns such as MVC, MVP, MVVM, etc., Node.js allows the reuse of the same model and service interface between client-side and server-side.

Event loop
Node.js registers with the operating system so the OS notifies it of connections and issues a callback. Within the Node.js runtime, each connection is a small heap allocation. Traditionally, relatively heavyweight OS processes or threads handled each connection. Node.js uses an event loop for scalability, instead of processes or threads.[72] In contrast to other event-driven servers, Node.js's event loop does not need to be called explicitly. Instead callbacks are defined, and the server automatically enters the event loop at the end of the callback definition. Node.js exits the event loop when there are no further callbacks to be performed.

Project governance
In 2015, various branches of the greater Node.js community began working under the vendor-neutral Node.js Foundation. The stated purpose of the organization "is to enable widespread adoption and help accelerate development of Node.js and other related modules through an open governance model that encourages participation, technical contribution, and a framework for long-term stewardship by an ecosystem invested in Node.js' success."[73]

The Node.js Foundation Technical Steering Committee (TSC) is the technical governing body of the Node.js Foundation. The TSC is responsible for the core Node.js repo as well as dependent and adjacent projects. Generally the TSC delegates administration of these projects to working groups or committees.[74] The LTS group that manages long term supported releases is one such group. Other current groups include: Website, Streams, Build, Diagnostics, i18n, Evangelism, Docker, Addon API, Benchmarking, Post-mortem, Intl, Documentation, and Testing.[75]

In August, 2017, a governance breakdown precipitated efforts to repair the resulting damage and to create a path to future stability of governance.[76]

See also
	Free software portal
List of server-side JavaScript implementations
List of JavaScript libraries
MEAN (software bundle)
Online JavaScript IDE
Rhino (JavaScript engine)
Application server

Node.js
Node.js logo.svg
Original author(s)	Ryan Dahl
Developer(s)	Joyent
Initial release	May 27, 2009; 9 years ago[1]
Stable release	
10.4.0 / June 6, 2018; 6 days ago[2]
Repository	
https://github.com/nodejs/node
Edit this at Wikidata
Written in	C, C++, JavaScript
Operating system	Linux, macOS, Microsoft Windows, SmartOS, FreeBSD, IBM AIX[3]
Type	Run-time environment
License	MIT[4]
Website	nodejs.org
Node.js is an open-source, cross-platform JavaScript run-time environment that executes JavaScript code server-side. Historically, JavaScript was used primarily for client-side scripting, in which scripts written in JavaScript are embedded in a webpage's HTML and run client-side by a JavaScript engine in the user's web browser. Node.js lets developers use JavaScript for server-side scriptingâ€”running scripts server-side to produce dynamic web page content before the page is sent to the user's web browser. Consequently, Node.js represents a "JavaScript everywhere" paradigm,[5] unifying web application development around a single programming language, rather than different languages for server side and client side scripts.

Though .js is the conventional filename extension for JavaScript code, the name "Node.js" does not refer to a particular file in this context and is merely the name of the product. Node.js has an event-driven architecture capable of asynchronous I/O. These design choices aim to optimize throughput and scalability in web applications with many input/output operations, as well as for real-time Web applications (e.g., real-time communication programs and browser games).[6]

The Node.js distributed development project, governed by the Node.js Foundation,[7] is facilitated by the Linux Foundation's Collaborative Projects program.[8]

Corporate users of Node.js software include GoDaddy,[9] Groupon,[10] IBM,[11] LinkedIn,[12][13] Microsoft,[14][15] Netflix,[16] PayPal,[17][18] Rakuten, SAP, Tuenti,[19] Voxer,[20] Walmart,[21] and Yahoo!.[22]

Contents 
1	History
2	Overview
2.1	Platform architecture
2.2	Industry support
3	Releases
4	Technical details
4.1	Threading
4.2	V8
4.3	Package management
4.4	Unified API
4.5	Event loop
5	Project governance
6	See also
7	References
8	Further reading
9	External links
History

Ryan Dahl, creator of Node.js, in 2010
Node.js was originally written by Ryan Dahl in 2009,[23] about thirteen years after the introduction of the first server-side JavaScript environment, Netscape's LiveWire Pro Web.[24] The initial release supported only Linux and Mac OS X. Its development and maintenance was led by Dahl and later sponsored by Joyent.[25]

Dahl was inspired to create Node.js after seeing a file upload progress bar on Flickr. The browser did not know how much of the file had been uploaded and had to query the Web server. Dahl desired an easier way.[6][26]

Dahl criticized the limited possibilities of the most popular web server in 2009, Apache HTTP Server, to handle a lot of concurrent connections (up to 10,000 and more) and the most common way of creating code (sequential programming), when code either blocked the entire process or implied multiple execution stacks in the case of simultaneous connections.[27]

Dahl demonstrated the project at the inaugural European JSConf on November 8, 2009.[28][29][30] Node.js combined Google's V8 JavaScript engine, an event loop, and a low-level I/O API.[31]

In January 2010, a package manager was introduced for the Node.js environment called npm.[32] The package manager makes it easier for programmers to publish and share source code of Node.js libraries and is designed to simplify installation, updating, and uninstallation of libraries.[31]

In June 2011, Microsoft and Joyent implemented a native Windows version of Node.js.[33] The first Node.js build supporting Windows was released in July 2011.

In January 2012, Dahl stepped aside, promoting coworker and npm creator Isaac Schlueter to manage the project.[34] In January 2014, Schlueter announced that Timothy J. Fontaine would lead the project.[35]

In December 2014, Fedor Indutny started io.js, a fork of Node.js. Due to the internal conflict over Joyent's governance, io.js was created as an open governance alternative with a separate technical committee.[36][37] Unlike Node.js,[38] the authors planned to keep io.js up-to-date with the latest releases of the Google V8 JavaScript engine.[39]

In February 2015, the intent to form a neutral Node.js Foundation was announced. By June 2015, the Node.js and io.js communities voted to work together under the Node.js Foundation.[40]

In September 2015, Node.js v0.12 and io.js v3.3 were merged back together into Node v4.0.[41] This brought V8 ES6 features into Node.js, and a long-term support release cycle.[42] As of 2016, the io.js website recommends that developers switch back to Node.js and that no further releases of io.js are planned due to the merger.[43]

Overview
Node.js allows the creation of Web servers and networking tools using JavaScript and a collection of "modules" that handle various core functionality.[28][31][44][45][46] Modules are provided for file system I/O, networking (DNS, HTTP, TCP, TLS/SSL, or UDP), binary data (buffers), cryptography functions, data streams, and other core functions.[31][45][47] Node.js's modules use an API designed to reduce the complexity of writing server applications.[31][45]

Node.js is officially supported on Linux, macOS, Microsoft Windows, SmartOS, FreeBSD, and IBM AIX.[3] The provided source code may also be built on similar operating systems or be modified by third parties to support others such as NonStop[48] and Unix servers. Alternatively, they can be written with CoffeeScript[49] (a JavaScript alternative), Dart or TypeScript (strongly typed forms of JavaScript), or any other language that can compile to JavaScript.[49][50]

Node.js is primarily used to build network programs such as Web servers.[44] The biggest difference between Node.js and PHP is that most functions in PHP block until completion (commands execute only after previous commands finish), while Node.js functions are non-blocking (commands execute concurrently or even in parallel,[51][52] and use callbacks to signal completion or failure).[44]

Platform architecture
Node.js brings event-driven programming to web servers, enabling development of fast web servers in JavaScript.[31] Developers can create highly scalable servers without using threading, by using a simplified model of event-driven programming that uses callbacks to signal the completion of a task.[31] Node.js connects the ease of a scripting language (JavaScript) with the power of Unix network programming.[31]

Node.js was built on the Google V8 JavaScript engine since it was open-sourced under the BSD license. It is extremely fast and proficient with internet fundamentals such as HTTP, DNS, TCP.[28] Also, JavaScript was a well-known language, making Node.js immediately accessible to the entire web development community.[28]

Industry support
There are thousands of open-source libraries for Node.js, most of them hosted on the npm website. The Node.js developer community has two main mailing lists and the IRC channel #node.js on freenode. There are multiple developer conferences and events that support the Node.js community including NodeConf, Node Interactive and Node Summit as well as a number of regional events.

The open-source community has developed web frameworks to accelerate the development of applications. Such frameworks include Connect, Express.js, Socket.IO, Koa.js, Hapi.js, Sails.js, Meteor, Derby, and many others.[31][53] Various packages have also been created for interfacing with other languages or runtime environments such as Microsoft .NET.[54]

Modern desktop IDEs provide editing and debugging features specifically for Node.js applications. Such IDEs include Atom, Brackets, JetBrains WebStorm,[55][56] Microsoft Visual Studio (with Node.js Tools for Visual Studio,[57] or TypeScript with Node definitions,[58][59][60][61]) NetBeans,[62] Nodeclipse Enide Studio [63] (Eclipse-based), and Visual Studio Code.[64][65] Certain online web-based IDEs also support Node.js, such as Codeanywhere, Codenvy, Cloud9 IDE, Koding, and the visual flow editor in Node-RED.

Releases
Release	Code name	Release date	LTS status	Active LTS start	Maintenance start	Maintenance end
v0.10.x		2013-03-11	End-of-life	-	2015-10-01	2016-10-31
v0.12.x		2015-02-06	End-of-life	-	2016-04-01	2016-12-31
4.x	Argon[66]	2015-09-08	End-of-life	2015-10-01	2017-04-01	2018-04-30
5.x		2015-10-29	No LTS	N/A	2016-06-30
6.x	Boron[66]	2016-04-26	Maintenance	2016-10-18	2018-04-30	April 2019
7.x		2016-10-25	No LTS	N/A	2017-06-30
8.x	Carbon[66]	2017-05-30	Active	2017-10-31	April 2019	December 2019
9.x		2017-10-01	No LTS	N/A	June 2018
10.x	Dubnium[66]	2018-04-24	Active	October 2018	April 2020	April 2021
11.x[66]		2018-10-23	No LTS	N/A	June 2019
New major releases of Node.js are cut from the GitHub master branch every six months. Even-numbered versions are cut in April and odd-numbered versions are cut in October. When a new odd version is released, the previous even version undergoes transition to Long Term Support (LTS), which gives that version 18 months of active support from the date it is designated LTS. After these 18 months expire, an LTS release receives an additional 12 months of maintenance support. An active version receives non-breaking backports of changes a few weeks after they land in the current release. A maintenance release only receives critical fixes and documentation updates.[66] The LTS Working Group manages strategy and policy in collaboration with the Technical Steering Committee of the Node.js Foundation.

Technical details

This section may be too technical for most readers to understand. Please help improve it to make it understandable to non-experts, without removing the technical details. (August 2015) (Learn how and when to remove this template message)
Node.js is a Javascript runtime environment that processes incoming requests in a loop, called the event loop.

Threading
Node.js operates on a single thread, using non-blocking I/O calls, allowing it to support tens of thousands of concurrent connections without incurring the cost of thread context switching.[67] The design of sharing a single thread among all the requests that use the observer pattern is intended for building highly concurrent applications, where any function performing I/O must use a callback. To accommodate the single-threaded event loop, Node.js uses the libuv libraryâ€”which, in turn, uses a fixed-sized thread pool that handles some of the non-blocking asynchronous I/O operations.[6]

A downside of this single-threaded approach is that Node.js doesn't allow vertical scaling by increasing the number of CPU cores of the machine it is running on without using an additional module, such as cluster,[51] StrongLoop Process Manager,[68] or pm2.[69] However, developers can increase the default number of threads in the libuv thread pool. The server operating system (OS) is likely to distribute these threads across multiple cores.[70]

A thread pool handles execution of parallel tasks in Node.js. The main thread call functions post tasks to the shared task queue, which threads in the thread pool pull and execute. Inherently non-blocking system functions such as networking translate to kernel-side non-blocking sockets, while inherently blocking system functions such as file I/O run in a blocking way on their own threads. When a thread in the thread pool completes a task, it informs the main thread of this, which in turn, wakes up and executes the registered callback. Since Node.js handles callbacks in serial on the main thread, long lasting computations and other CPU-bound tasks freeze the entire event-loop until completion.[citation needed]

V8
V8 is the JavaScript execution engine built for Google Chrome and open-sourced by Google in 2008. Written in C++, V8 compiles JavaScript source code to native machine code instead of interpreting it in real time.[6]

Node.js uses libuv to handle asynchronous events. Libuv is an abstraction layer for network and file system functionality on both Windows and POSIX-based systems such as Linux, macOS, OSS on NonStop, and Unix.

The core functionality of Node.js resides in a JavaScript library. The Node.js bindings, written in C++, connect these technologies to each other and to the operating system.

Package management
npm is the pre-installed package manager for the Node.js server platform. It installs Node.js programs from the npm registry, organizing the installation and management of third-party Node.js programs. Packages in the npm registry can range from simple helper libraries such as Lodash to task runners such as Grunt.

Unified API
Node.js can be combined with a browser, a database that supports JSON data (such as Postgres,[71] MongoDB, or CouchDB) and JSON for a unified JavaScript development stack. With the adaptation of what were essentially server-side development patterns such as MVC, MVP, MVVM, etc., Node.js allows the reuse of the same model and service interface between client-side and server-side.

Event loop
Node.js registers with the operating system so the OS notifies it of connections and issues a callback. Within the Node.js runtime, each connection is a small heap allocation. Traditionally, relatively heavyweight OS processes or threads handled each connection. Node.js uses an event loop for scalability, instead of processes or threads.[72] In contrast to other event-driven servers, Node.js's event loop does not need to be called explicitly. Instead callbacks are defined, and the server automatically enters the event loop at the end of the callback definition. Node.js exits the event loop when there are no further callbacks to be performed.

Project governance
In 2015, various branches of the greater Node.js community began working under the vendor-neutral Node.js Foundation. The stated purpose of the organization "is to enable widespread adoption and help accelerate development of Node.js and other related modules through an open governance model that encourages participation, technical contribution, and a framework for long-term stewardship by an ecosystem invested in Node.js' success."[73]

The Node.js Foundation Technical Steering Committee (TSC) is the technical governing body of the Node.js Foundation. The TSC is responsible for the core Node.js repo as well as dependent and adjacent projects. Generally the TSC delegates administration of these projects to working groups or committees.[74] The LTS group that manages long term supported releases is one such group. Other current groups include: Website, Streams, Build, Diagnostics, i18n, Evangelism, Docker, Addon API, Benchmarking, Post-mortem, Intl, Documentation, and Testing.[75]

In August, 2017, a governance breakdown precipitated efforts to repair the resulting damage and to create a path to future stability of governance.[76]

See also
	Free software portal
List of server-side JavaScript implementations
List of JavaScript libraries
MEAN (software bundle)
Online JavaScript IDE
Rhino (JavaScript engine)
Application server

Node.js
Node.js logo.svg
Original author(s)	Ryan Dahl
Developer(s)	Joyent
Initial release	May 27, 2009; 9 years ago[1]
Stable release	
10.4.0 / June 6, 2018; 6 days ago[2]
Repository	
https://github.com/nodejs/node
Edit this at Wikidata
Written in	C, C++, JavaScript
Operating system	Linux, macOS, Microsoft Windows, SmartOS, FreeBSD, IBM AIX[3]
Type	Run-time environment
License	MIT[4]
Website	nodejs.org
Node.js is an open-source, cross-platform JavaScript run-time environment that executes JavaScript code server-side. Historically, JavaScript was used primarily for client-side scripting, in which scripts written in JavaScript are embedded in a webpage's HTML and run client-side by a JavaScript engine in the user's web browser. Node.js lets developers use JavaScript for server-side scriptingâ€”running scripts server-side to produce dynamic web page content before the page is sent to the user's web browser. Consequently, Node.js represents a "JavaScript everywhere" paradigm,[5] unifying web application development around a single programming language, rather than different languages for server side and client side scripts.

Though .js is the conventional filename extension for JavaScript code, the name "Node.js" does not refer to a particular file in this context and is merely the name of the product. Node.js has an event-driven architecture capable of asynchronous I/O. These design choices aim to optimize throughput and scalability in web applications with many input/output operations, as well as for real-time Web applications (e.g., real-time communication programs and browser games).[6]

The Node.js distributed development project, governed by the Node.js Foundation,[7] is facilitated by the Linux Foundation's Collaborative Projects program.[8]

Corporate users of Node.js software include GoDaddy,[9] Groupon,[10] IBM,[11] LinkedIn,[12][13] Microsoft,[14][15] Netflix,[16] PayPal,[17][18] Rakuten, SAP, Tuenti,[19] Voxer,[20] Walmart,[21] and Yahoo!.[22]

Contents 
1	History
2	Overview
2.1	Platform architecture
2.2	Industry support
3	Releases
4	Technical details
4.1	Threading
4.2	V8
4.3	Package management
4.4	Unified API
4.5	Event loop
5	Project governance
6	See also
7	References
8	Further reading
9	External links
History

Ryan Dahl, creator of Node.js, in 2010
Node.js was originally written by Ryan Dahl in 2009,[23] about thirteen years after the introduction of the first server-side JavaScript environment, Netscape's LiveWire Pro Web.[24] The initial release supported only Linux and Mac OS X. Its development and maintenance was led by Dahl and later sponsored by Joyent.[25]

Dahl was inspired to create Node.js after seeing a file upload progress bar on Flickr. The browser did not know how much of the file had been uploaded and had to query the Web server. Dahl desired an easier way.[6][26]

Dahl criticized the limited possibilities of the most popular web server in 2009, Apache HTTP Server, to handle a lot of concurrent connections (up to 10,000 and more) and the most common way of creating code (sequential programming), when code either blocked the entire process or implied multiple execution stacks in the case of simultaneous connections.[27]

Dahl demonstrated the project at the inaugural European JSConf on November 8, 2009.[28][29][30] Node.js combined Google's V8 JavaScript engine, an event loop, and a low-level I/O API.[31]

In January 2010, a package manager was introduced for the Node.js environment called npm.[32] The package manager makes it easier for programmers to publish and share source code of Node.js libraries and is designed to simplify installation, updating, and uninstallation of libraries.[31]

In June 2011, Microsoft and Joyent implemented a native Windows version of Node.js.[33] The first Node.js build supporting Windows was released in July 2011.

In January 2012, Dahl stepped aside, promoting coworker and npm creator Isaac Schlueter to manage the project.[34] In January 2014, Schlueter announced that Timothy J. Fontaine would lead the project.[35]

In December 2014, Fedor Indutny started io.js, a fork of Node.js. Due to the internal conflict over Joyent's governance, io.js was created as an open governance alternative with a separate technical committee.[36][37] Unlike Node.js,[38] the authors planned to keep io.js up-to-date with the latest releases of the Google V8 JavaScript engine.[39]

In February 2015, the intent to form a neutral Node.js Foundation was announced. By June 2015, the Node.js and io.js communities voted to work together under the Node.js Foundation.[40]

In September 2015, Node.js v0.12 and io.js v3.3 were merged back together into Node v4.0.[41] This brought V8 ES6 features into Node.js, and a long-term support release cycle.[42] As of 2016, the io.js website recommends that developers switch back to Node.js and that no further releases of io.js are planned due to the merger.[43]

Overview
Node.js allows the creation of Web servers and networking tools using JavaScript and a collection of "modules" that handle various core functionality.[28][31][44][45][46] Modules are provided for file system I/O, networking (DNS, HTTP, TCP, TLS/SSL, or UDP), binary data (buffers), cryptography functions, data streams, and other core functions.[31][45][47] Node.js's modules use an API designed to reduce the complexity of writing server applications.[31][45]

Node.js is officially supported on Linux, macOS, Microsoft Windows, SmartOS, FreeBSD, and IBM AIX.[3] The provided source code may also be built on similar operating systems or be modified by third parties to support others such as NonStop[48] and Unix servers. Alternatively, they can be written with CoffeeScript[49] (a JavaScript alternative), Dart or TypeScript (strongly typed forms of JavaScript), or any other language that can compile to JavaScript.[49][50]

Node.js is primarily used to build network programs such as Web servers.[44] The biggest difference between Node.js and PHP is that most functions in PHP block until completion (commands execute only after previous commands finish), while Node.js functions are non-blocking (commands execute concurrently or even in parallel,[51][52] and use callbacks to signal completion or failure).[44]

Platform architecture
Node.js brings event-driven programming to web servers, enabling development of fast web servers in JavaScript.[31] Developers can create highly scalable servers without using threading, by using a simplified model of event-driven programming that uses callbacks to signal the completion of a task.[31] Node.js connects the ease of a scripting language (JavaScript) with the power of Unix network programming.[31]

Node.js was built on the Google V8 JavaScript engine since it was open-sourced under the BSD license. It is extremely fast and proficient with internet fundamentals such as HTTP, DNS, TCP.[28] Also, JavaScript was a well-known language, making Node.js immediately accessible to the entire web development community.[28]

Industry support
There are thousands of open-source libraries for Node.js, most of them hosted on the npm website. The Node.js developer community has two main mailing lists and the IRC channel #node.js on freenode. There are multiple developer conferences and events that support the Node.js community including NodeConf, Node Interactive and Node Summit as well as a number of regional events.

The open-source community has developed web frameworks to accelerate the development of applications. Such frameworks include Connect, Express.js, Socket.IO, Koa.js, Hapi.js, Sails.js, Meteor, Derby, and many others.[31][53] Various packages have also been created for interfacing with other languages or runtime environments such as Microsoft .NET.[54]

Modern desktop IDEs provide editing and debugging features specifically for Node.js applications. Such IDEs include Atom, Brackets, JetBrains WebStorm,[55][56] Microsoft Visual Studio (with Node.js Tools for Visual Studio,[57] or TypeScript with Node definitions,[58][59][60][61]) NetBeans,[62] Nodeclipse Enide Studio [63] (Eclipse-based), and Visual Studio Code.[64][65] Certain online web-based IDEs also support Node.js, such as Codeanywhere, Codenvy, Cloud9 IDE, Koding, and the visual flow editor in Node-RED.

Releases
Release	Code name	Release date	LTS status	Active LTS start	Maintenance start	Maintenance end
v0.10.x		2013-03-11	End-of-life	-	2015-10-01	2016-10-31
v0.12.x		2015-02-06	End-of-life	-	2016-04-01	2016-12-31
4.x	Argon[66]	2015-09-08	End-of-life	2015-10-01	2017-04-01	2018-04-30
5.x		2015-10-29	No LTS	N/A	2016-06-30
6.x	Boron[66]	2016-04-26	Maintenance	2016-10-18	2018-04-30	April 2019
7.x		2016-10-25	No LTS	N/A	2017-06-30
8.x	Carbon[66]	2017-05-30	Active	2017-10-31	April 2019	December 2019
9.x		2017-10-01	No LTS	N/A	June 2018
10.x	Dubnium[66]	2018-04-24	Active	October 2018	April 2020	April 2021
11.x[66]		2018-10-23	No LTS	N/A	June 2019
New major releases of Node.js are cut from the GitHub master branch every six months. Even-numbered versions are cut in April and odd-numbered versions are cut in October. When a new odd version is released, the previous even version undergoes transition to Long Term Support (LTS), which gives that version 18 months of active support from the date it is designated LTS. After these 18 months expire, an LTS release receives an additional 12 months of maintenance support. An active version receives non-breaking backports of changes a few weeks after they land in the current release. A maintenance release only receives critical fixes and documentation updates.[66] The LTS Working Group manages strategy and policy in collaboration with the Technical Steering Committee of the Node.js Foundation.

Technical details

This section may be too technical for most readers to understand. Please help improve it to make it understandable to non-experts, without removing the technical details. (August 2015) (Learn how and when to remove this template message)
Node.js is a Javascript runtime environment that processes incoming requests in a loop, called the event loop.

Threading
Node.js operates on a single thread, using non-blocking I/O calls, allowing it to support tens of thousands of concurrent connections without incurring the cost of thread context switching.[67] The design of sharing a single thread among all the requests that use the observer pattern is intended for building highly concurrent applications, where any function performing I/O must use a callback. To accommodate the single-threaded event loop, Node.js uses the libuv libraryâ€”which, in turn, uses a fixed-sized thread pool that handles some of the non-blocking asynchronous I/O operations.[6]

A downside of this single-threaded approach is that Node.js doesn't allow vertical scaling by increasing the number of CPU cores of the machine it is running on without using an additional module, such as cluster,[51] StrongLoop Process Manager,[68] or pm2.[69] However, developers can increase the default number of threads in the libuv thread pool. The server operating system (OS) is likely to distribute these threads across multiple cores.[70]

A thread pool handles execution of parallel tasks in Node.js. The main thread call functions post tasks to the shared task queue, which threads in the thread pool pull and execute. Inherently non-blocking system functions such as networking translate to kernel-side non-blocking sockets, while inherently blocking system functions such as file I/O run in a blocking way on their own threads. When a thread in the thread pool completes a task, it informs the main thread of this, which in turn, wakes up and executes the registered callback. Since Node.js handles callbacks in serial on the main thread, long lasting computations and other CPU-bound tasks freeze the entire event-loop until completion.[citation needed]

V8
V8 is the JavaScript execution engine built for Google Chrome and open-sourced by Google in 2008. Written in C++, V8 compiles JavaScript source code to native machine code instead of interpreting it in real time.[6]

Node.js uses libuv to handle asynchronous events. Libuv is an abstraction layer for network and file system functionality on both Windows and POSIX-based systems such as Linux, macOS, OSS on NonStop, and Unix.

The core functionality of Node.js resides in a JavaScript library. The Node.js bindings, written in C++, connect these technologies to each other and to the operating system.

Package management
npm is the pre-installed package manager for the Node.js server platform. It installs Node.js programs from the npm registry, organizing the installation and management of third-party Node.js programs. Packages in the npm registry can range from simple helper libraries such as Lodash to task runners such as Grunt.

Unified API
Node.js can be combined with a browser, a database that supports JSON data (such as Postgres,[71] MongoDB, or CouchDB) and JSON for a unified JavaScript development stack. With the adaptation of what were essentially server-side development patterns such as MVC, MVP, MVVM, etc., Node.js allows the reuse of the same model and service interface between client-side and server-side.

Event loop
Node.js registers with the operating system so the OS notifies it of connections and issues a callback. Within the Node.js runtime, each connection is a small heap allocation. Traditionally, relatively heavyweight OS processes or threads handled each connection. Node.js uses an event loop for scalability, instead of processes or threads.[72] In contrast to other event-driven servers, Node.js's event loop does not need to be called explicitly. Instead callbacks are defined, and the server automatically enters the event loop at the end of the callback definition. Node.js exits the event loop when there are no further callbacks to be performed.

Project governance
In 2015, various branches of the greater Node.js community began working under the vendor-neutral Node.js Foundation. The stated purpose of the organization "is to enable widespread adoption and help accelerate development of Node.js and other related modules through an open governance model that encourages participation, technical contribution, and a framework for long-term stewardship by an ecosystem invested in Node.js' success."[73]

The Node.js Foundation Technical Steering Committee (TSC) is the technical governing body of the Node.js Foundation. The TSC is responsible for the core Node.js repo as well as dependent and adjacent projects. Generally the TSC delegates administration of these projects to working groups or committees.[74] The LTS group that manages long term supported releases is one such group. Other current groups include: Website, Streams, Build, Diagnostics, i18n, Evangelism, Docker, Addon API, Benchmarking, Post-mortem, Intl, Documentation, and Testing.[75]

In August, 2017, a governance breakdown precipitated efforts to repair the resulting damage and to create a path to future stability of governance.[76]

See also
	Free software portal
List of server-side JavaScript implementations
List of JavaScript libraries
MEAN (software bundle)
Online JavaScript IDE
Rhino (JavaScript engine)
Application server

Node.js
Node.js logo.svg
Original author(s)	Ryan Dahl
Developer(s)	Joyent
Initial release	May 27, 2009; 9 years ago[1]
Stable release	
10.4.0 / June 6, 2018; 6 days ago[2]
Repository	
https://github.com/nodejs/node
Edit this at Wikidata
Written in	C, C++, JavaScript
Operating system	Linux, macOS, Microsoft Windows, SmartOS, FreeBSD, IBM AIX[3]
Type	Run-time environment
License	MIT[4]
Website	nodejs.org
Node.js is an open-source, cross-platform JavaScript run-time environment that executes JavaScript code server-side. Historically, JavaScript was used primarily for client-side scripting, in which scripts written in JavaScript are embedded in a webpage's HTML and run client-side by a JavaScript engine in the user's web browser. Node.js lets developers use JavaScript for server-side scriptingâ€”running scripts server-side to produce dynamic web page content before the page is sent to the user's web browser. Consequently, Node.js represents a "JavaScript everywhere" paradigm,[5] unifying web application development around a single programming language, rather than different languages for server side and client side scripts.

Though .js is the conventional filename extension for JavaScript code, the name "Node.js" does not refer to a particular file in this context and is merely the name of the product. Node.js has an event-driven architecture capable of asynchronous I/O. These design choices aim to optimize throughput and scalability in web applications with many input/output operations, as well as for real-time Web applications (e.g., real-time communication programs and browser games).[6]

The Node.js distributed development project, governed by the Node.js Foundation,[7] is facilitated by the Linux Foundation's Collaborative Projects program.[8]

Corporate users of Node.js software include GoDaddy,[9] Groupon,[10] IBM,[11] LinkedIn,[12][13] Microsoft,[14][15] Netflix,[16] PayPal,[17][18] Rakuten, SAP, Tuenti,[19] Voxer,[20] Walmart,[21] and Yahoo!.[22]

Contents 
1	History
2	Overview
2.1	Platform architecture
2.2	Industry support
3	Releases
4	Technical details
4.1	Threading
4.2	V8
4.3	Package management
4.4	Unified API
4.5	Event loop
5	Project governance
6	See also
7	References
8	Further reading
9	External links
History

Ryan Dahl, creator of Node.js, in 2010
Node.js was originally written by Ryan Dahl in 2009,[23] about thirteen years after the introduction of the first server-side JavaScript environment, Netscape's LiveWire Pro Web.[24] The initial release supported only Linux and Mac OS X. Its development and maintenance was led by Dahl and later sponsored by Joyent.[25]

Dahl was inspired to create Node.js after seeing a file upload progress bar on Flickr. The browser did not know how much of the file had been uploaded and had to query the Web server. Dahl desired an easier way.[6][26]

Dahl criticized the limited possibilities of the most popular web server in 2009, Apache HTTP Server, to handle a lot of concurrent connections (up to 10,000 and more) and the most common way of creating code (sequential programming), when code either blocked the entire process or implied multiple execution stacks in the case of simultaneous connections.[27]

Dahl demonstrated the project at the inaugural European JSConf on November 8, 2009.[28][29][30] Node.js combined Google's V8 JavaScript engine, an event loop, and a low-level I/O API.[31]

In January 2010, a package manager was introduced for the Node.js environment called npm.[32] The package manager makes it easier for programmers to publish and share source code of Node.js libraries and is designed to simplify installation, updating, and uninstallation of libraries.[31]

In June 2011, Microsoft and Joyent implemented a native Windows version of Node.js.[33] The first Node.js build supporting Windows was released in July 2011.

In January 2012, Dahl stepped aside, promoting coworker and npm creator Isaac Schlueter to manage the project.[34] In January 2014, Schlueter announced that Timothy J. Fontaine would lead the project.[35]

In December 2014, Fedor Indutny started io.js, a fork of Node.js. Due to the internal conflict over Joyent's governance, io.js was created as an open governance alternative with a separate technical committee.[36][37] Unlike Node.js,[38] the authors planned to keep io.js up-to-date with the latest releases of the Google V8 JavaScript engine.[39]

In February 2015, the intent to form a neutral Node.js Foundation was announced. By June 2015, the Node.js and io.js communities voted to work together under the Node.js Foundation.[40]

In September 2015, Node.js v0.12 and io.js v3.3 were merged back together into Node v4.0.[41] This brought V8 ES6 features into Node.js, and a long-term support release cycle.[42] As of 2016, the io.js website recommends that developers switch back to Node.js and that no further releases of io.js are planned due to the merger.[43]

Overview
Node.js allows the creation of Web servers and networking tools using JavaScript and a collection of "modules" that handle various core functionality.[28][31][44][45][46] Modules are provided for file system I/O, networking (DNS, HTTP, TCP, TLS/SSL, or UDP), binary data (buffers), cryptography functions, data streams, and other core functions.[31][45][47] Node.js's modules use an API designed to reduce the complexity of writing server applications.[31][45]

Node.js is officially supported on Linux, macOS, Microsoft Windows, SmartOS, FreeBSD, and IBM AIX.[3] The provided source code may also be built on similar operating systems or be modified by third parties to support others such as NonStop[48] and Unix servers. Alternatively, they can be written with CoffeeScript[49] (a JavaScript alternative), Dart or TypeScript (strongly typed forms of JavaScript), or any other language that can compile to JavaScript.[49][50]

Node.js is primarily used to build network programs such as Web servers.[44] The biggest difference between Node.js and PHP is that most functions in PHP block until completion (commands execute only after previous commands finish), while Node.js functions are non-blocking (commands execute concurrently or even in parallel,[51][52] and use callbacks to signal completion or failure).[44]

Platform architecture
Node.js brings event-driven programming to web servers, enabling development of fast web servers in JavaScript.[31] Developers can create highly scalable servers without using threading, by using a simplified model of event-driven programming that uses callbacks to signal the completion of a task.[31] Node.js connects the ease of a scripting language (JavaScript) with the power of Unix network programming.[31]

Node.js was built on the Google V8 JavaScript engine since it was open-sourced under the BSD license. It is extremely fast and proficient with internet fundamentals such as HTTP, DNS, TCP.[28] Also, JavaScript was a well-known language, making Node.js immediately accessible to the entire web development community.[28]

Industry support
There are thousands of open-source libraries for Node.js, most of them hosted on the npm website. The Node.js developer community has two main mailing lists and the IRC channel #node.js on freenode. There are multiple developer conferences and events that support the Node.js community including NodeConf, Node Interactive and Node Summit as well as a number of regional events.

The open-source community has developed web frameworks to accelerate the development of applications. Such frameworks include Connect, Express.js, Socket.IO, Koa.js, Hapi.js, Sails.js, Meteor, Derby, and many others.[31][53] Various packages have also been created for interfacing with other languages or runtime environments such as Microsoft .NET.[54]

Modern desktop IDEs provide editing and debugging features specifically for Node.js applications. Such IDEs include Atom, Brackets, JetBrains WebStorm,[55][56] Microsoft Visual Studio (with Node.js Tools for Visual Studio,[57] or TypeScript with Node definitions,[58][59][60][61]) NetBeans,[62] Nodeclipse Enide Studio [63] (Eclipse-based), and Visual Studio Code.[64][65] Certain online web-based IDEs also support Node.js, such as Codeanywhere, Codenvy, Cloud9 IDE, Koding, and the visual flow editor in Node-RED.

Releases
Release	Code name	Release date	LTS status	Active LTS start	Maintenance start	Maintenance end
v0.10.x		2013-03-11	End-of-life	-	2015-10-01	2016-10-31
v0.12.x		2015-02-06	End-of-life	-	2016-04-01	2016-12-31
4.x	Argon[66]	2015-09-08	End-of-life	2015-10-01	2017-04-01	2018-04-30
5.x		2015-10-29	No LTS	N/A	2016-06-30
6.x	Boron[66]	2016-04-26	Maintenance	2016-10-18	2018-04-30	April 2019
7.x		2016-10-25	No LTS	N/A	2017-06-30
8.x	Carbon[66]	2017-05-30	Active	2017-10-31	April 2019	December 2019
9.x		2017-10-01	No LTS	N/A	June 2018
10.x	Dubnium[66]	2018-04-24	Active	October 2018	April 2020	April 2021
11.x[66]		2018-10-23	No LTS	N/A	June 2019
New major releases of Node.js are cut from the GitHub master branch every six months. Even-numbered versions are cut in April and odd-numbered versions are cut in October. When a new odd version is released, the previous even version undergoes transition to Long Term Support (LTS), which gives that version 18 months of active support from the date it is designated LTS. After these 18 months expire, an LTS release receives an additional 12 months of maintenance support. An active version receives non-breaking backports of changes a few weeks after they land in the current release. A maintenance release only receives critical fixes and documentation updates.[66] The LTS Working Group manages strategy and policy in collaboration with the Technical Steering Committee of the Node.js Foundation.

Technical details

This section may be too technical for most readers to understand. Please help improve it to make it understandable to non-experts, without removing the technical details. (August 2015) (Learn how and when to remove this template message)
Node.js is a Javascript runtime environment that processes incoming requests in a loop, called the event loop.

Threading
Node.js operates on a single thread, using non-blocking I/O calls, allowing it to support tens of thousands of concurrent connections without incurring the cost of thread context switching.[67] The design of sharing a single thread among all the requests that use the observer pattern is intended for building highly concurrent applications, where any function performing I/O must use a callback. To accommodate the single-threaded event loop, Node.js uses the libuv libraryâ€”which, in turn, uses a fixed-sized thread pool that handles some of the non-blocking asynchronous I/O operations.[6]

A downside of this single-threaded approach is that Node.js doesn't allow vertical scaling by increasing the number of CPU cores of the machine it is running on without using an additional module, such as cluster,[51] StrongLoop Process Manager,[68] or pm2.[69] However, developers can increase the default number of threads in the libuv thread pool. The server operating system (OS) is likely to distribute these threads across multiple cores.[70]

A thread pool handles execution of parallel tasks in Node.js. The main thread call functions post tasks to the shared task queue, which threads in the thread pool pull and execute. Inherently non-blocking system functions such as networking translate to kernel-side non-blocking sockets, while inherently blocking system functions such as file I/O run in a blocking way on their own threads. When a thread in the thread pool completes a task, it informs the main thread of this, which in turn, wakes up and executes the registered callback. Since Node.js handles callbacks in serial on the main thread, long lasting computations and other CPU-bound tasks freeze the entire event-loop until completion.[citation needed]

V8
V8 is the JavaScript execution engine built for Google Chrome and open-sourced by Google in 2008. Written in C++, V8 compiles JavaScript source code to native machine code instead of interpreting it in real time.[6]

Node.js uses libuv to handle asynchronous events. Libuv is an abstraction layer for network and file system functionality on both Windows and POSIX-based systems such as Linux, macOS, OSS on NonStop, and Unix.

The core functionality of Node.js resides in a JavaScript library. The Node.js bindings, written in C++, connect these technologies to each other and to the operating system.

Package management
npm is the pre-installed package manager for the Node.js server platform. It installs Node.js programs from the npm registry, organizing the installation and management of third-party Node.js programs. Packages in the npm registry can range from simple helper libraries such as Lodash to task runners such as Grunt.

Unified API
Node.js can be combined with a browser, a database that supports JSON data (such as Postgres,[71] MongoDB, or CouchDB) and JSON for a unified JavaScript development stack. With the adaptation of what were essentially server-side development patterns such as MVC, MVP, MVVM, etc., Node.js allows the reuse of the same model and service interface between client-side and server-side.

Event loop
Node.js registers with the operating system so the OS notifies it of connections and issues a callback. Within the Node.js runtime, each connection is a small heap allocation. Traditionally, relatively heavyweight OS processes or threads handled each connection. Node.js uses an event loop for scalability, instead of processes or threads.[72] In contrast to other event-driven servers, Node.js's event loop does not need to be called explicitly. Instead callbacks are defined, and the server automatically enters the event loop at the end of the callback definition. Node.js exits the event loop when there are no further callbacks to be performed.

Project governance
In 2015, various branches of the greater Node.js community began working under the vendor-neutral Node.js Foundation. The stated purpose of the organization "is to enable widespread adoption and help accelerate development of Node.js and other related modules through an open governance model that encourages participation, technical contribution, and a framework for long-term stewardship by an ecosystem invested in Node.js' success."[73]

The Node.js Foundation Technical Steering Committee (TSC) is the technical governing body of the Node.js Foundation. The TSC is responsible for the core Node.js repo as well as dependent and adjacent projects. Generally the TSC delegates administration of these projects to working groups or committees.[74] The LTS group that manages long term supported releases is one such group. Other current groups include: Website, Streams, Build, Diagnostics, i18n, Evangelism, Docker, Addon API, Benchmarking, Post-mortem, Intl, Documentation, and Testing.[75]

In August, 2017, a governance breakdown precipitated efforts to repair the resulting damage and to create a path to future stability of governance.[76]

See also
	Free software portal
List of server-side JavaScript implementations
List of JavaScript libraries
MEAN (software bundle)
Online JavaScript IDE
Rhino (JavaScript engine)
Application server

Node.js
Node.js logo.svg
Original author(s)	Ryan Dahl
Developer(s)	Joyent
Initial release	May 27, 2009; 9 years ago[1]
Stable release	
10.4.0 / June 6, 2018; 6 days ago[2]
Repository	
https://github.com/nodejs/node
Edit this at Wikidata
Written in	C, C++, JavaScript
Operating system	Linux, macOS, Microsoft Windows, SmartOS, FreeBSD, IBM AIX[3]
Type	Run-time environment
License	MIT[4]
Website	nodejs.org
Node.js is an open-source, cross-platform JavaScript run-time environment that executes JavaScript code server-side. Historically, JavaScript was used primarily for client-side scripting, in which scripts written in JavaScript are embedded in a webpage's HTML and run client-side by a JavaScript engine in the user's web browser. Node.js lets developers use JavaScript for server-side scriptingâ€”running scripts server-side to produce dynamic web page content before the page is sent to the user's web browser. Consequently, Node.js represents a "JavaScript everywhere" paradigm,[5] unifying web application development around a single programming language, rather than different languages for server side and client side scripts.

Though .js is the conventional filename extension for JavaScript code, the name "Node.js" does not refer to a particular file in this context and is merely the name of the product. Node.js has an event-driven architecture capable of asynchronous I/O. These design choices aim to optimize throughput and scalability in web applications with many input/output operations, as well as for real-time Web applications (e.g., real-time communication programs and browser games).[6]

The Node.js distributed development project, governed by the Node.js Foundation,[7] is facilitated by the Linux Foundation's Collaborative Projects program.[8]

Corporate users of Node.js software include GoDaddy,[9] Groupon,[10] IBM,[11] LinkedIn,[12][13] Microsoft,[14][15] Netflix,[16] PayPal,[17][18] Rakuten, SAP, Tuenti,[19] Voxer,[20] Walmart,[21] and Yahoo!.[22]

Contents 
1	History
2	Overview
2.1	Platform architecture
2.2	Industry support
3	Releases
4	Technical details
4.1	Threading
4.2	V8
4.3	Package management
4.4	Unified API
4.5	Event loop
5	Project governance
6	See also
7	References
8	Further reading
9	External links
History

Ryan Dahl, creator of Node.js, in 2010
Node.js was originally written by Ryan Dahl in 2009,[23] about thirteen years after the introduction of the first server-side JavaScript environment, Netscape's LiveWire Pro Web.[24] The initial release supported only Linux and Mac OS X. Its development and maintenance was led by Dahl and later sponsored by Joyent.[25]

Dahl was inspired to create Node.js after seeing a file upload progress bar on Flickr. The browser did not know how much of the file had been uploaded and had to query the Web server. Dahl desired an easier way.[6][26]

Dahl criticized the limited possibilities of the most popular web server in 2009, Apache HTTP Server, to handle a lot of concurrent connections (up to 10,000 and more) and the most common way of creating code (sequential programming), when code either blocked the entire process or implied multiple execution stacks in the case of simultaneous connections.[27]

Dahl demonstrated the project at the inaugural European JSConf on November 8, 2009.[28][29][30] Node.js combined Google's V8 JavaScript engine, an event loop, and a low-level I/O API.[31]

In January 2010, a package manager was introduced for the Node.js environment called npm.[32] The package manager makes it easier for programmers to publish and share source code of Node.js libraries and is designed to simplify installation, updating, and uninstallation of libraries.[31]

In June 2011, Microsoft and Joyent implemented a native Windows version of Node.js.[33] The first Node.js build supporting Windows was released in July 2011.

In January 2012, Dahl stepped aside, promoting coworker and npm creator Isaac Schlueter to manage the project.[34] In January 2014, Schlueter announced that Timothy J. Fontaine would lead the project.[35]

In December 2014, Fedor Indutny started io.js, a fork of Node.js. Due to the internal conflict over Joyent's governance, io.js was created as an open governance alternative with a separate technical committee.[36][37] Unlike Node.js,[38] the authors planned to keep io.js up-to-date with the latest releases of the Google V8 JavaScript engine.[39]

In February 2015, the intent to form a neutral Node.js Foundation was announced. By June 2015, the Node.js and io.js communities voted to work together under the Node.js Foundation.[40]

In September 2015, Node.js v0.12 and io.js v3.3 were merged back together into Node v4.0.[41] This brought V8 ES6 features into Node.js, and a long-term support release cycle.[42] As of 2016, the io.js website recommends that developers switch back to Node.js and that no further releases of io.js are planned due to the merger.[43]

Overview
Node.js allows the creation of Web servers and networking tools using JavaScript and a collection of "modules" that handle various core functionality.[28][31][44][45][46] Modules are provided for file system I/O, networking (DNS, HTTP, TCP, TLS/SSL, or UDP), binary data (buffers), cryptography functions, data streams, and other core functions.[31][45][47] Node.js's modules use an API designed to reduce the complexity of writing server applications.[31][45]

Node.js is officially supported on Linux, macOS, Microsoft Windows, SmartOS, FreeBSD, and IBM AIX.[3] The provided source code may also be built on similar operating systems or be modified by third parties to support others such as NonStop[48] and Unix servers. Alternatively, they can be written with CoffeeScript[49] (a JavaScript alternative), Dart or TypeScript (strongly typed forms of JavaScript), or any other language that can compile to JavaScript.[49][50]

Node.js is primarily used to build network programs such as Web servers.[44] The biggest difference between Node.js and PHP is that most functions in PHP block until completion (commands execute only after previous commands finish), while Node.js functions are non-blocking (commands execute concurrently or even in parallel,[51][52] and use callbacks to signal completion or failure).[44]

Platform architecture
Node.js brings event-driven programming to web servers, enabling development of fast web servers in JavaScript.[31] Developers can create highly scalable servers without using threading, by using a simplified model of event-driven programming that uses callbacks to signal the completion of a task.[31] Node.js connects the ease of a scripting language (JavaScript) with the power of Unix network programming.[31]

Node.js was built on the Google V8 JavaScript engine since it was open-sourced under the BSD license. It is extremely fast and proficient with internet fundamentals such as HTTP, DNS, TCP.[28] Also, JavaScript was a well-known language, making Node.js immediately accessible to the entire web development community.[28]

Industry support
There are thousands of open-source libraries for Node.js, most of them hosted on the npm website. The Node.js developer community has two main mailing lists and the IRC channel #node.js on freenode. There are multiple developer conferences and events that support the Node.js community including NodeConf, Node Interactive and Node Summit as well as a number of regional events.

The open-source community has developed web frameworks to accelerate the development of applications. Such frameworks include Connect, Express.js, Socket.IO, Koa.js, Hapi.js, Sails.js, Meteor, Derby, and many others.[31][53] Various packages have also been created for interfacing with other languages or runtime environments such as Microsoft .NET.[54]

Modern desktop IDEs provide editing and debugging features specifically for Node.js applications. Such IDEs include Atom, Brackets, JetBrains WebStorm,[55][56] Microsoft Visual Studio (with Node.js Tools for Visual Studio,[57] or TypeScript with Node definitions,[58][59][60][61]) NetBeans,[62] Nodeclipse Enide Studio [63] (Eclipse-based), and Visual Studio Code.[64][65] Certain online web-based IDEs also support Node.js, such as Codeanywhere, Codenvy, Cloud9 IDE, Koding, and the visual flow editor in Node-RED.

Releases
Release	Code name	Release date	LTS status	Active LTS start	Maintenance start	Maintenance end
v0.10.x		2013-03-11	End-of-life	-	2015-10-01	2016-10-31
v0.12.x		2015-02-06	End-of-life	-	2016-04-01	2016-12-31
4.x	Argon[66]	2015-09-08	End-of-life	2015-10-01	2017-04-01	2018-04-30
5.x		2015-10-29	No LTS	N/A	2016-06-30
6.x	Boron[66]	2016-04-26	Maintenance	2016-10-18	2018-04-30	April 2019
7.x		2016-10-25	No LTS	N/A	2017-06-30
8.x	Carbon[66]	2017-05-30	Active	2017-10-31	April 2019	December 2019
9.x		2017-10-01	No LTS	N/A	June 2018
10.x	Dubnium[66]	2018-04-24	Active	October 2018	April 2020	April 2021
11.x[66]		2018-10-23	No LTS	N/A	June 2019
New major releases of Node.js are cut from the GitHub master branch every six months. Even-numbered versions are cut in April and odd-numbered versions are cut in October. When a new odd version is released, the previous even version undergoes transition to Long Term Support (LTS), which gives that version 18 months of active support from the date it is designated LTS. After these 18 months expire, an LTS release receives an additional 12 months of maintenance support. An active version receives non-breaking backports of changes a few weeks after they land in the current release. A maintenance release only receives critical fixes and documentation updates.[66] The LTS Working Group manages strategy and policy in collaboration with the Technical Steering Committee of the Node.js Foundation.

Technical details

This section may be too technical for most readers to understand. Please help improve it to make it understandable to non-experts, without removing the technical details. (August 2015) (Learn how and when to remove this template message)
Node.js is a Javascript runtime environment that processes incoming requests in a loop, called the event loop.

Threading
Node.js operates on a single thread, using non-blocking I/O calls, allowing it to support tens of thousands of concurrent connections without incurring the cost of thread context switching.[67] The design of sharing a single thread among all the requests that use the observer pattern is intended for building highly concurrent applications, where any function performing I/O must use a callback. To accommodate the single-threaded event loop, Node.js uses the libuv libraryâ€”which, in turn, uses a fixed-sized thread pool that handles some of the non-blocking asynchronous I/O operations.[6]

A downside of this single-threaded approach is that Node.js doesn't allow vertical scaling by increasing the number of CPU cores of the machine it is running on without using an additional module, such as cluster,[51] StrongLoop Process Manager,[68] or pm2.[69] However, developers can increase the default number of threads in the libuv thread pool. The server operating system (OS) is likely to distribute these threads across multiple cores.[70]

A thread pool handles execution of parallel tasks in Node.js. The main thread call functions post tasks to the shared task queue, which threads in the thread pool pull and execute. Inherently non-blocking system functions such as networking translate to kernel-side non-blocking sockets, while inherently blocking system functions such as file I/O run in a blocking way on their own threads. When a thread in the thread pool completes a task, it informs the main thread of this, which in turn, wakes up and executes the registered callback. Since Node.js handles callbacks in serial on the main thread, long lasting computations and other CPU-bound tasks freeze the entire event-loop until completion.[citation needed]

V8
V8 is the JavaScript execution engine built for Google Chrome and open-sourced by Google in 2008. Written in C++, V8 compiles JavaScript source code to native machine code instead of interpreting it in real time.[6]

Node.js uses libuv to handle asynchronous events. Libuv is an abstraction layer for network and file system functionality on both Windows and POSIX-based systems such as Linux, macOS, OSS on NonStop, and Unix.

The core functionality of Node.js resides in a JavaScript library. The Node.js bindings, written in C++, connect these technologies to each other and to the operating system.

Package management
npm is the pre-installed package manager for the Node.js server platform. It installs Node.js programs from the npm registry, organizing the installation and management of third-party Node.js programs. Packages in the npm registry can range from simple helper libraries such as Lodash to task runners such as Grunt.

Unified API
Node.js can be combined with a browser, a database that supports JSON data (such as Postgres,[71] MongoDB, or CouchDB) and JSON for a unified JavaScript development stack. With the adaptation of what were essentially server-side development patterns such as MVC, MVP, MVVM, etc., Node.js allows the reuse of the same model and service interface between client-side and server-side.

Event loop
Node.js registers with the operating system so the OS notifies it of connections and issues a callback. Within the Node.js runtime, each connection is a small heap allocation. Traditionally, relatively heavyweight OS processes or threads handled each connection. Node.js uses an event loop for scalability, instead of processes or threads.[72] In contrast to other event-driven servers, Node.js's event loop does not need to be called explicitly. Instead callbacks are defined, and the server automatically enters the event loop at the end of the callback definition. Node.js exits the event loop when there are no further callbacks to be performed.

Project governance
In 2015, various branches of the greater Node.js community began working under the vendor-neutral Node.js Foundation. The stated purpose of the organization "is to enable widespread adoption and help accelerate development of Node.js and other related modules through an open governance model that encourages participation, technical contribution, and a framework for long-term stewardship by an ecosystem invested in Node.js' success."[73]

The Node.js Foundation Technical Steering Committee (TSC) is the technical governing body of the Node.js Foundation. The TSC is responsible for the core Node.js repo as well as dependent and adjacent projects. Generally the TSC delegates administration of these projects to working groups or committees.[74] The LTS group that manages long term supported releases is one such group. Other current groups include: Website, Streams, Build, Diagnostics, i18n, Evangelism, Docker, Addon API, Benchmarking, Post-mortem, Intl, Documentation, and Testing.[75]

In August, 2017, a governance breakdown precipitated efforts to repair the resulting damage and to create a path to future stability of governance.[76]

See also
	Free software portal
List of server-side JavaScript implementations
List of JavaScript libraries
MEAN (software bundle)
Online JavaScript IDE
Rhino (JavaScript engine)
Application server

Node.js
Node.js logo.svg
Original author(s)	Ryan Dahl
Developer(s)	Joyent
Initial release	May 27, 2009; 9 years ago[1]
Stable release	
10.4.0 / June 6, 2018; 6 days ago[2]
Repository	
https://github.com/nodejs/node
Edit this at Wikidata
Written in	C, C++, JavaScript
Operating system	Linux, macOS, Microsoft Windows, SmartOS, FreeBSD, IBM AIX[3]
Type	Run-time environment
License	MIT[4]
Website	nodejs.org
Node.js is an open-source, cross-platform JavaScript run-time environment that executes JavaScript code server-side. Historically, JavaScript was used primarily for client-side scripting, in which scripts written in JavaScript are embedded in a webpage's HTML and run client-side by a JavaScript engine in the user's web browser. Node.js lets developers use JavaScript for server-side scriptingâ€”running scripts server-side to produce dynamic web page content before the page is sent to the user's web browser. Consequently, Node.js represents a "JavaScript everywhere" paradigm,[5] unifying web application development around a single programming language, rather than different languages for server side and client side scripts.

Though .js is the conventional filename extension for JavaScript code, the name "Node.js" does not refer to a particular file in this context and is merely the name of the product. Node.js has an event-driven architecture capable of asynchronous I/O. These design choices aim to optimize throughput and scalability in web applications with many input/output operations, as well as for real-time Web applications (e.g., real-time communication programs and browser games).[6]

The Node.js distributed development project, governed by the Node.js Foundation,[7] is facilitated by the Linux Foundation's Collaborative Projects program.[8]

Corporate users of Node.js software include GoDaddy,[9] Groupon,[10] IBM,[11] LinkedIn,[12][13] Microsoft,[14][15] Netflix,[16] PayPal,[17][18] Rakuten, SAP, Tuenti,[19] Voxer,[20] Walmart,[21] and Yahoo!.[22]

Contents 
1	History
2	Overview
2.1	Platform architecture
2.2	Industry support
3	Releases
4	Technical details
4.1	Threading
4.2	V8
4.3	Package management
4.4	Unified API
4.5	Event loop
5	Project governance
6	See also
7	References
8	Further reading
9	External links
History

Ryan Dahl, creator of Node.js, in 2010
Node.js was originally written by Ryan Dahl in 2009,[23] about thirteen years after the introduction of the first server-side JavaScript environment, Netscape's LiveWire Pro Web.[24] The initial release supported only Linux and Mac OS X. Its development and maintenance was led by Dahl and later sponsored by Joyent.[25]

Dahl was inspired to create Node.js after seeing a file upload progress bar on Flickr. The browser did not know how much of the file had been uploaded and had to query the Web server. Dahl desired an easier way.[6][26]

Dahl criticized the limited possibilities of the most popular web server in 2009, Apache HTTP Server, to handle a lot of concurrent connections (up to 10,000 and more) and the most common way of creating code (sequential programming), when code either blocked the entire process or implied multiple execution stacks in the case of simultaneous connections.[27]

Dahl demonstrated the project at the inaugural European JSConf on November 8, 2009.[28][29][30] Node.js combined Google's V8 JavaScript engine, an event loop, and a low-level I/O API.[31]

In January 2010, a package manager was introduced for the Node.js environment called npm.[32] The package manager makes it easier for programmers to publish and share source code of Node.js libraries and is designed to simplify installation, updating, and uninstallation of libraries.[31]

In June 2011, Microsoft and Joyent implemented a native Windows version of Node.js.[33] The first Node.js build supporting Windows was released in July 2011.

In January 2012, Dahl stepped aside, promoting coworker and npm creator Isaac Schlueter to manage the project.[34] In January 2014, Schlueter announced that Timothy J. Fontaine would lead the project.[35]

In December 2014, Fedor Indutny started io.js, a fork of Node.js. Due to the internal conflict over Joyent's governance, io.js was created as an open governance alternative with a separate technical committee.[36][37] Unlike Node.js,[38] the authors planned to keep io.js up-to-date with the latest releases of the Google V8 JavaScript engine.[39]

In February 2015, the intent to form a neutral Node.js Foundation was announced. By June 2015, the Node.js and io.js communities voted to work together under the Node.js Foundation.[40]

In September 2015, Node.js v0.12 and io.js v3.3 were merged back together into Node v4.0.[41] This brought V8 ES6 features into Node.js, and a long-term support release cycle.[42] As of 2016, the io.js website recommends that developers switch back to Node.js and that no further releases of io.js are planned due to the merger.[43]

Overview
Node.js allows the creation of Web servers and networking tools using JavaScript and a collection of "modules" that handle various core functionality.[28][31][44][45][46] Modules are provided for file system I/O, networking (DNS, HTTP, TCP, TLS/SSL, or UDP), binary data (buffers), cryptography functions, data streams, and other core functions.[31][45][47] Node.js's modules use an API designed to reduce the complexity of writing server applications.[31][45]

Node.js is officially supported on Linux, macOS, Microsoft Windows, SmartOS, FreeBSD, and IBM AIX.[3] The provided source code may also be built on similar operating systems or be modified by third parties to support others such as NonStop[48] and Unix servers. Alternatively, they can be written with CoffeeScript[49] (a JavaScript alternative), Dart or TypeScript (strongly typed forms of JavaScript), or any other language that can compile to JavaScript.[49][50]

Node.js is primarily used to build network programs such as Web servers.[44] The biggest difference between Node.js and PHP is that most functions in PHP block until completion (commands execute only after previous commands finish), while Node.js functions are non-blocking (commands execute concurrently or even in parallel,[51][52] and use callbacks to signal completion or failure).[44]

Platform architecture
Node.js brings event-driven programming to web servers, enabling development of fast web servers in JavaScript.[31] Developers can create highly scalable servers without using threading, by using a simplified model of event-driven programming that uses callbacks to signal the completion of a task.[31] Node.js connects the ease of a scripting language (JavaScript) with the power of Unix network programming.[31]

Node.js was built on the Google V8 JavaScript engine since it was open-sourced under the BSD license. It is extremely fast and proficient with internet fundamentals such as HTTP, DNS, TCP.[28] Also, JavaScript was a well-known language, making Node.js immediately accessible to the entire web development community.[28]

Industry support
There are thousands of open-source libraries for Node.js, most of them hosted on the npm website. The Node.js developer community has two main mailing lists and the IRC channel #node.js on freenode. There are multiple developer conferences and events that support the Node.js community including NodeConf, Node Interactive and Node Summit as well as a number of regional events.

The open-source community has developed web frameworks to accelerate the development of applications. Such frameworks include Connect, Express.js, Socket.IO, Koa.js, Hapi.js, Sails.js, Meteor, Derby, and many others.[31][53] Various packages have also been created for interfacing with other languages or runtime environments such as Microsoft .NET.[54]

Modern desktop IDEs provide editing and debugging features specifically for Node.js applications. Such IDEs include Atom, Brackets, JetBrains WebStorm,[55][56] Microsoft Visual Studio (with Node.js Tools for Visual Studio,[57] or TypeScript with Node definitions,[58][59][60][61]) NetBeans,[62] Nodeclipse Enide Studio [63] (Eclipse-based), and Visual Studio Code.[64][65] Certain online web-based IDEs also support Node.js, such as Codeanywhere, Codenvy, Cloud9 IDE, Koding, and the visual flow editor in Node-RED.

Releases
Release	Code name	Release date	LTS status	Active LTS start	Maintenance start	Maintenance end
v0.10.x		2013-03-11	End-of-life	-	2015-10-01	2016-10-31
v0.12.x		2015-02-06	End-of-life	-	2016-04-01	2016-12-31
4.x	Argon[66]	2015-09-08	End-of-life	2015-10-01	2017-04-01	2018-04-30
5.x		2015-10-29	No LTS	N/A	2016-06-30
6.x	Boron[66]	2016-04-26	Maintenance	2016-10-18	2018-04-30	April 2019
7.x		2016-10-25	No LTS	N/A	2017-06-30
8.x	Carbon[66]	2017-05-30	Active	2017-10-31	April 2019	December 2019
9.x		2017-10-01	No LTS	N/A	June 2018
10.x	Dubnium[66]	2018-04-24	Active	October 2018	April 2020	April 2021
11.x[66]		2018-10-23	No LTS	N/A	June 2019
New major releases of Node.js are cut from the GitHub master branch every six months. Even-numbered versions are cut in April and odd-numbered versions are cut in October. When a new odd version is released, the previous even version undergoes transition to Long Term Support (LTS), which gives that version 18 months of active support from the date it is designated LTS. After these 18 months expire, an LTS release receives an additional 12 months of maintenance support. An active version receives non-breaking backports of changes a few weeks after they land in the current release. A maintenance release only receives critical fixes and documentation updates.[66] The LTS Working Group manages strategy and policy in collaboration with the Technical Steering Committee of the Node.js Foundation.

Technical details

This section may be too technical for most readers to understand. Please help improve it to make it understandable to non-experts, without removing the technical details. (August 2015) (Learn how and when to remove this template message)
Node.js is a Javascript runtime environment that processes incoming requests in a loop, called the event loop.

Threading
Node.js operates on a single thread, using non-blocking I/O calls, allowing it to support tens of thousands of concurrent connections without incurring the cost of thread context switching.[67] The design of sharing a single thread among all the requests that use the observer pattern is intended for building highly concurrent applications, where any function performing I/O must use a callback. To accommodate the single-threaded event loop, Node.js uses the libuv libraryâ€”which, in turn, uses a fixed-sized thread pool that handles some of the non-blocking asynchronous I/O operations.[6]

A downside of this single-threaded approach is that Node.js doesn't allow vertical scaling by increasing the number of CPU cores of the machine it is running on without using an additional module, such as cluster,[51] StrongLoop Process Manager,[68] or pm2.[69] However, developers can increase the default number of threads in the libuv thread pool. The server operating system (OS) is likely to distribute these threads across multiple cores.[70]

A thread pool handles execution of parallel tasks in Node.js. The main thread call functions post tasks to the shared task queue, which threads in the thread pool pull and execute. Inherently non-blocking system functions such as networking translate to kernel-side non-blocking sockets, while inherently blocking system functions such as file I/O run in a blocking way on their own threads. When a thread in the thread pool completes a task, it informs the main thread of this, which in turn, wakes up and executes the registered callback. Since Node.js handles callbacks in serial on the main thread, long lasting computations and other CPU-bound tasks freeze the entire event-loop until completion.[citation needed]

V8
V8 is the JavaScript execution engine built for Google Chrome and open-sourced by Google in 2008. Written in C++, V8 compiles JavaScript source code to native machine code instead of interpreting it in real time.[6]

Node.js uses libuv to handle asynchronous events. Libuv is an abstraction layer for network and file system functionality on both Windows and POSIX-based systems such as Linux, macOS, OSS on NonStop, and Unix.

The core functionality of Node.js resides in a JavaScript library. The Node.js bindings, written in C++, connect these technologies to each other and to the operating system.

Package management
npm is the pre-installed package manager for the Node.js server platform. It installs Node.js programs from the npm registry, organizing the installation and management of third-party Node.js programs. Packages in the npm registry can range from simple helper libraries such as Lodash to task runners such as Grunt.

Unified API
Node.js can be combined with a browser, a database that supports JSON data (such as Postgres,[71] MongoDB, or CouchDB) and JSON for a unified JavaScript development stack. With the adaptation of what were essentially server-side development patterns such as MVC, MVP, MVVM, etc., Node.js allows the reuse of the same model and service interface between client-side and server-side.

Event loop
Node.js registers with the operating system so the OS notifies it of connections and issues a callback. Within the Node.js runtime, each connection is a small heap allocation. Traditionally, relatively heavyweight OS processes or threads handled each connection. Node.js uses an event loop for scalability, instead of processes or threads.[72] In contrast to other event-driven servers, Node.js's event loop does not need to be called explicitly. Instead callbacks are defined, and the server automatically enters the event loop at the end of the callback definition. Node.js exits the event loop when there are no further callbacks to be performed.

Project governance
In 2015, various branches of the greater Node.js community began working under the vendor-neutral Node.js Foundation. The stated purpose of the organization "is to enable widespread adoption and help accelerate development of Node.js and other related modules through an open governance model that encourages participation, technical contribution, and a framework for long-term stewardship by an ecosystem invested in Node.js' success."[73]

The Node.js Foundation Technical Steering Committee (TSC) is the technical governing body of the Node.js Foundation. The TSC is responsible for the core Node.js repo as well as dependent and adjacent projects. Generally the TSC delegates administration of these projects to working groups or committees.[74] The LTS group that manages long term supported releases is one such group. Other current groups include: Website, Streams, Build, Diagnostics, i18n, Evangelism, Docker, Addon API, Benchmarking, Post-mortem, Intl, Documentation, and Testing.[75]

In August, 2017, a governance breakdown precipitated efforts to repair the resulting damage and to create a path to future stability of governance.[76]

See also
	Free software portal
List of server-side JavaScript implementations
List of JavaScript libraries
MEAN (software bundle)
Online JavaScript IDE
Rhino (JavaScript engine)
Application server

Node.js
Node.js logo.svg
Original author(s)	Ryan Dahl
Developer(s)	Joyent
Initial release	May 27, 2009; 9 years ago[1]
Stable release	
10.4.0 / June 6, 2018; 6 days ago[2]
Repository	
https://github.com/nodejs/node
Edit this at Wikidata
Written in	C, C++, JavaScript
Operating system	Linux, macOS, Microsoft Windows, SmartOS, FreeBSD, IBM AIX[3]
Type	Run-time environment
License	MIT[4]
Website	nodejs.org
Node.js is an open-source, cross-platform JavaScript run-time environment that executes JavaScript code server-side. Historically, JavaScript was used primarily for client-side scripting, in which scripts written in JavaScript are embedded in a webpage's HTML and run client-side by a JavaScript engine in the user's web browser. Node.js lets developers use JavaScript for server-side scriptingâ€”running scripts server-side to produce dynamic web page content before the page is sent to the user's web browser. Consequently, Node.js represents a "JavaScript everywhere" paradigm,[5] unifying web application development around a single programming language, rather than different languages for server side and client side scripts.

Though .js is the conventional filename extension for JavaScript code, the name "Node.js" does not refer to a particular file in this context and is merely the name of the product. Node.js has an event-driven architecture capable of asynchronous I/O. These design choices aim to optimize throughput and scalability in web applications with many input/output operations, as well as for real-time Web applications (e.g., real-time communication programs and browser games).[6]

The Node.js distributed development project, governed by the Node.js Foundation,[7] is facilitated by the Linux Foundation's Collaborative Projects program.[8]

Corporate users of Node.js software include GoDaddy,[9] Groupon,[10] IBM,[11] LinkedIn,[12][13] Microsoft,[14][15] Netflix,[16] PayPal,[17][18] Rakuten, SAP, Tuenti,[19] Voxer,[20] Walmart,[21] and Yahoo!.[22]

Contents 
1	History
2	Overview
2.1	Platform architecture
2.2	Industry support
3	Releases
4	Technical details
4.1	Threading
4.2	V8
4.3	Package management
4.4	Unified API
4.5	Event loop
5	Project governance
6	See also
7	References
8	Further reading
9	External links
History

Ryan Dahl, creator of Node.js, in 2010
Node.js was originally written by Ryan Dahl in 2009,[23] about thirteen years after the introduction of the first server-side JavaScript environment, Netscape's LiveWire Pro Web.[24] The initial release supported only Linux and Mac OS X. Its development and maintenance was led by Dahl and later sponsored by Joyent.[25]

Dahl was inspired to create Node.js after seeing a file upload progress bar on Flickr. The browser did not know how much of the file had been uploaded and had to query the Web server. Dahl desired an easier way.[6][26]

Dahl criticized the limited possibilities of the most popular web server in 2009, Apache HTTP Server, to handle a lot of concurrent connections (up to 10,000 and more) and the most common way of creating code (sequential programming), when code either blocked the entire process or implied multiple execution stacks in the case of simultaneous connections.[27]

Dahl demonstrated the project at the inaugural European JSConf on November 8, 2009.[28][29][30] Node.js combined Google's V8 JavaScript engine, an event loop, and a low-level I/O API.[31]

In January 2010, a package manager was introduced for the Node.js environment called npm.[32] The package manager makes it easier for programmers to publish and share source code of Node.js libraries and is designed to simplify installation, updating, and uninstallation of libraries.[31]

In June 2011, Microsoft and Joyent implemented a native Windows version of Node.js.[33] The first Node.js build supporting Windows was released in July 2011.

In January 2012, Dahl stepped aside, promoting coworker and npm creator Isaac Schlueter to manage the project.[34] In January 2014, Schlueter announced that Timothy J. Fontaine would lead the project.[35]

In December 2014, Fedor Indutny started io.js, a fork of Node.js. Due to the internal conflict over Joyent's governance, io.js was created as an open governance alternative with a separate technical committee.[36][37] Unlike Node.js,[38] the authors planned to keep io.js up-to-date with the latest releases of the Google V8 JavaScript engine.[39]

In February 2015, the intent to form a neutral Node.js Foundation was announced. By June 2015, the Node.js and io.js communities voted to work together under the Node.js Foundation.[40]

In September 2015, Node.js v0.12 and io.js v3.3 were merged back together into Node v4.0.[41] This brought V8 ES6 features into Node.js, and a long-term support release cycle.[42] As of 2016, the io.js website recommends that developers switch back to Node.js and that no further releases of io.js are planned due to the merger.[43]

Overview
Node.js allows the creation of Web servers and networking tools using JavaScript and a collection of "modules" that handle various core functionality.[28][31][44][45][46] Modules are provided for file system I/O, networking (DNS, HTTP, TCP, TLS/SSL, or UDP), binary data (buffers), cryptography functions, data streams, and other core functions.[31][45][47] Node.js's modules use an API designed to reduce the complexity of writing server applications.[31][45]

Node.js is officially supported on Linux, macOS, Microsoft Windows, SmartOS, FreeBSD, and IBM AIX.[3] The provided source code may also be built on similar operating systems or be modified by third parties to support others such as NonStop[48] and Unix servers. Alternatively, they can be written with CoffeeScript[49] (a JavaScript alternative), Dart or TypeScript (strongly typed forms of JavaScript), or any other language that can compile to JavaScript.[49][50]

Node.js is primarily used to build network programs such as Web servers.[44] The biggest difference between Node.js and PHP is that most functions in PHP block until completion (commands execute only after previous commands finish), while Node.js functions are non-blocking (commands execute concurrently or even in parallel,[51][52] and use callbacks to signal completion or failure).[44]

Platform architecture
Node.js brings event-driven programming to web servers, enabling development of fast web servers in JavaScript.[31] Developers can create highly scalable servers without using threading, by using a simplified model of event-driven programming that uses callbacks to signal the completion of a task.[31] Node.js connects the ease of a scripting language (JavaScript) with the power of Unix network programming.[31]

Node.js was built on the Google V8 JavaScript engine since it was open-sourced under the BSD license. It is extremely fast and proficient with internet fundamentals such as HTTP, DNS, TCP.[28] Also, JavaScript was a well-known language, making Node.js immediately accessible to the entire web development community.[28]

Industry support
There are thousands of open-source libraries for Node.js, most of them hosted on the npm website. The Node.js developer community has two main mailing lists and the IRC channel #node.js on freenode. There are multiple developer conferences and events that support the Node.js community including NodeConf, Node Interactive and Node Summit as well as a number of regional events.

The open-source community has developed web frameworks to accelerate the development of applications. Such frameworks include Connect, Express.js, Socket.IO, Koa.js, Hapi.js, Sails.js, Meteor, Derby, and many others.[31][53] Various packages have also been created for interfacing with other languages or runtime environments such as Microsoft .NET.[54]

Modern desktop IDEs provide editing and debugging features specifically for Node.js applications. Such IDEs include Atom, Brackets, JetBrains WebStorm,[55][56] Microsoft Visual Studio (with Node.js Tools for Visual Studio,[57] or TypeScript with Node definitions,[58][59][60][61]) NetBeans,[62] Nodeclipse Enide Studio [63] (Eclipse-based), and Visual Studio Code.[64][65] Certain online web-based IDEs also support Node.js, such as Codeanywhere, Codenvy, Cloud9 IDE, Koding, and the visual flow editor in Node-RED.

Releases
Release	Code name	Release date	LTS status	Active LTS start	Maintenance start	Maintenance end
v0.10.x		2013-03-11	End-of-life	-	2015-10-01	2016-10-31
v0.12.x		2015-02-06	End-of-life	-	2016-04-01	2016-12-31
4.x	Argon[66]	2015-09-08	End-of-life	2015-10-01	2017-04-01	2018-04-30
5.x		2015-10-29	No LTS	N/A	2016-06-30
6.x	Boron[66]	2016-04-26	Maintenance	2016-10-18	2018-04-30	April 2019
7.x		2016-10-25	No LTS	N/A	2017-06-30
8.x	Carbon[66]	2017-05-30	Active	2017-10-31	April 2019	December 2019
9.x		2017-10-01	No LTS	N/A	June 2018
10.x	Dubnium[66]	2018-04-24	Active	October 2018	April 2020	April 2021
11.x[66]		2018-10-23	No LTS	N/A	June 2019
New major releases of Node.js are cut from the GitHub master branch every six months. Even-numbered versions are cut in April and odd-numbered versions are cut in October. When a new odd version is released, the previous even version undergoes transition to Long Term Support (LTS), which gives that version 18 months of active support from the date it is designated LTS. After these 18 months expire, an LTS release receives an additional 12 months of maintenance support. An active version receives non-breaking backports of changes a few weeks after they land in the current release. A maintenance release only receives critical fixes and documentation updates.[66] The LTS Working Group manages strategy and policy in collaboration with the Technical Steering Committee of the Node.js Foundation.

Technical details

This section may be too technical for most readers to understand. Please help improve it to make it understandable to non-experts, without removing the technical details. (August 2015) (Learn how and when to remove this template message)
Node.js is a Javascript runtime environment that processes incoming requests in a loop, called the event loop.

Threading
Node.js operates on a single thread, using non-blocking I/O calls, allowing it to support tens of thousands of concurrent connections without incurring the cost of thread context switching.[67] The design of sharing a single thread among all the requests that use the observer pattern is intended for building highly concurrent applications, where any function performing I/O must use a callback. To accommodate the single-threaded event loop, Node.js uses the libuv libraryâ€”which, in turn, uses a fixed-sized thread pool that handles some of the non-blocking asynchronous I/O operations.[6]

A downside of this single-threaded approach is that Node.js doesn't allow vertical scaling by increasing the number of CPU cores of the machine it is running on without using an additional module, such as cluster,[51] StrongLoop Process Manager,[68] or pm2.[69] However, developers can increase the default number of threads in the libuv thread pool. The server operating system (OS) is likely to distribute these threads across multiple cores.[70]

A thread pool handles execution of parallel tasks in Node.js. The main thread call functions post tasks to the shared task queue, which threads in the thread pool pull and execute. Inherently non-blocking system functions such as networking translate to kernel-side non-blocking sockets, while inherently blocking system functions such as file I/O run in a blocking way on their own threads. When a thread in the thread pool completes a task, it informs the main thread of this, which in turn, wakes up and executes the registered callback. Since Node.js handles callbacks in serial on the main thread, long lasting computations and other CPU-bound tasks freeze the entire event-loop until completion.[citation needed]

V8
V8 is the JavaScript execution engine built for Google Chrome and open-sourced by Google in 2008. Written in C++, V8 compiles JavaScript source code to native machine code instead of interpreting it in real time.[6]

Node.js uses libuv to handle asynchronous events. Libuv is an abstraction layer for network and file system functionality on both Windows and POSIX-based systems such as Linux, macOS, OSS on NonStop, and Unix.

The core functionality of Node.js resides in a JavaScript library. The Node.js bindings, written in C++, connect these technologies to each other and to the operating system.

Package management
npm is the pre-installed package manager for the Node.js server platform. It installs Node.js programs from the npm registry, organizing the installation and management of third-party Node.js programs. Packages in the npm registry can range from simple helper libraries such as Lodash to task runners such as Grunt.

Unified API
Node.js can be combined with a browser, a database that supports JSON data (such as Postgres,[71] MongoDB, or CouchDB) and JSON for a unified JavaScript development stack. With the adaptation of what were essentially server-side development patterns such as MVC, MVP, MVVM, etc., Node.js allows the reuse of the same model and service interface between client-side and server-side.

Event loop
Node.js registers with the operating system so the OS notifies it of connections and issues a callback. Within the Node.js runtime, each connection is a small heap allocation. Traditionally, relatively heavyweight OS processes or threads handled each connection. Node.js uses an event loop for scalability, instead of processes or threads.[72] In contrast to other event-driven servers, Node.js's event loop does not need to be called explicitly. Instead callbacks are defined, and the server automatically enters the event loop at the end of the callback definition. Node.js exits the event loop when there are no further callbacks to be performed.

Project governance
In 2015, various branches of the greater Node.js community began working under the vendor-neutral Node.js Foundation. The stated purpose of the organization "is to enable widespread adoption and help accelerate development of Node.js and other related modules through an open governance model that encourages participation, technical contribution, and a framework for long-term stewardship by an ecosystem invested in Node.js' success."[73]

The Node.js Foundation Technical Steering Committee (TSC) is the technical governing body of the Node.js Foundation. The TSC is responsible for the core Node.js repo as well as dependent and adjacent projects. Generally the TSC delegates administration of these projects to working groups or committees.[74] The LTS group that manages long term supported releases is one such group. Other current groups include: Website, Streams, Build, Diagnostics, i18n, Evangelism, Docker, Addon API, Benchmarking, Post-mortem, Intl, Documentation, and Testing.[75]

In August, 2017, a governance breakdown precipitated efforts to repair the resulting damage and to create a path to future stability of governance.[76]

See also
	Free software portal
List of server-side JavaScript implementations
List of JavaScript libraries
MEAN (software bundle)
Online JavaScript IDE
Rhino (JavaScript engine)
Application server

Node.js
Node.js logo.svg
Original author(s)	Ryan Dahl
Developer(s)	Joyent
Initial release	May 27, 2009; 9 years ago[1]
Stable release	
10.4.0 / June 6, 2018; 6 days ago[2]
Repository	
https://github.com/nodejs/node
Edit this at Wikidata
Written in	C, C++, JavaScript
Operating system	Linux, macOS, Microsoft Windows, SmartOS, FreeBSD, IBM AIX[3]
Type	Run-time environment
License	MIT[4]
Website	nodejs.org
Node.js is an open-source, cross-platform JavaScript run-time environment that executes JavaScript code server-side. Historically, JavaScript was used primarily for client-side scripting, in which scripts written in JavaScript are embedded in a webpage's HTML and run client-side by a JavaScript engine in the user's web browser. Node.js lets developers use JavaScript for server-side scriptingâ€”running scripts server-side to produce dynamic web page content before the page is sent to the user's web browser. Consequently, Node.js represents a "JavaScript everywhere" paradigm,[5] unifying web application development around a single programming language, rather than different languages for server side and client side scripts.

Though .js is the conventional filename extension for JavaScript code, the name "Node.js" does not refer to a particular file in this context and is merely the name of the product. Node.js has an event-driven architecture capable of asynchronous I/O. These design choices aim to optimize throughput and scalability in web applications with many input/output operations, as well as for real-time Web applications (e.g., real-time communication programs and browser games).[6]

The Node.js distributed development project, governed by the Node.js Foundation,[7] is facilitated by the Linux Foundation's Collaborative Projects program.[8]

Corporate users of Node.js software include GoDaddy,[9] Groupon,[10] IBM,[11] LinkedIn,[12][13] Microsoft,[14][15] Netflix,[16] PayPal,[17][18] Rakuten, SAP, Tuenti,[19] Voxer,[20] Walmart,[21] and Yahoo!.[22]

Contents 
1	History
2	Overview
2.1	Platform architecture
2.2	Industry support
3	Releases
4	Technical details
4.1	Threading
4.2	V8
4.3	Package management
4.4	Unified API
4.5	Event loop
5	Project governance
6	See also
7	References
8	Further reading
9	External links
History

Ryan Dahl, creator of Node.js, in 2010
Node.js was originally written by Ryan Dahl in 2009,[23] about thirteen years after the introduction of the first server-side JavaScript environment, Netscape's LiveWire Pro Web.[24] The initial release supported only Linux and Mac OS X. Its development and maintenance was led by Dahl and later sponsored by Joyent.[25]

Dahl was inspired to create Node.js after seeing a file upload progress bar on Flickr. The browser did not know how much of the file had been uploaded and had to query the Web server. Dahl desired an easier way.[6][26]

Dahl criticized the limited possibilities of the most popular web server in 2009, Apache HTTP Server, to handle a lot of concurrent connections (up to 10,000 and more) and the most common way of creating code (sequential programming), when code either blocked the entire process or implied multiple execution stacks in the case of simultaneous connections.[27]

Dahl demonstrated the project at the inaugural European JSConf on November 8, 2009.[28][29][30] Node.js combined Google's V8 JavaScript engine, an event loop, and a low-level I/O API.[31]

In January 2010, a package manager was introduced for the Node.js environment called npm.[32] The package manager makes it easier for programmers to publish and share source code of Node.js libraries and is designed to simplify installation, updating, and uninstallation of libraries.[31]

In June 2011, Microsoft and Joyent implemented a native Windows version of Node.js.[33] The first Node.js build supporting Windows was released in July 2011.

In January 2012, Dahl stepped aside, promoting coworker and npm creator Isaac Schlueter to manage the project.[34] In January 2014, Schlueter announced that Timothy J. Fontaine would lead the project.[35]

In December 2014, Fedor Indutny started io.js, a fork of Node.js. Due to the internal conflict over Joyent's governance, io.js was created as an open governance alternative with a separate technical committee.[36][37] Unlike Node.js,[38] the authors planned to keep io.js up-to-date with the latest releases of the Google V8 JavaScript engine.[39]

In February 2015, the intent to form a neutral Node.js Foundation was announced. By June 2015, the Node.js and io.js communities voted to work together under the Node.js Foundation.[40]

In September 2015, Node.js v0.12 and io.js v3.3 were merged back together into Node v4.0.[41] This brought V8 ES6 features into Node.js, and a long-term support release cycle.[42] As of 2016, the io.js website recommends that developers switch back to Node.js and that no further releases of io.js are planned due to the merger.[43]

Overview
Node.js allows the creation of Web servers and networking tools using JavaScript and a collection of "modules" that handle various core functionality.[28][31][44][45][46] Modules are provided for file system I/O, networking (DNS, HTTP, TCP, TLS/SSL, or UDP), binary data (buffers), cryptography functions, data streams, and other core functions.[31][45][47] Node.js's modules use an API designed to reduce the complexity of writing server applications.[31][45]

Node.js is officially supported on Linux, macOS, Microsoft Windows, SmartOS, FreeBSD, and IBM AIX.[3] The provided source code may also be built on similar operating systems or be modified by third parties to support others such as NonStop[48] and Unix servers. Alternatively, they can be written with CoffeeScript[49] (a JavaScript alternative), Dart or TypeScript (strongly typed forms of JavaScript), or any other language that can compile to JavaScript.[49][50]

Node.js is primarily used to build network programs such as Web servers.[44] The biggest difference between Node.js and PHP is that most functions in PHP block until completion (commands execute only after previous commands finish), while Node.js functions are non-blocking (commands execute concurrently or even in parallel,[51][52] and use callbacks to signal completion or failure).[44]

Platform architecture
Node.js brings event-driven programming to web servers, enabling development of fast web servers in JavaScript.[31] Developers can create highly scalable servers without using threading, by using a simplified model of event-driven programming that uses callbacks to signal the completion of a task.[31] Node.js connects the ease of a scripting language (JavaScript) with the power of Unix network programming.[31]

Node.js was built on the Google V8 JavaScript engine since it was open-sourced under the BSD license. It is extremely fast and proficient with internet fundamentals such as HTTP, DNS, TCP.[28] Also, JavaScript was a well-known language, making Node.js immediately accessible to the entire web development community.[28]

Industry support
There are thousands of open-source libraries for Node.js, most of them hosted on the npm website. The Node.js developer community has two main mailing lists and the IRC channel #node.js on freenode. There are multiple developer conferences and events that support the Node.js community including NodeConf, Node Interactive and Node Summit as well as a number of regional events.

The open-source community has developed web frameworks to accelerate the development of applications. Such frameworks include Connect, Express.js, Socket.IO, Koa.js, Hapi.js, Sails.js, Meteor, Derby, and many others.[31][53] Various packages have also been created for interfacing with other languages or runtime environments such as Microsoft .NET.[54]

Modern desktop IDEs provide editing and debugging features specifically for Node.js applications. Such IDEs include Atom, Brackets, JetBrains WebStorm,[55][56] Microsoft Visual Studio (with Node.js Tools for Visual Studio,[57] or TypeScript with Node definitions,[58][59][60][61]) NetBeans,[62] Nodeclipse Enide Studio [63] (Eclipse-based), and Visual Studio Code.[64][65] Certain online web-based IDEs also support Node.js, such as Codeanywhere, Codenvy, Cloud9 IDE, Koding, and the visual flow editor in Node-RED.

Releases
Release	Code name	Release date	LTS status	Active LTS start	Maintenance start	Maintenance end
v0.10.x		2013-03-11	End-of-life	-	2015-10-01	2016-10-31
v0.12.x		2015-02-06	End-of-life	-	2016-04-01	2016-12-31
4.x	Argon[66]	2015-09-08	End-of-life	2015-10-01	2017-04-01	2018-04-30
5.x		2015-10-29	No LTS	N/A	2016-06-30
6.x	Boron[66]	2016-04-26	Maintenance	2016-10-18	2018-04-30	April 2019
7.x		2016-10-25	No LTS	N/A	2017-06-30
8.x	Carbon[66]	2017-05-30	Active	2017-10-31	April 2019	December 2019
9.x		2017-10-01	No LTS	N/A	June 2018
10.x	Dubnium[66]	2018-04-24	Active	October 2018	April 2020	April 2021
11.x[66]		2018-10-23	No LTS	N/A	June 2019
New major releases of Node.js are cut from the GitHub master branch every six months. Even-numbered versions are cut in April and odd-numbered versions are cut in October. When a new odd version is released, the previous even version undergoes transition to Long Term Support (LTS), which gives that version 18 months of active support from the date it is designated LTS. After these 18 months expire, an LTS release receives an additional 12 months of maintenance support. An active version receives non-breaking backports of changes a few weeks after they land in the current release. A maintenance release only receives critical fixes and documentation updates.[66] The LTS Working Group manages strategy and policy in collaboration with the Technical Steering Committee of the Node.js Foundation.

Technical details

This section may be too technical for most readers to understand. Please help improve it to make it understandable to non-experts, without removing the technical details. (August 2015) (Learn how and when to remove this template message)
Node.js is a Javascript runtime environment that processes incoming requests in a loop, called the event loop.

Threading
Node.js operates on a single thread, using non-blocking I/O calls, allowing it to support tens of thousands of concurrent connections without incurring the cost of thread context switching.[67] The design of sharing a single thread among all the requests that use the observer pattern is intended for building highly concurrent applications, where any function performing I/O must use a callback. To accommodate the single-threaded event loop, Node.js uses the libuv libraryâ€”which, in turn, uses a fixed-sized thread pool that handles some of the non-blocking asynchronous I/O operations.[6]

A downside of this single-threaded approach is that Node.js doesn't allow vertical scaling by increasing the number of CPU cores of the machine it is running on without using an additional module, such as cluster,[51] StrongLoop Process Manager,[68] or pm2.[69] However, developers can increase the default number of threads in the libuv thread pool. The server operating system (OS) is likely to distribute these threads across multiple cores.[70]

A thread pool handles execution of parallel tasks in Node.js. The main thread call functions post tasks to the shared task queue, which threads in the thread pool pull and execute. Inherently non-blocking system functions such as networking translate to kernel-side non-blocking sockets, while inherently blocking system functions such as file I/O run in a blocking way on their own threads. When a thread in the thread pool completes a task, it informs the main thread of this, which in turn, wakes up and executes the registered callback. Since Node.js handles callbacks in serial on the main thread, long lasting computations and other CPU-bound tasks freeze the entire event-loop until completion.[citation needed]

V8
V8 is the JavaScript execution engine built for Google Chrome and open-sourced by Google in 2008. Written in C++, V8 compiles JavaScript source code to native machine code instead of interpreting it in real time.[6]

Node.js uses libuv to handle asynchronous events. Libuv is an abstraction layer for network and file system functionality on both Windows and POSIX-based systems such as Linux, macOS, OSS on NonStop, and Unix.

The core functionality of Node.js resides in a JavaScript library. The Node.js bindings, written in C++, connect these technologies to each other and to the operating system.

Package management
npm is the pre-installed package manager for the Node.js server platform. It installs Node.js programs from the npm registry, organizing the installation and management of third-party Node.js programs. Packages in the npm registry can range from simple helper libraries such as Lodash to task runners such as Grunt.

Unified API
Node.js can be combined with a browser, a database that supports JSON data (such as Postgres,[71] MongoDB, or CouchDB) and JSON for a unified JavaScript development stack. With the adaptation of what were essentially server-side development patterns such as MVC, MVP, MVVM, etc., Node.js allows the reuse of the same model and service interface between client-side and server-side.

Event loop
Node.js registers with the operating system so the OS notifies it of connections and issues a callback. Within the Node.js runtime, each connection is a small heap allocation. Traditionally, relatively heavyweight OS processes or threads handled each connection. Node.js uses an event loop for scalability, instead of processes or threads.[72] In contrast to other event-driven servers, Node.js's event loop does not need to be called explicitly. Instead callbacks are defined, and the server automatically enters the event loop at the end of the callback definition. Node.js exits the event loop when there are no further callbacks to be performed.

Project governance
In 2015, various branches of the greater Node.js community began working under the vendor-neutral Node.js Foundation. The stated purpose of the organization "is to enable widespread adoption and help accelerate development of Node.js and other related modules through an open governance model that encourages participation, technical contribution, and a framework for long-term stewardship by an ecosystem invested in Node.js' success."[73]

The Node.js Foundation Technical Steering Committee (TSC) is the technical governing body of the Node.js Foundation. The TSC is responsible for the core Node.js repo as well as dependent and adjacent projects. Generally the TSC delegates administration of these projects to working groups or committees.[74] The LTS group that manages long term supported releases is one such group. Other current groups include: Website, Streams, Build, Diagnostics, i18n, Evangelism, Docker, Addon API, Benchmarking, Post-mortem, Intl, Documentation, and Testing.[75]

In August, 2017, a governance breakdown precipitated efforts to repair the resulting damage and to create a path to future stability of governance.[76]

See also
	Free software portal
List of server-side JavaScript implementations
List of JavaScript libraries
MEAN (software bundle)
Online JavaScript IDE
Rhino (JavaScript engine)
Application server

Node.js
Node.js logo.svg
Original author(s)	Ryan Dahl
Developer(s)	Joyent
Initial release	May 27, 2009; 9 years ago[1]
Stable release	
10.4.0 / June 6, 2018; 6 days ago[2]
Repository	
https://github.com/nodejs/node
Edit this at Wikidata
Written in	C, C++, JavaScript
Operating system	Linux, macOS, Microsoft Windows, SmartOS, FreeBSD, IBM AIX[3]
Type	Run-time environment
License	MIT[4]
Website	nodejs.org
Node.js is an open-source, cross-platform JavaScript run-time environment that executes JavaScript code server-side. Historically, JavaScript was used primarily for client-side scripting, in which scripts written in JavaScript are embedded in a webpage's HTML and run client-side by a JavaScript engine in the user's web browser. Node.js lets developers use JavaScript for server-side scriptingâ€”running scripts server-side to produce dynamic web page content before the page is sent to the user's web browser. Consequently, Node.js represents a "JavaScript everywhere" paradigm,[5] unifying web application development around a single programming language, rather than different languages for server side and client side scripts.

Though .js is the conventional filename extension for JavaScript code, the name "Node.js" does not refer to a particular file in this context and is merely the name of the product. Node.js has an event-driven architecture capable of asynchronous I/O. These design choices aim to optimize throughput and scalability in web applications with many input/output operations, as well as for real-time Web applications (e.g., real-time communication programs and browser games).[6]

The Node.js distributed development project, governed by the Node.js Foundation,[7] is facilitated by the Linux Foundation's Collaborative Projects program.[8]

Corporate users of Node.js software include GoDaddy,[9] Groupon,[10] IBM,[11] LinkedIn,[12][13] Microsoft,[14][15] Netflix,[16] PayPal,[17][18] Rakuten, SAP, Tuenti,[19] Voxer,[20] Walmart,[21] and Yahoo!.[22]

Contents 
1	History
2	Overview
2.1	Platform architecture
2.2	Industry support
3	Releases
4	Technical details
4.1	Threading
4.2	V8
4.3	Package management
4.4	Unified API
4.5	Event loop
5	Project governance
6	See also
7	References
8	Further reading
9	External links
History

Ryan Dahl, creator of Node.js, in 2010
Node.js was originally written by Ryan Dahl in 2009,[23] about thirteen years after the introduction of the first server-side JavaScript environment, Netscape's LiveWire Pro Web.[24] The initial release supported only Linux and Mac OS X. Its development and maintenance was led by Dahl and later sponsored by Joyent.[25]

Dahl was inspired to create Node.js after seeing a file upload progress bar on Flickr. The browser did not know how much of the file had been uploaded and had to query the Web server. Dahl desired an easier way.[6][26]

Dahl criticized the limited possibilities of the most popular web server in 2009, Apache HTTP Server, to handle a lot of concurrent connections (up to 10,000 and more) and the most common way of creating code (sequential programming), when code either blocked the entire process or implied multiple execution stacks in the case of simultaneous connections.[27]

Dahl demonstrated the project at the inaugural European JSConf on November 8, 2009.[28][29][30] Node.js combined Google's V8 JavaScript engine, an event loop, and a low-level I/O API.[31]

In January 2010, a package manager was introduced for the Node.js environment called npm.[32] The package manager makes it easier for programmers to publish and share source code of Node.js libraries and is designed to simplify installation, updating, and uninstallation of libraries.[31]

In June 2011, Microsoft and Joyent implemented a native Windows version of Node.js.[33] The first Node.js build supporting Windows was released in July 2011.

In January 2012, Dahl stepped aside, promoting coworker and npm creator Isaac Schlueter to manage the project.[34] In January 2014, Schlueter announced that Timothy J. Fontaine would lead the project.[35]

In December 2014, Fedor Indutny started io.js, a fork of Node.js. Due to the internal conflict over Joyent's governance, io.js was created as an open governance alternative with a separate technical committee.[36][37] Unlike Node.js,[38] the authors planned to keep io.js up-to-date with the latest releases of the Google V8 JavaScript engine.[39]

In February 2015, the intent to form a neutral Node.js Foundation was announced. By June 2015, the Node.js and io.js communities voted to work together under the Node.js Foundation.[40]

In September 2015, Node.js v0.12 and io.js v3.3 were merged back together into Node v4.0.[41] This brought V8 ES6 features into Node.js, and a long-term support release cycle.[42] As of 2016, the io.js website recommends that developers switch back to Node.js and that no further releases of io.js are planned due to the merger.[43]

Overview
Node.js allows the creation of Web servers and networking tools using JavaScript and a collection of "modules" that handle various core functionality.[28][31][44][45][46] Modules are provided for file system I/O, networking (DNS, HTTP, TCP, TLS/SSL, or UDP), binary data (buffers), cryptography functions, data streams, and other core functions.[31][45][47] Node.js's modules use an API designed to reduce the complexity of writing server applications.[31][45]

Node.js is officially supported on Linux, macOS, Microsoft Windows, SmartOS, FreeBSD, and IBM AIX.[3] The provided source code may also be built on similar operating systems or be modified by third parties to support others such as NonStop[48] and Unix servers. Alternatively, they can be written with CoffeeScript[49] (a JavaScript alternative), Dart or TypeScript (strongly typed forms of JavaScript), or any other language that can compile to JavaScript.[49][50]

Node.js is primarily used to build network programs such as Web servers.[44] The biggest difference between Node.js and PHP is that most functions in PHP block until completion (commands execute only after previous commands finish), while Node.js functions are non-blocking (commands execute concurrently or even in parallel,[51][52] and use callbacks to signal completion or failure).[44]

Platform architecture
Node.js brings event-driven programming to web servers, enabling development of fast web servers in JavaScript.[31] Developers can create highly scalable servers without using threading, by using a simplified model of event-driven programming that uses callbacks to signal the completion of a task.[31] Node.js connects the ease of a scripting language (JavaScript) with the power of Unix network programming.[31]

Node.js was built on the Google V8 JavaScript engine since it was open-sourced under the BSD license. It is extremely fast and proficient with internet fundamentals such as HTTP, DNS, TCP.[28] Also, JavaScript was a well-known language, making Node.js immediately accessible to the entire web development community.[28]

Industry support
There are thousands of open-source libraries for Node.js, most of them hosted on the npm website. The Node.js developer community has two main mailing lists and the IRC channel #node.js on freenode. There are multiple developer conferences and events that support the Node.js community including NodeConf, Node Interactive and Node Summit as well as a number of regional events.

The open-source community has developed web frameworks to accelerate the development of applications. Such frameworks include Connect, Express.js, Socket.IO, Koa.js, Hapi.js, Sails.js, Meteor, Derby, and many others.[31][53] Various packages have also been created for interfacing with other languages or runtime environments such as Microsoft .NET.[54]

Modern desktop IDEs provide editing and debugging features specifically for Node.js applications. Such IDEs include Atom, Brackets, JetBrains WebStorm,[55][56] Microsoft Visual Studio (with Node.js Tools for Visual Studio,[57] or TypeScript with Node definitions,[58][59][60][61]) NetBeans,[62] Nodeclipse Enide Studio [63] (Eclipse-based), and Visual Studio Code.[64][65] Certain online web-based IDEs also support Node.js, such as Codeanywhere, Codenvy, Cloud9 IDE, Koding, and the visual flow editor in Node-RED.

Releases
Release	Code name	Release date	LTS status	Active LTS start	Maintenance start	Maintenance end
v0.10.x		2013-03-11	End-of-life	-	2015-10-01	2016-10-31
v0.12.x		2015-02-06	End-of-life	-	2016-04-01	2016-12-31
4.x	Argon[66]	2015-09-08	End-of-life	2015-10-01	2017-04-01	2018-04-30
5.x		2015-10-29	No LTS	N/A	2016-06-30
6.x	Boron[66]	2016-04-26	Maintenance	2016-10-18	2018-04-30	April 2019
7.x		2016-10-25	No LTS	N/A	2017-06-30
8.x	Carbon[66]	2017-05-30	Active	2017-10-31	April 2019	December 2019
9.x		2017-10-01	No LTS	N/A	June 2018
10.x	Dubnium[66]	2018-04-24	Active	October 2018	April 2020	April 2021
11.x[66]		2018-10-23	No LTS	N/A	June 2019
New major releases of Node.js are cut from the GitHub master branch every six months. Even-numbered versions are cut in April and odd-numbered versions are cut in October. When a new odd version is released, the previous even version undergoes transition to Long Term Support (LTS), which gives that version 18 months of active support from the date it is designated LTS. After these 18 months expire, an LTS release receives an additional 12 months of maintenance support. An active version receives non-breaking backports of changes a few weeks after they land in the current release. A maintenance release only receives critical fixes and documentation updates.[66] The LTS Working Group manages strategy and policy in collaboration with the Technical Steering Committee of the Node.js Foundation.

Technical details

This section may be too technical for most readers to understand. Please help improve it to make it understandable to non-experts, without removing the technical details. (August 2015) (Learn how and when to remove this template message)
Node.js is a Javascript runtime environment that processes incoming requests in a loop, called the event loop.

Threading
Node.js operates on a single thread, using non-blocking I/O calls, allowing it to support tens of thousands of concurrent connections without incurring the cost of thread context switching.[67] The design of sharing a single thread among all the requests that use the observer pattern is intended for building highly concurrent applications, where any function performing I/O must use a callback. To accommodate the single-threaded event loop, Node.js uses the libuv libraryâ€”which, in turn, uses a fixed-sized thread pool that handles some of the non-blocking asynchronous I/O operations.[6]

A downside of this single-threaded approach is that Node.js doesn't allow vertical scaling by increasing the number of CPU cores of the machine it is running on without using an additional module, such as cluster,[51] StrongLoop Process Manager,[68] or pm2.[69] However, developers can increase the default number of threads in the libuv thread pool. The server operating system (OS) is likely to distribute these threads across multiple cores.[70]

A thread pool handles execution of parallel tasks in Node.js. The main thread call functions post tasks to the shared task queue, which threads in the thread pool pull and execute. Inherently non-blocking system functions such as networking translate to kernel-side non-blocking sockets, while inherently blocking system functions such as file I/O run in a blocking way on their own threads. When a thread in the thread pool completes a task, it informs the main thread of this, which in turn, wakes up and executes the registered callback. Since Node.js handles callbacks in serial on the main thread, long lasting computations and other CPU-bound tasks freeze the entire event-loop until completion.[citation needed]

V8
V8 is the JavaScript execution engine built for Google Chrome and open-sourced by Google in 2008. Written in C++, V8 compiles JavaScript source code to native machine code instead of interpreting it in real time.[6]

Node.js uses libuv to handle asynchronous events. Libuv is an abstraction layer for network and file system functionality on both Windows and POSIX-based systems such as Linux, macOS, OSS on NonStop, and Unix.

The core functionality of Node.js resides in a JavaScript library. The Node.js bindings, written in C++, connect these technologies to each other and to the operating system.

Package management
npm is the pre-installed package manager for the Node.js server platform. It installs Node.js programs from the npm registry, organizing the installation and management of third-party Node.js programs. Packages in the npm registry can range from simple helper libraries such as Lodash to task runners such as Grunt.

Unified API
Node.js can be combined with a browser, a database that supports JSON data (such as Postgres,[71] MongoDB, or CouchDB) and JSON for a unified JavaScript development stack. With the adaptation of what were essentially server-side development patterns such as MVC, MVP, MVVM, etc., Node.js allows the reuse of the same model and service interface between client-side and server-side.

Event loop
Node.js registers with the operating system so the OS notifies it of connections and issues a callback. Within the Node.js runtime, each connection is a small heap allocation. Traditionally, relatively heavyweight OS processes or threads handled each connection. Node.js uses an event loop for scalability, instead of processes or threads.[72] In contrast to other event-driven servers, Node.js's event loop does not need to be called explicitly. Instead callbacks are defined, and the server automatically enters the event loop at the end of the callback definition. Node.js exits the event loop when there are no further callbacks to be performed.

Project governance
In 2015, various branches of the greater Node.js community began working under the vendor-neutral Node.js Foundation. The stated purpose of the organization "is to enable widespread adoption and help accelerate development of Node.js and other related modules through an open governance model that encourages participation, technical contribution, and a framework for long-term stewardship by an ecosystem invested in Node.js' success."[73]

The Node.js Foundation Technical Steering Committee (TSC) is the technical governing body of the Node.js Foundation. The TSC is responsible for the core Node.js repo as well as dependent and adjacent projects. Generally the TSC delegates administration of these projects to working groups or committees.[74] The LTS group that manages long term supported releases is one such group. Other current groups include: Website, Streams, Build, Diagnostics, i18n, Evangelism, Docker, Addon API, Benchmarking, Post-mortem, Intl, Documentation, and Testing.[75]

In August, 2017, a governance breakdown precipitated efforts to repair the resulting damage and to create a path to future stability of governance.[76]

See also
	Free software portal
List of server-side JavaScript implementations
List of JavaScript libraries
MEAN (software bundle)
Online JavaScript IDE
Rhino (JavaScript engine)
Application server

Node.js
Node.js logo.svg
Original author(s)	Ryan Dahl
Developer(s)	Joyent
Initial release	May 27, 2009; 9 years ago[1]
Stable release	
10.4.0 / June 6, 2018; 6 days ago[2]
Repository	
https://github.com/nodejs/node
Edit this at Wikidata
Written in	C, C++, JavaScript
Operating system	Linux, macOS, Microsoft Windows, SmartOS, FreeBSD, IBM AIX[3]
Type	Run-time environment
License	MIT[4]
Website	nodejs.org
Node.js is an open-source, cross-platform JavaScript run-time environment that executes JavaScript code server-side. Historically, JavaScript was used primarily for client-side scripting, in which scripts written in JavaScript are embedded in a webpage's HTML and run client-side by a JavaScript engine in the user's web browser. Node.js lets developers use JavaScript for server-side scriptingâ€”running scripts server-side to produce dynamic web page content before the page is sent to the user's web browser. Consequently, Node.js represents a "JavaScript everywhere" paradigm,[5] unifying web application development around a single programming language, rather than different languages for server side and client side scripts.

Though .js is the conventional filename extension for JavaScript code, the name "Node.js" does not refer to a particular file in this context and is merely the name of the product. Node.js has an event-driven architecture capable of asynchronous I/O. These design choices aim to optimize throughput and scalability in web applications with many input/output operations, as well as for real-time Web applications (e.g., real-time communication programs and browser games).[6]

The Node.js distributed development project, governed by the Node.js Foundation,[7] is facilitated by the Linux Foundation's Collaborative Projects program.[8]

Corporate users of Node.js software include GoDaddy,[9] Groupon,[10] IBM,[11] LinkedIn,[12][13] Microsoft,[14][15] Netflix,[16] PayPal,[17][18] Rakuten, SAP, Tuenti,[19] Voxer,[20] Walmart,[21] and Yahoo!.[22]

Contents 
1	History
2	Overview
2.1	Platform architecture
2.2	Industry support
3	Releases
4	Technical details
4.1	Threading
4.2	V8
4.3	Package management
4.4	Unified API
4.5	Event loop
5	Project governance
6	See also
7	References
8	Further reading
9	External links
History

Ryan Dahl, creator of Node.js, in 2010
Node.js was originally written by Ryan Dahl in 2009,[23] about thirteen years after the introduction of the first server-side JavaScript environment, Netscape's LiveWire Pro Web.[24] The initial release supported only Linux and Mac OS X. Its development and maintenance was led by Dahl and later sponsored by Joyent.[25]

Dahl was inspired to create Node.js after seeing a file upload progress bar on Flickr. The browser did not know how much of the file had been uploaded and had to query the Web server. Dahl desired an easier way.[6][26]

Dahl criticized the limited possibilities of the most popular web server in 2009, Apache HTTP Server, to handle a lot of concurrent connections (up to 10,000 and more) and the most common way of creating code (sequential programming), when code either blocked the entire process or implied multiple execution stacks in the case of simultaneous connections.[27]

Dahl demonstrated the project at the inaugural European JSConf on November 8, 2009.[28][29][30] Node.js combined Google's V8 JavaScript engine, an event loop, and a low-level I/O API.[31]

In January 2010, a package manager was introduced for the Node.js environment called npm.[32] The package manager makes it easier for programmers to publish and share source code of Node.js libraries and is designed to simplify installation, updating, and uninstallation of libraries.[31]

In June 2011, Microsoft and Joyent implemented a native Windows version of Node.js.[33] The first Node.js build supporting Windows was released in July 2011.

In January 2012, Dahl stepped aside, promoting coworker and npm creator Isaac Schlueter to manage the project.[34] In January 2014, Schlueter announced that Timothy J. Fontaine would lead the project.[35]

In December 2014, Fedor Indutny started io.js, a fork of Node.js. Due to the internal conflict over Joyent's governance, io.js was created as an open governance alternative with a separate technical committee.[36][37] Unlike Node.js,[38] the authors planned to keep io.js up-to-date with the latest releases of the Google V8 JavaScript engine.[39]

In February 2015, the intent to form a neutral Node.js Foundation was announced. By June 2015, the Node.js and io.js communities voted to work together under the Node.js Foundation.[40]

In September 2015, Node.js v0.12 and io.js v3.3 were merged back together into Node v4.0.[41] This brought V8 ES6 features into Node.js, and a long-term support release cycle.[42] As of 2016, the io.js website recommends that developers switch back to Node.js and that no further releases of io.js are planned due to the merger.[43]

Overview
Node.js allows the creation of Web servers and networking tools using JavaScript and a collection of "modules" that handle various core functionality.[28][31][44][45][46] Modules are provided for file system I/O, networking (DNS, HTTP, TCP, TLS/SSL, or UDP), binary data (buffers), cryptography functions, data streams, and other core functions.[31][45][47] Node.js's modules use an API designed to reduce the complexity of writing server applications.[31][45]

Node.js is officially supported on Linux, macOS, Microsoft Windows, SmartOS, FreeBSD, and IBM AIX.[3] The provided source code may also be built on similar operating systems or be modified by third parties to support others such as NonStop[48] and Unix servers. Alternatively, they can be written with CoffeeScript[49] (a JavaScript alternative), Dart or TypeScript (strongly typed forms of JavaScript), or any other language that can compile to JavaScript.[49][50]

Node.js is primarily used to build network programs such as Web servers.[44] The biggest difference between Node.js and PHP is that most functions in PHP block until completion (commands execute only after previous commands finish), while Node.js functions are non-blocking (commands execute concurrently or even in parallel,[51][52] and use callbacks to signal completion or failure).[44]

Platform architecture
Node.js brings event-driven programming to web servers, enabling development of fast web servers in JavaScript.[31] Developers can create highly scalable servers without using threading, by using a simplified model of event-driven programming that uses callbacks to signal the completion of a task.[31] Node.js connects the ease of a scripting language (JavaScript) with the power of Unix network programming.[31]

Node.js was built on the Google V8 JavaScript engine since it was open-sourced under the BSD license. It is extremely fast and proficient with internet fundamentals such as HTTP, DNS, TCP.[28] Also, JavaScript was a well-known language, making Node.js immediately accessible to the entire web development community.[28]

Industry support
There are thousands of open-source libraries for Node.js, most of them hosted on the npm website. The Node.js developer community has two main mailing lists and the IRC channel #node.js on freenode. There are multiple developer conferences and events that support the Node.js community including NodeConf, Node Interactive and Node Summit as well as a number of regional events.

The open-source community has developed web frameworks to accelerate the development of applications. Such frameworks include Connect, Express.js, Socket.IO, Koa.js, Hapi.js, Sails.js, Meteor, Derby, and many others.[31][53] Various packages have also been created for interfacing with other languages or runtime environments such as Microsoft .NET.[54]

Modern desktop IDEs provide editing and debugging features specifically for Node.js applications. Such IDEs include Atom, Brackets, JetBrains WebStorm,[55][56] Microsoft Visual Studio (with Node.js Tools for Visual Studio,[57] or TypeScript with Node definitions,[58][59][60][61]) NetBeans,[62] Nodeclipse Enide Studio [63] (Eclipse-based), and Visual Studio Code.[64][65] Certain online web-based IDEs also support Node.js, such as Codeanywhere, Codenvy, Cloud9 IDE, Koding, and the visual flow editor in Node-RED.

Releases
Release	Code name	Release date	LTS status	Active LTS start	Maintenance start	Maintenance end
v0.10.x		2013-03-11	End-of-life	-	2015-10-01	2016-10-31
v0.12.x		2015-02-06	End-of-life	-	2016-04-01	2016-12-31
4.x	Argon[66]	2015-09-08	End-of-life	2015-10-01	2017-04-01	2018-04-30
5.x		2015-10-29	No LTS	N/A	2016-06-30
6.x	Boron[66]	2016-04-26	Maintenance	2016-10-18	2018-04-30	April 2019
7.x		2016-10-25	No LTS	N/A	2017-06-30
8.x	Carbon[66]	2017-05-30	Active	2017-10-31	April 2019	December 2019
9.x		2017-10-01	No LTS	N/A	June 2018
10.x	Dubnium[66]	2018-04-24	Active	October 2018	April 2020	April 2021
11.x[66]		2018-10-23	No LTS	N/A	June 2019
New major releases of Node.js are cut from the GitHub master branch every six months. Even-numbered versions are cut in April and odd-numbered versions are cut in October. When a new odd version is released, the previous even version undergoes transition to Long Term Support (LTS), which gives that version 18 months of active support from the date it is designated LTS. After these 18 months expire, an LTS release receives an additional 12 months of maintenance support. An active version receives non-breaking backports of changes a few weeks after they land in the current release. A maintenance release only receives critical fixes and documentation updates.[66] The LTS Working Group manages strategy and policy in collaboration with the Technical Steering Committee of the Node.js Foundation.

Technical details

This section may be too technical for most readers to understand. Please help improve it to make it understandable to non-experts, without removing the technical details. (August 2015) (Learn how and when to remove this template message)
Node.js is a Javascript runtime environment that processes incoming requests in a loop, called the event loop.

Threading
Node.js operates on a single thread, using non-blocking I/O calls, allowing it to support tens of thousands of concurrent connections without incurring the cost of thread context switching.[67] The design of sharing a single thread among all the requests that use the observer pattern is intended for building highly concurrent applications, where any function performing I/O must use a callback. To accommodate the single-threaded event loop, Node.js uses the libuv libraryâ€”which, in turn, uses a fixed-sized thread pool that handles some of the non-blocking asynchronous I/O operations.[6]

A downside of this single-threaded approach is that Node.js doesn't allow vertical scaling by increasing the number of CPU cores of the machine it is running on without using an additional module, such as cluster,[51] StrongLoop Process Manager,[68] or pm2.[69] However, developers can increase the default number of threads in the libuv thread pool. The server operating system (OS) is likely to distribute these threads across multiple cores.[70]

A thread pool handles execution of parallel tasks in Node.js. The main thread call functions post tasks to the shared task queue, which threads in the thread pool pull and execute. Inherently non-blocking system functions such as networking translate to kernel-side non-blocking sockets, while inherently blocking system functions such as file I/O run in a blocking way on their own threads. When a thread in the thread pool completes a task, it informs the main thread of this, which in turn, wakes up and executes the registered callback. Since Node.js handles callbacks in serial on the main thread, long lasting computations and other CPU-bound tasks freeze the entire event-loop until completion.[citation needed]

V8
V8 is the JavaScript execution engine built for Google Chrome and open-sourced by Google in 2008. Written in C++, V8 compiles JavaScript source code to native machine code instead of interpreting it in real time.[6]

Node.js uses libuv to handle asynchronous events. Libuv is an abstraction layer for network and file system functionality on both Windows and POSIX-based systems such as Linux, macOS, OSS on NonStop, and Unix.

The core functionality of Node.js resides in a JavaScript library. The Node.js bindings, written in C++, connect these technologies to each other and to the operating system.

Package management
npm is the pre-installed package manager for the Node.js server platform. It installs Node.js programs from the npm registry, organizing the installation and management of third-party Node.js programs. Packages in the npm registry can range from simple helper libraries such as Lodash to task runners such as Grunt.

Unified API
Node.js can be combined with a browser, a database that supports JSON data (such as Postgres,[71] MongoDB, or CouchDB) and JSON for a unified JavaScript development stack. With the adaptation of what were essentially server-side development patterns such as MVC, MVP, MVVM, etc., Node.js allows the reuse of the same model and service interface between client-side and server-side.

Event loop
Node.js registers with the operating system so the OS notifies it of connections and issues a callback. Within the Node.js runtime, each connection is a small heap allocation. Traditionally, relatively heavyweight OS processes or threads handled each connection. Node.js uses an event loop for scalability, instead of processes or threads.[72] In contrast to other event-driven servers, Node.js's event loop does not need to be called explicitly. Instead callbacks are defined, and the server automatically enters the event loop at the end of the callback definition. Node.js exits the event loop when there are no further callbacks to be performed.

Project governance
In 2015, various branches of the greater Node.js community began working under the vendor-neutral Node.js Foundation. The stated purpose of the organization "is to enable widespread adoption and help accelerate development of Node.js and other related modules through an open governance model that encourages participation, technical contribution, and a framework for long-term stewardship by an ecosystem invested in Node.js' success."[73]

The Node.js Foundation Technical Steering Committee (TSC) is the technical governing body of the Node.js Foundation. The TSC is responsible for the core Node.js repo as well as dependent and adjacent projects. Generally the TSC delegates administration of these projects to working groups or committees.[74] The LTS group that manages long term supported releases is one such group. Other current groups include: Website, Streams, Build, Diagnostics, i18n, Evangelism, Docker, Addon API, Benchmarking, Post-mortem, Intl, Documentation, and Testing.[75]

In August, 2017, a governance breakdown precipitated efforts to repair the resulting damage and to create a path to future stability of governance.[76]

See also
	Free software portal
List of server-side JavaScript implementations
List of JavaScript libraries
MEAN (software bundle)
Online JavaScript IDE
Rhino (JavaScript engine)
Application server

Node.js
Node.js logo.svg
Original author(s)	Ryan Dahl
Developer(s)	Joyent
Initial release	May 27, 2009; 9 years ago[1]
Stable release	
10.4.0 / June 6, 2018; 6 days ago[2]
Repository	
https://github.com/nodejs/node
Edit this at Wikidata
Written in	C, C++, JavaScript
Operating system	Linux, macOS, Microsoft Windows, SmartOS, FreeBSD, IBM AIX[3]
Type	Run-time environment
License	MIT[4]
Website	nodejs.org
Node.js is an open-source, cross-platform JavaScript run-time environment that executes JavaScript code server-side. Historically, JavaScript was used primarily for client-side scripting, in which scripts written in JavaScript are embedded in a webpage's HTML and run client-side by a JavaScript engine in the user's web browser. Node.js lets developers use JavaScript for server-side scriptingâ€”running scripts server-side to produce dynamic web page content before the page is sent to the user's web browser. Consequently, Node.js represents a "JavaScript everywhere" paradigm,[5] unifying web application development around a single programming language, rather than different languages for server side and client side scripts.

Though .js is the conventional filename extension for JavaScript code, the name "Node.js" does not refer to a particular file in this context and is merely the name of the product. Node.js has an event-driven architecture capable of asynchronous I/O. These design choices aim to optimize throughput and scalability in web applications with many input/output operations, as well as for real-time Web applications (e.g., real-time communication programs and browser games).[6]

The Node.js distributed development project, governed by the Node.js Foundation,[7] is facilitated by the Linux Foundation's Collaborative Projects program.[8]

Corporate users of Node.js software include GoDaddy,[9] Groupon,[10] IBM,[11] LinkedIn,[12][13] Microsoft,[14][15] Netflix,[16] PayPal,[17][18] Rakuten, SAP, Tuenti,[19] Voxer,[20] Walmart,[21] and Yahoo!.[22]

Contents 
1	History
2	Overview
2.1	Platform architecture
2.2	Industry support
3	Releases
4	Technical details
4.1	Threading
4.2	V8
4.3	Package management
4.4	Unified API
4.5	Event loop
5	Project governance
6	See also
7	References
8	Further reading
9	External links
History

Ryan Dahl, creator of Node.js, in 2010
Node.js was originally written by Ryan Dahl in 2009,[23] about thirteen years after the introduction of the first server-side JavaScript environment, Netscape's LiveWire Pro Web.[24] The initial release supported only Linux and Mac OS X. Its development and maintenance was led by Dahl and later sponsored by Joyent.[25]

Dahl was inspired to create Node.js after seeing a file upload progress bar on Flickr. The browser did not know how much of the file had been uploaded and had to query the Web server. Dahl desired an easier way.[6][26]

Dahl criticized the limited possibilities of the most popular web server in 2009, Apache HTTP Server, to handle a lot of concurrent connections (up to 10,000 and more) and the most common way of creating code (sequential programming), when code either blocked the entire process or implied multiple execution stacks in the case of simultaneous connections.[27]

Dahl demonstrated the project at the inaugural European JSConf on November 8, 2009.[28][29][30] Node.js combined Google's V8 JavaScript engine, an event loop, and a low-level I/O API.[31]

In January 2010, a package manager was introduced for the Node.js environment called npm.[32] The package manager makes it easier for programmers to publish and share source code of Node.js libraries and is designed to simplify installation, updating, and uninstallation of libraries.[31]

In June 2011, Microsoft and Joyent implemented a native Windows version of Node.js.[33] The first Node.js build supporting Windows was released in July 2011.

In January 2012, Dahl stepped aside, promoting coworker and npm creator Isaac Schlueter to manage the project.[34] In January 2014, Schlueter announced that Timothy J. Fontaine would lead the project.[35]

In December 2014, Fedor Indutny started io.js, a fork of Node.js. Due to the internal conflict over Joyent's governance, io.js was created as an open governance alternative with a separate technical committee.[36][37] Unlike Node.js,[38] the authors planned to keep io.js up-to-date with the latest releases of the Google V8 JavaScript engine.[39]

In February 2015, the intent to form a neutral Node.js Foundation was announced. By June 2015, the Node.js and io.js communities voted to work together under the Node.js Foundation.[40]

In September 2015, Node.js v0.12 and io.js v3.3 were merged back together into Node v4.0.[41] This brought V8 ES6 features into Node.js, and a long-term support release cycle.[42] As of 2016, the io.js website recommends that developers switch back to Node.js and that no further releases of io.js are planned due to the merger.[43]

Overview
Node.js allows the creation of Web servers and networking tools using JavaScript and a collection of "modules" that handle various core functionality.[28][31][44][45][46] Modules are provided for file system I/O, networking (DNS, HTTP, TCP, TLS/SSL, or UDP), binary data (buffers), cryptography functions, data streams, and other core functions.[31][45][47] Node.js's modules use an API designed to reduce the complexity of writing server applications.[31][45]

Node.js is officially supported on Linux, macOS, Microsoft Windows, SmartOS, FreeBSD, and IBM AIX.[3] The provided source code may also be built on similar operating systems or be modified by third parties to support others such as NonStop[48] and Unix servers. Alternatively, they can be written with CoffeeScript[49] (a JavaScript alternative), Dart or TypeScript (strongly typed forms of JavaScript), or any other language that can compile to JavaScript.[49][50]

Node.js is primarily used to build network programs such as Web servers.[44] The biggest difference between Node.js and PHP is that most functions in PHP block until completion (commands execute only after previous commands finish), while Node.js functions are non-blocking (commands execute concurrently or even in parallel,[51][52] and use callbacks to signal completion or failure).[44]

Platform architecture
Node.js brings event-driven programming to web servers, enabling development of fast web servers in JavaScript.[31] Developers can create highly scalable servers without using threading, by using a simplified model of event-driven programming that uses callbacks to signal the completion of a task.[31] Node.js connects the ease of a scripting language (JavaScript) with the power of Unix network programming.[31]

Node.js was built on the Google V8 JavaScript engine since it was open-sourced under the BSD license. It is extremely fast and proficient with internet fundamentals such as HTTP, DNS, TCP.[28] Also, JavaScript was a well-known language, making Node.js immediately accessible to the entire web development community.[28]

Industry support
There are thousands of open-source libraries for Node.js, most of them hosted on the npm website. The Node.js developer community has two main mailing lists and the IRC channel #node.js on freenode. There are multiple developer conferences and events that support the Node.js community including NodeConf, Node Interactive and Node Summit as well as a number of regional events.

The open-source community has developed web frameworks to accelerate the development of applications. Such frameworks include Connect, Express.js, Socket.IO, Koa.js, Hapi.js, Sails.js, Meteor, Derby, and many others.[31][53] Various packages have also been created for interfacing with other languages or runtime environments such as Microsoft .NET.[54]

Modern desktop IDEs provide editing and debugging features specifically for Node.js applications. Such IDEs include Atom, Brackets, JetBrains WebStorm,[55][56] Microsoft Visual Studio (with Node.js Tools for Visual Studio,[57] or TypeScript with Node definitions,[58][59][60][61]) NetBeans,[62] Nodeclipse Enide Studio [63] (Eclipse-based), and Visual Studio Code.[64][65] Certain online web-based IDEs also support Node.js, such as Codeanywhere, Codenvy, Cloud9 IDE, Koding, and the visual flow editor in Node-RED.

Releases
Release	Code name	Release date	LTS status	Active LTS start	Maintenance start	Maintenance end
v0.10.x		2013-03-11	End-of-life	-	2015-10-01	2016-10-31
v0.12.x		2015-02-06	End-of-life	-	2016-04-01	2016-12-31
4.x	Argon[66]	2015-09-08	End-of-life	2015-10-01	2017-04-01	2018-04-30
5.x		2015-10-29	No LTS	N/A	2016-06-30
6.x	Boron[66]	2016-04-26	Maintenance	2016-10-18	2018-04-30	April 2019
7.x		2016-10-25	No LTS	N/A	2017-06-30
8.x	Carbon[66]	2017-05-30	Active	2017-10-31	April 2019	December 2019
9.x		2017-10-01	No LTS	N/A	June 2018
10.x	Dubnium[66]	2018-04-24	Active	October 2018	April 2020	April 2021
11.x[66]		2018-10-23	No LTS	N/A	June 2019
New major releases of Node.js are cut from the GitHub master branch every six months. Even-numbered versions are cut in April and odd-numbered versions are cut in October. When a new odd version is released, the previous even version undergoes transition to Long Term Support (LTS), which gives that version 18 months of active support from the date it is designated LTS. After these 18 months expire, an LTS release receives an additional 12 months of maintenance support. An active version receives non-breaking backports of changes a few weeks after they land in the current release. A maintenance release only receives critical fixes and documentation updates.[66] The LTS Working Group manages strategy and policy in collaboration with the Technical Steering Committee of the Node.js Foundation.

Technical details

This section may be too technical for most readers to understand. Please help improve it to make it understandable to non-experts, without removing the technical details. (August 2015) (Learn how and when to remove this template message)
Node.js is a Javascript runtime environment that processes incoming requests in a loop, called the event loop.

Threading
Node.js operates on a single thread, using non-blocking I/O calls, allowing it to support tens of thousands of concurrent connections without incurring the cost of thread context switching.[67] The design of sharing a single thread among all the requests that use the observer pattern is intended for building highly concurrent applications, where any function performing I/O must use a callback. To accommodate the single-threaded event loop, Node.js uses the libuv libraryâ€”which, in turn, uses a fixed-sized thread pool that handles some of the non-blocking asynchronous I/O operations.[6]

A downside of this single-threaded approach is that Node.js doesn't allow vertical scaling by increasing the number of CPU cores of the machine it is running on without using an additional module, such as cluster,[51] StrongLoop Process Manager,[68] or pm2.[69] However, developers can increase the default number of threads in the libuv thread pool. The server operating system (OS) is likely to distribute these threads across multiple cores.[70]

A thread pool handles execution of parallel tasks in Node.js. The main thread call functions post tasks to the shared task queue, which threads in the thread pool pull and execute. Inherently non-blocking system functions such as networking translate to kernel-side non-blocking sockets, while inherently blocking system functions such as file I/O run in a blocking way on their own threads. When a thread in the thread pool completes a task, it informs the main thread of this, which in turn, wakes up and executes the registered callback. Since Node.js handles callbacks in serial on the main thread, long lasting computations and other CPU-bound tasks freeze the entire event-loop until completion.[citation needed]

V8
V8 is the JavaScript execution engine built for Google Chrome and open-sourced by Google in 2008. Written in C++, V8 compiles JavaScript source code to native machine code instead of interpreting it in real time.[6]

Node.js uses libuv to handle asynchronous events. Libuv is an abstraction layer for network and file system functionality on both Windows and POSIX-based systems such as Linux, macOS, OSS on NonStop, and Unix.

The core functionality of Node.js resides in a JavaScript library. The Node.js bindings, written in C++, connect these technologies to each other and to the operating system.

Package management
npm is the pre-installed package manager for the Node.js server platform. It installs Node.js programs from the npm registry, organizing the installation and management of third-party Node.js programs. Packages in the npm registry can range from simple helper libraries such as Lodash to task runners such as Grunt.

Unified API
Node.js can be combined with a browser, a database that supports JSON data (such as Postgres,[71] MongoDB, or CouchDB) and JSON for a unified JavaScript development stack. With the adaptation of what were essentially server-side development patterns such as MVC, MVP, MVVM, etc., Node.js allows the reuse of the same model and service interface between client-side and server-side.

Event loop
Node.js registers with the operating system so the OS notifies it of connections and issues a callback. Within the Node.js runtime, each connection is a small heap allocation. Traditionally, relatively heavyweight OS processes or threads handled each connection. Node.js uses an event loop for scalability, instead of processes or threads.[72] In contrast to other event-driven servers, Node.js's event loop does not need to be called explicitly. Instead callbacks are defined, and the server automatically enters the event loop at the end of the callback definition. Node.js exits the event loop when there are no further callbacks to be performed.

Project governance
In 2015, various branches of the greater Node.js community began working under the vendor-neutral Node.js Foundation. The stated purpose of the organization "is to enable widespread adoption and help accelerate development of Node.js and other related modules through an open governance model that encourages participation, technical contribution, and a framework for long-term stewardship by an ecosystem invested in Node.js' success."[73]

The Node.js Foundation Technical Steering Committee (TSC) is the technical governing body of the Node.js Foundation. The TSC is responsible for the core Node.js repo as well as dependent and adjacent projects. Generally the TSC delegates administration of these projects to working groups or committees.[74] The LTS group that manages long term supported releases is one such group. Other current groups include: Website, Streams, Build, Diagnostics, i18n, Evangelism, Docker, Addon API, Benchmarking, Post-mortem, Intl, Documentation, and Testing.[75]

In August, 2017, a governance breakdown precipitated efforts to repair the resulting damage and to create a path to future stability of governance.[76]

See also
	Free software portal
List of server-side JavaScript implementations
List of JavaScript libraries
MEAN (software bundle)
Online JavaScript IDE
Rhino (JavaScript engine)
Application server

Node.js
Node.js logo.svg
Original author(s)	Ryan Dahl
Developer(s)	Joyent
Initial release	May 27, 2009; 9 years ago[1]
Stable release	
10.4.0 / June 6, 2018; 6 days ago[2]
Repository	
https://github.com/nodejs/node
Edit this at Wikidata
Written in	C, C++, JavaScript
Operating system	Linux, macOS, Microsoft Windows, SmartOS, FreeBSD, IBM AIX[3]
Type	Run-time environment
License	MIT[4]
Website	nodejs.org
Node.js is an open-source, cross-platform JavaScript run-time environment that executes JavaScript code server-side. Historically, JavaScript was used primarily for client-side scripting, in which scripts written in JavaScript are embedded in a webpage's HTML and run client-side by a JavaScript engine in the user's web browser. Node.js lets developers use JavaScript for server-side scriptingâ€”running scripts server-side to produce dynamic web page content before the page is sent to the user's web browser. Consequently, Node.js represents a "JavaScript everywhere" paradigm,[5] unifying web application development around a single programming language, rather than different languages for server side and client side scripts.

Though .js is the conventional filename extension for JavaScript code, the name "Node.js" does not refer to a particular file in this context and is merely the name of the product. Node.js has an event-driven architecture capable of asynchronous I/O. These design choices aim to optimize throughput and scalability in web applications with many input/output operations, as well as for real-time Web applications (e.g., real-time communication programs and browser games).[6]

The Node.js distributed development project, governed by the Node.js Foundation,[7] is facilitated by the Linux Foundation's Collaborative Projects program.[8]

Corporate users of Node.js software include GoDaddy,[9] Groupon,[10] IBM,[11] LinkedIn,[12][13] Microsoft,[14][15] Netflix,[16] PayPal,[17][18] Rakuten, SAP, Tuenti,[19] Voxer,[20] Walmart,[21] and Yahoo!.[22]

Contents 
1	History
2	Overview
2.1	Platform architecture
2.2	Industry support
3	Releases
4	Technical details
4.1	Threading
4.2	V8
4.3	Package management
4.4	Unified API
4.5	Event loop
5	Project governance
6	See also
7	References
8	Further reading
9	External links
History

Ryan Dahl, creator of Node.js, in 2010
Node.js was originally written by Ryan Dahl in 2009,[23] about thirteen years after the introduction of the first server-side JavaScript environment, Netscape's LiveWire Pro Web.[24] The initial release supported only Linux and Mac OS X. Its development and maintenance was led by Dahl and later sponsored by Joyent.[25]

Dahl was inspired to create Node.js after seeing a file upload progress bar on Flickr. The browser did not know how much of the file had been uploaded and had to query the Web server. Dahl desired an easier way.[6][26]

Dahl criticized the limited possibilities of the most popular web server in 2009, Apache HTTP Server, to handle a lot of concurrent connections (up to 10,000 and more) and the most common way of creating code (sequential programming), when code either blocked the entire process or implied multiple execution stacks in the case of simultaneous connections.[27]

Dahl demonstrated the project at the inaugural European JSConf on November 8, 2009.[28][29][30] Node.js combined Google's V8 JavaScript engine, an event loop, and a low-level I/O API.[31]

In January 2010, a package manager was introduced for the Node.js environment called npm.[32] The package manager makes it easier for programmers to publish and share source code of Node.js libraries and is designed to simplify installation, updating, and uninstallation of libraries.[31]

In June 2011, Microsoft and Joyent implemented a native Windows version of Node.js.[33] The first Node.js build supporting Windows was released in July 2011.

In January 2012, Dahl stepped aside, promoting coworker and npm creator Isaac Schlueter to manage the project.[34] In January 2014, Schlueter announced that Timothy J. Fontaine would lead the project.[35]

In December 2014, Fedor Indutny started io.js, a fork of Node.js. Due to the internal conflict over Joyent's governance, io.js was created as an open governance alternative with a separate technical committee.[36][37] Unlike Node.js,[38] the authors planned to keep io.js up-to-date with the latest releases of the Google V8 JavaScript engine.[39]

In February 2015, the intent to form a neutral Node.js Foundation was announced. By June 2015, the Node.js and io.js communities voted to work together under the Node.js Foundation.[40]

In September 2015, Node.js v0.12 and io.js v3.3 were merged back together into Node v4.0.[41] This brought V8 ES6 features into Node.js, and a long-term support release cycle.[42] As of 2016, the io.js website recommends that developers switch back to Node.js and that no further releases of io.js are planned due to the merger.[43]

Overview
Node.js allows the creation of Web servers and networking tools using JavaScript and a collection of "modules" that handle various core functionality.[28][31][44][45][46] Modules are provided for file system I/O, networking (DNS, HTTP, TCP, TLS/SSL, or UDP), binary data (buffers), cryptography functions, data streams, and other core functions.[31][45][47] Node.js's modules use an API designed to reduce the complexity of writing server applications.[31][45]

Node.js is officially supported on Linux, macOS, Microsoft Windows, SmartOS, FreeBSD, and IBM AIX.[3] The provided source code may also be built on similar operating systems or be modified by third parties to support others such as NonStop[48] and Unix servers. Alternatively, they can be written with CoffeeScript[49] (a JavaScript alternative), Dart or TypeScript (strongly typed forms of JavaScript), or any other language that can compile to JavaScript.[49][50]

Node.js is primarily used to build network programs such as Web servers.[44] The biggest difference between Node.js and PHP is that most functions in PHP block until completion (commands execute only after previous commands finish), while Node.js functions are non-blocking (commands execute concurrently or even in parallel,[51][52] and use callbacks to signal completion or failure).[44]

Platform architecture
Node.js brings event-driven programming to web servers, enabling development of fast web servers in JavaScript.[31] Developers can create highly scalable servers without using threading, by using a simplified model of event-driven programming that uses callbacks to signal the completion of a task.[31] Node.js connects the ease of a scripting language (JavaScript) with the power of Unix network programming.[31]

Node.js was built on the Google V8 JavaScript engine since it was open-sourced under the BSD license. It is extremely fast and proficient with internet fundamentals such as HTTP, DNS, TCP.[28] Also, JavaScript was a well-known language, making Node.js immediately accessible to the entire web development community.[28]

Industry support
There are thousands of open-source libraries for Node.js, most of them hosted on the npm website. The Node.js developer community has two main mailing lists and the IRC channel #node.js on freenode. There are multiple developer conferences and events that support the Node.js community including NodeConf, Node Interactive and Node Summit as well as a number of regional events.

The open-source community has developed web frameworks to accelerate the development of applications. Such frameworks include Connect, Express.js, Socket.IO, Koa.js, Hapi.js, Sails.js, Meteor, Derby, and many others.[31][53] Various packages have also been created for interfacing with other languages or runtime environments such as Microsoft .NET.[54]

Modern desktop IDEs provide editing and debugging features specifically for Node.js applications. Such IDEs include Atom, Brackets, JetBrains WebStorm,[55][56] Microsoft Visual Studio (with Node.js Tools for Visual Studio,[57] or TypeScript with Node definitions,[58][59][60][61]) NetBeans,[62] Nodeclipse Enide Studio [63] (Eclipse-based), and Visual Studio Code.[64][65] Certain online web-based IDEs also support Node.js, such as Codeanywhere, Codenvy, Cloud9 IDE, Koding, and the visual flow editor in Node-RED.

Releases
Release	Code name	Release date	LTS status	Active LTS start	Maintenance start	Maintenance end
v0.10.x		2013-03-11	End-of-life	-	2015-10-01	2016-10-31
v0.12.x		2015-02-06	End-of-life	-	2016-04-01	2016-12-31
4.x	Argon[66]	2015-09-08	End-of-life	2015-10-01	2017-04-01	2018-04-30
5.x		2015-10-29	No LTS	N/A	2016-06-30
6.x	Boron[66]	2016-04-26	Maintenance	2016-10-18	2018-04-30	April 2019
7.x		2016-10-25	No LTS	N/A	2017-06-30
8.x	Carbon[66]	2017-05-30	Active	2017-10-31	April 2019	December 2019
9.x		2017-10-01	No LTS	N/A	June 2018
10.x	Dubnium[66]	2018-04-24	Active	October 2018	April 2020	April 2021
11.x[66]		2018-10-23	No LTS	N/A	June 2019
New major releases of Node.js are cut from the GitHub master branch every six months. Even-numbered versions are cut in April and odd-numbered versions are cut in October. When a new odd version is released, the previous even version undergoes transition to Long Term Support (LTS), which gives that version 18 months of active support from the date it is designated LTS. After these 18 months expire, an LTS release receives an additional 12 months of maintenance support. An active version receives non-breaking backports of changes a few weeks after they land in the current release. A maintenance release only receives critical fixes and documentation updates.[66] The LTS Working Group manages strategy and policy in collaboration with the Technical Steering Committee of the Node.js Foundation.

Technical details

This section may be too technical for most readers to understand. Please help improve it to make it understandable to non-experts, without removing the technical details. (August 2015) (Learn how and when to remove this template message)
Node.js is a Javascript runtime environment that processes incoming requests in a loop, called the event loop.

Threading
Node.js operates on a single thread, using non-blocking I/O calls, allowing it to support tens of thousands of concurrent connections without incurring the cost of thread context switching.[67] The design of sharing a single thread among all the requests that use the observer pattern is intended for building highly concurrent applications, where any function performing I/O must use a callback. To accommodate the single-threaded event loop, Node.js uses the libuv libraryâ€”which, in turn, uses a fixed-sized thread pool that handles some of the non-blocking asynchronous I/O operations.[6]

A downside of this single-threaded approach is that Node.js doesn't allow vertical scaling by increasing the number of CPU cores of the machine it is running on without using an additional module, such as cluster,[51] StrongLoop Process Manager,[68] or pm2.[69] However, developers can increase the default number of threads in the libuv thread pool. The server operating system (OS) is likely to distribute these threads across multiple cores.[70]

A thread pool handles execution of parallel tasks in Node.js. The main thread call functions post tasks to the shared task queue, which threads in the thread pool pull and execute. Inherently non-blocking system functions such as networking translate to kernel-side non-blocking sockets, while inherently blocking system functions such as file I/O run in a blocking way on their own threads. When a thread in the thread pool completes a task, it informs the main thread of this, which in turn, wakes up and executes the registered callback. Since Node.js handles callbacks in serial on the main thread, long lasting computations and other CPU-bound tasks freeze the entire event-loop until completion.[citation needed]

V8
V8 is the JavaScript execution engine built for Google Chrome and open-sourced by Google in 2008. Written in C++, V8 compiles JavaScript source code to native machine code instead of interpreting it in real time.[6]

Node.js uses libuv to handle asynchronous events. Libuv is an abstraction layer for network and file system functionality on both Windows and POSIX-based systems such as Linux, macOS, OSS on NonStop, and Unix.

The core functionality of Node.js resides in a JavaScript library. The Node.js bindings, written in C++, connect these technologies to each other and to the operating system.

Package management
npm is the pre-installed package manager for the Node.js server platform. It installs Node.js programs from the npm registry, organizing the installation and management of third-party Node.js programs. Packages in the npm registry can range from simple helper libraries such as Lodash to task runners such as Grunt.

Unified API
Node.js can be combined with a browser, a database that supports JSON data (such as Postgres,[71] MongoDB, or CouchDB) and JSON for a unified JavaScript development stack. With the adaptation of what were essentially server-side development patterns such as MVC, MVP, MVVM, etc., Node.js allows the reuse of the same model and service interface between client-side and server-side.

Event loop
Node.js registers with the operating system so the OS notifies it of connections and issues a callback. Within the Node.js runtime, each connection is a small heap allocation. Traditionally, relatively heavyweight OS processes or threads handled each connection. Node.js uses an event loop for scalability, instead of processes or threads.[72] In contrast to other event-driven servers, Node.js's event loop does not need to be called explicitly. Instead callbacks are defined, and the server automatically enters the event loop at the end of the callback definition. Node.js exits the event loop when there are no further callbacks to be performed.

Project governance
In 2015, various branches of the greater Node.js community began working under the vendor-neutral Node.js Foundation. The stated purpose of the organization "is to enable widespread adoption and help accelerate development of Node.js and other related modules through an open governance model that encourages participation, technical contribution, and a framework for long-term stewardship by an ecosystem invested in Node.js' success."[73]

The Node.js Foundation Technical Steering Committee (TSC) is the technical governing body of the Node.js Foundation. The TSC is responsible for the core Node.js repo as well as dependent and adjacent projects. Generally the TSC delegates administration of these projects to working groups or committees.[74] The LTS group that manages long term supported releases is one such group. Other current groups include: Website, Streams, Build, Diagnostics, i18n, Evangelism, Docker, Addon API, Benchmarking, Post-mortem, Intl, Documentation, and Testing.[75]

In August, 2017, a governance breakdown precipitated efforts to repair the resulting damage and to create a path to future stability of governance.[76]

See also
	Free software portal
List of server-side JavaScript implementations
List of JavaScript libraries
MEAN (software bundle)
Online JavaScript IDE
Rhino (JavaScript engine)
Application server

Node.js
Node.js logo.svg
Original author(s)	Ryan Dahl
Developer(s)	Joyent
Initial release	May 27, 2009; 9 years ago[1]
Stable release	
10.4.0 / June 6, 2018; 6 days ago[2]
Repository	
https://github.com/nodejs/node
Edit this at Wikidata
Written in	C, C++, JavaScript
Operating system	Linux, macOS, Microsoft Windows, SmartOS, FreeBSD, IBM AIX[3]
Type	Run-time environment
License	MIT[4]
Website	nodejs.org
Node.js is an open-source, cross-platform JavaScript run-time environment that executes JavaScript code server-side. Historically, JavaScript was used primarily for client-side scripting, in which scripts written in JavaScript are embedded in a webpage's HTML and run client-side by a JavaScript engine in the user's web browser. Node.js lets developers use JavaScript for server-side scriptingâ€”running scripts server-side to produce dynamic web page content before the page is sent to the user's web browser. Consequently, Node.js represents a "JavaScript everywhere" paradigm,[5] unifying web application development around a single programming language, rather than different languages for server side and client side scripts.

Though .js is the conventional filename extension for JavaScript code, the name "Node.js" does not refer to a particular file in this context and is merely the name of the product. Node.js has an event-driven architecture capable of asynchronous I/O. These design choices aim to optimize throughput and scalability in web applications with many input/output operations, as well as for real-time Web applications (e.g., real-time communication programs and browser games).[6]

The Node.js distributed development project, governed by the Node.js Foundation,[7] is facilitated by the Linux Foundation's Collaborative Projects program.[8]

Corporate users of Node.js software include GoDaddy,[9] Groupon,[10] IBM,[11] LinkedIn,[12][13] Microsoft,[14][15] Netflix,[16] PayPal,[17][18] Rakuten, SAP, Tuenti,[19] Voxer,[20] Walmart,[21] and Yahoo!.[22]

Contents 
1	History
2	Overview
2.1	Platform architecture
2.2	Industry support
3	Releases
4	Technical details
4.1	Threading
4.2	V8
4.3	Package management
4.4	Unified API
4.5	Event loop
5	Project governance
6	See also
7	References
8	Further reading
9	External links
History

Ryan Dahl, creator of Node.js, in 2010
Node.js was originally written by Ryan Dahl in 2009,[23] about thirteen years after the introduction of the first server-side JavaScript environment, Netscape's LiveWire Pro Web.[24] The initial release supported only Linux and Mac OS X. Its development and maintenance was led by Dahl and later sponsored by Joyent.[25]

Dahl was inspired to create Node.js after seeing a file upload progress bar on Flickr. The browser did not know how much of the file had been uploaded and had to query the Web server. Dahl desired an easier way.[6][26]

Dahl criticized the limited possibilities of the most popular web server in 2009, Apache HTTP Server, to handle a lot of concurrent connections (up to 10,000 and more) and the most common way of creating code (sequential programming), when code either blocked the entire process or implied multiple execution stacks in the case of simultaneous connections.[27]

Dahl demonstrated the project at the inaugural European JSConf on November 8, 2009.[28][29][30] Node.js combined Google's V8 JavaScript engine, an event loop, and a low-level I/O API.[31]

In January 2010, a package manager was introduced for the Node.js environment called npm.[32] The package manager makes it easier for programmers to publish and share source code of Node.js libraries and is designed to simplify installation, updating, and uninstallation of libraries.[31]

In June 2011, Microsoft and Joyent implemented a native Windows version of Node.js.[33] The first Node.js build supporting Windows was released in July 2011.

In January 2012, Dahl stepped aside, promoting coworker and npm creator Isaac Schlueter to manage the project.[34] In January 2014, Schlueter announced that Timothy J. Fontaine would lead the project.[35]

In December 2014, Fedor Indutny started io.js, a fork of Node.js. Due to the internal conflict over Joyent's governance, io.js was created as an open governance alternative with a separate technical committee.[36][37] Unlike Node.js,[38] the authors planned to keep io.js up-to-date with the latest releases of the Google V8 JavaScript engine.[39]

In February 2015, the intent to form a neutral Node.js Foundation was announced. By June 2015, the Node.js and io.js communities voted to work together under the Node.js Foundation.[40]

In September 2015, Node.js v0.12 and io.js v3.3 were merged back together into Node v4.0.[41] This brought V8 ES6 features into Node.js, and a long-term support release cycle.[42] As of 2016, the io.js website recommends that developers switch back to Node.js and that no further releases of io.js are planned due to the merger.[43]

Overview
Node.js allows the creation of Web servers and networking tools using JavaScript and a collection of "modules" that handle various core functionality.[28][31][44][45][46] Modules are provided for file system I/O, networking (DNS, HTTP, TCP, TLS/SSL, or UDP), binary data (buffers), cryptography functions, data streams, and other core functions.[31][45][47] Node.js's modules use an API designed to reduce the complexity of writing server applications.[31][45]

Node.js is officially supported on Linux, macOS, Microsoft Windows, SmartOS, FreeBSD, and IBM AIX.[3] The provided source code may also be built on similar operating systems or be modified by third parties to support others such as NonStop[48] and Unix servers. Alternatively, they can be written with CoffeeScript[49] (a JavaScript alternative), Dart or TypeScript (strongly typed forms of JavaScript), or any other language that can compile to JavaScript.[49][50]

Node.js is primarily used to build network programs such as Web servers.[44] The biggest difference between Node.js and PHP is that most functions in PHP block until completion (commands execute only after previous commands finish), while Node.js functions are non-blocking (commands execute concurrently or even in parallel,[51][52] and use callbacks to signal completion or failure).[44]

Platform architecture
Node.js brings event-driven programming to web servers, enabling development of fast web servers in JavaScript.[31] Developers can create highly scalable servers without using threading, by using a simplified model of event-driven programming that uses callbacks to signal the completion of a task.[31] Node.js connects the ease of a scripting language (JavaScript) with the power of Unix network programming.[31]

Node.js was built on the Google V8 JavaScript engine since it was open-sourced under the BSD license. It is extremely fast and proficient with internet fundamentals such as HTTP, DNS, TCP.[28] Also, JavaScript was a well-known language, making Node.js immediately accessible to the entire web development community.[28]

Industry support
There are thousands of open-source libraries for Node.js, most of them hosted on the npm website. The Node.js developer community has two main mailing lists and the IRC channel #node.js on freenode. There are multiple developer conferences and events that support the Node.js community including NodeConf, Node Interactive and Node Summit as well as a number of regional events.

The open-source community has developed web frameworks to accelerate the development of applications. Such frameworks include Connect, Express.js, Socket.IO, Koa.js, Hapi.js, Sails.js, Meteor, Derby, and many others.[31][53] Various packages have also been created for interfacing with other languages or runtime environments such as Microsoft .NET.[54]

Modern desktop IDEs provide editing and debugging features specifically for Node.js applications. Such IDEs include Atom, Brackets, JetBrains WebStorm,[55][56] Microsoft Visual Studio (with Node.js Tools for Visual Studio,[57] or TypeScript with Node definitions,[58][59][60][61]) NetBeans,[62] Nodeclipse Enide Studio [63] (Eclipse-based), and Visual Studio Code.[64][65] Certain online web-based IDEs also support Node.js, such as Codeanywhere, Codenvy, Cloud9 IDE, Koding, and the visual flow editor in Node-RED.

Releases
Release	Code name	Release date	LTS status	Active LTS start	Maintenance start	Maintenance end
v0.10.x		2013-03-11	End-of-life	-	2015-10-01	2016-10-31
v0.12.x		2015-02-06	End-of-life	-	2016-04-01	2016-12-31
4.x	Argon[66]	2015-09-08	End-of-life	2015-10-01	2017-04-01	2018-04-30
5.x		2015-10-29	No LTS	N/A	2016-06-30
6.x	Boron[66]	2016-04-26	Maintenance	2016-10-18	2018-04-30	April 2019
7.x		2016-10-25	No LTS	N/A	2017-06-30
8.x	Carbon[66]	2017-05-30	Active	2017-10-31	April 2019	December 2019
9.x		2017-10-01	No LTS	N/A	June 2018
10.x	Dubnium[66]	2018-04-24	Active	October 2018	April 2020	April 2021
11.x[66]		2018-10-23	No LTS	N/A	June 2019
New major releases of Node.js are cut from the GitHub master branch every six months. Even-numbered versions are cut in April and odd-numbered versions are cut in October. When a new odd version is released, the previous even version undergoes transition to Long Term Support (LTS), which gives that version 18 months of active support from the date it is designated LTS. After these 18 months expire, an LTS release receives an additional 12 months of maintenance support. An active version receives non-breaking backports of changes a few weeks after they land in the current release. A maintenance release only receives critical fixes and documentation updates.[66] The LTS Working Group manages strategy and policy in collaboration with the Technical Steering Committee of the Node.js Foundation.

Technical details

This section may be too technical for most readers to understand. Please help improve it to make it understandable to non-experts, without removing the technical details. (August 2015) (Learn how and when to remove this template message)
Node.js is a Javascript runtime environment that processes incoming requests in a loop, called the event loop.

Threading
Node.js operates on a single thread, using non-blocking I/O calls, allowing it to support tens of thousands of concurrent connections without incurring the cost of thread context switching.[67] The design of sharing a single thread among all the requests that use the observer pattern is intended for building highly concurrent applications, where any function performing I/O must use a callback. To accommodate the single-threaded event loop, Node.js uses the libuv libraryâ€”which, in turn, uses a fixed-sized thread pool that handles some of the non-blocking asynchronous I/O operations.[6]

A downside of this single-threaded approach is that Node.js doesn't allow vertical scaling by increasing the number of CPU cores of the machine it is running on without using an additional module, such as cluster,[51] StrongLoop Process Manager,[68] or pm2.[69] However, developers can increase the default number of threads in the libuv thread pool. The server operating system (OS) is likely to distribute these threads across multiple cores.[70]

A thread pool handles execution of parallel tasks in Node.js. The main thread call functions post tasks to the shared task queue, which threads in the thread pool pull and execute. Inherently non-blocking system functions such as networking translate to kernel-side non-blocking sockets, while inherently blocking system functions such as file I/O run in a blocking way on their own threads. When a thread in the thread pool completes a task, it informs the main thread of this, which in turn, wakes up and executes the registered callback. Since Node.js handles callbacks in serial on the main thread, long lasting computations and other CPU-bound tasks freeze the entire event-loop until completion.[citation needed]

V8
V8 is the JavaScript execution engine built for Google Chrome and open-sourced by Google in 2008. Written in C++, V8 compiles JavaScript source code to native machine code instead of interpreting it in real time.[6]

Node.js uses libuv to handle asynchronous events. Libuv is an abstraction layer for network and file system functionality on both Windows and POSIX-based systems such as Linux, macOS, OSS on NonStop, and Unix.

The core functionality of Node.js resides in a JavaScript library. The Node.js bindings, written in C++, connect these technologies to each other and to the operating system.

Package management
npm is the pre-installed package manager for the Node.js server platform. It installs Node.js programs from the npm registry, organizing the installation and management of third-party Node.js programs. Packages in the npm registry can range from simple helper libraries such as Lodash to task runners such as Grunt.

Unified API
Node.js can be combined with a browser, a database that supports JSON data (such as Postgres,[71] MongoDB, or CouchDB) and JSON for a unified JavaScript development stack. With the adaptation of what were essentially server-side development patterns such as MVC, MVP, MVVM, etc., Node.js allows the reuse of the same model and service interface between client-side and server-side.

Event loop
Node.js registers with the operating system so the OS notifies it of connections and issues a callback. Within the Node.js runtime, each connection is a small heap allocation. Traditionally, relatively heavyweight OS processes or threads handled each connection. Node.js uses an event loop for scalability, instead of processes or threads.[72] In contrast to other event-driven servers, Node.js's event loop does not need to be called explicitly. Instead callbacks are defined, and the server automatically enters the event loop at the end of the callback definition. Node.js exits the event loop when there are no further callbacks to be performed.

Project governance
In 2015, various branches of the greater Node.js community began working under the vendor-neutral Node.js Foundation. The stated purpose of the organization "is to enable widespread adoption and help accelerate development of Node.js and other related modules through an open governance model that encourages participation, technical contribution, and a framework for long-term stewardship by an ecosystem invested in Node.js' success."[73]

The Node.js Foundation Technical Steering Committee (TSC) is the technical governing body of the Node.js Foundation. The TSC is responsible for the core Node.js repo as well as dependent and adjacent projects. Generally the TSC delegates administration of these projects to working groups or committees.[74] The LTS group that manages long term supported releases is one such group. Other current groups include: Website, Streams, Build, Diagnostics, i18n, Evangelism, Docker, Addon API, Benchmarking, Post-mortem, Intl, Documentation, and Testing.[75]

In August, 2017, a governance breakdown precipitated efforts to repair the resulting damage and to create a path to future stability of governance.[76]

See also
	Free software portal
List of server-side JavaScript implementations
List of JavaScript libraries
MEAN (software bundle)
Online JavaScript IDE
Rhino (JavaScript engine)
Application server

Node.js
Node.js logo.svg
Original author(s)	Ryan Dahl
Developer(s)	Joyent
Initial release	May 27, 2009; 9 years ago[1]
Stable release	
10.4.0 / June 6, 2018; 6 days ago[2]
Repository	
https://github.com/nodejs/node
Edit this at Wikidata
Written in	C, C++, JavaScript
Operating system	Linux, macOS, Microsoft Windows, SmartOS, FreeBSD, IBM AIX[3]
Type	Run-time environment
License	MIT[4]
Website	nodejs.org
Node.js is an open-source, cross-platform JavaScript run-time environment that executes JavaScript code server-side. Historically, JavaScript was used primarily for client-side scripting, in which scripts written in JavaScript are embedded in a webpage's HTML and run client-side by a JavaScript engine in the user's web browser. Node.js lets developers use JavaScript for server-side scriptingâ€”running scripts server-side to produce dynamic web page content before the page is sent to the user's web browser. Consequently, Node.js represents a "JavaScript everywhere" paradigm,[5] unifying web application development around a single programming language, rather than different languages for server side and client side scripts.

Though .js is the conventional filename extension for JavaScript code, the name "Node.js" does not refer to a particular file in this context and is merely the name of the product. Node.js has an event-driven architecture capable of asynchronous I/O. These design choices aim to optimize throughput and scalability in web applications with many input/output operations, as well as for real-time Web applications (e.g., real-time communication programs and browser games).[6]

The Node.js distributed development project, governed by the Node.js Foundation,[7] is facilitated by the Linux Foundation's Collaborative Projects program.[8]

Corporate users of Node.js software include GoDaddy,[9] Groupon,[10] IBM,[11] LinkedIn,[12][13] Microsoft,[14][15] Netflix,[16] PayPal,[17][18] Rakuten, SAP, Tuenti,[19] Voxer,[20] Walmart,[21] and Yahoo!.[22]

Contents 
1	History
2	Overview
2.1	Platform architecture
2.2	Industry support
3	Releases
4	Technical details
4.1	Threading
4.2	V8
4.3	Package management
4.4	Unified API
4.5	Event loop
5	Project governance
6	See also
7	References
8	Further reading
9	External links
History

Ryan Dahl, creator of Node.js, in 2010
Node.js was originally written by Ryan Dahl in 2009,[23] about thirteen years after the introduction of the first server-side JavaScript environment, Netscape's LiveWire Pro Web.[24] The initial release supported only Linux and Mac OS X. Its development and maintenance was led by Dahl and later sponsored by Joyent.[25]

Dahl was inspired to create Node.js after seeing a file upload progress bar on Flickr. The browser did not know how much of the file had been uploaded and had to query the Web server. Dahl desired an easier way.[6][26]

Dahl criticized the limited possibilities of the most popular web server in 2009, Apache HTTP Server, to handle a lot of concurrent connections (up to 10,000 and more) and the most common way of creating code (sequential programming), when code either blocked the entire process or implied multiple execution stacks in the case of simultaneous connections.[27]

Dahl demonstrated the project at the inaugural European JSConf on November 8, 2009.[28][29][30] Node.js combined Google's V8 JavaScript engine, an event loop, and a low-level I/O API.[31]

In January 2010, a package manager was introduced for the Node.js environment called npm.[32] The package manager makes it easier for programmers to publish and share source code of Node.js libraries and is designed to simplify installation, updating, and uninstallation of libraries.[31]

In June 2011, Microsoft and Joyent implemented a native Windows version of Node.js.[33] The first Node.js build supporting Windows was released in July 2011.

In January 2012, Dahl stepped aside, promoting coworker and npm creator Isaac Schlueter to manage the project.[34] In January 2014, Schlueter announced that Timothy J. Fontaine would lead the project.[35]

In December 2014, Fedor Indutny started io.js, a fork of Node.js. Due to the internal conflict over Joyent's governance, io.js was created as an open governance alternative with a separate technical committee.[36][37] Unlike Node.js,[38] the authors planned to keep io.js up-to-date with the latest releases of the Google V8 JavaScript engine.[39]

In February 2015, the intent to form a neutral Node.js Foundation was announced. By June 2015, the Node.js and io.js communities voted to work together under the Node.js Foundation.[40]

In September 2015, Node.js v0.12 and io.js v3.3 were merged back together into Node v4.0.[41] This brought V8 ES6 features into Node.js, and a long-term support release cycle.[42] As of 2016, the io.js website recommends that developers switch back to Node.js and that no further releases of io.js are planned due to the merger.[43]

Overview
Node.js allows the creation of Web servers and networking tools using JavaScript and a collection of "modules" that handle various core functionality.[28][31][44][45][46] Modules are provided for file system I/O, networking (DNS, HTTP, TCP, TLS/SSL, or UDP), binary data (buffers), cryptography functions, data streams, and other core functions.[31][45][47] Node.js's modules use an API designed to reduce the complexity of writing server applications.[31][45]

Node.js is officially supported on Linux, macOS, Microsoft Windows, SmartOS, FreeBSD, and IBM AIX.[3] The provided source code may also be built on similar operating systems or be modified by third parties to support others such as NonStop[48] and Unix servers. Alternatively, they can be written with CoffeeScript[49] (a JavaScript alternative), Dart or TypeScript (strongly typed forms of JavaScript), or any other language that can compile to JavaScript.[49][50]

Node.js is primarily used to build network programs such as Web servers.[44] The biggest difference between Node.js and PHP is that most functions in PHP block until completion (commands execute only after previous commands finish), while Node.js functions are non-blocking (commands execute concurrently or even in parallel,[51][52] and use callbacks to signal completion or failure).[44]

Platform architecture
Node.js brings event-driven programming to web servers, enabling development of fast web servers in JavaScript.[31] Developers can create highly scalable servers without using threading, by using a simplified model of event-driven programming that uses callbacks to signal the completion of a task.[31] Node.js connects the ease of a scripting language (JavaScript) with the power of Unix network programming.[31]

Node.js was built on the Google V8 JavaScript engine since it was open-sourced under the BSD license. It is extremely fast and proficient with internet fundamentals such as HTTP, DNS, TCP.[28] Also, JavaScript was a well-known language, making Node.js immediately accessible to the entire web development community.[28]

Industry support
There are thousands of open-source libraries for Node.js, most of them hosted on the npm website. The Node.js developer community has two main mailing lists and the IRC channel #node.js on freenode. There are multiple developer conferences and events that support the Node.js community including NodeConf, Node Interactive and Node Summit as well as a number of regional events.

The open-source community has developed web frameworks to accelerate the development of applications. Such frameworks include Connect, Express.js, Socket.IO, Koa.js, Hapi.js, Sails.js, Meteor, Derby, and many others.[31][53] Various packages have also been created for interfacing with other languages or runtime environments such as Microsoft .NET.[54]

Modern desktop IDEs provide editing and debugging features specifically for Node.js applications. Such IDEs include Atom, Brackets, JetBrains WebStorm,[55][56] Microsoft Visual Studio (with Node.js Tools for Visual Studio,[57] or TypeScript with Node definitions,[58][59][60][61]) NetBeans,[62] Nodeclipse Enide Studio [63] (Eclipse-based), and Visual Studio Code.[64][65] Certain online web-based IDEs also support Node.js, such as Codeanywhere, Codenvy, Cloud9 IDE, Koding, and the visual flow editor in Node-RED.

Releases
Release	Code name	Release date	LTS status	Active LTS start	Maintenance start	Maintenance end
v0.10.x		2013-03-11	End-of-life	-	2015-10-01	2016-10-31
v0.12.x		2015-02-06	End-of-life	-	2016-04-01	2016-12-31
4.x	Argon[66]	2015-09-08	End-of-life	2015-10-01	2017-04-01	2018-04-30
5.x		2015-10-29	No LTS	N/A	2016-06-30
6.x	Boron[66]	2016-04-26	Maintenance	2016-10-18	2018-04-30	April 2019
7.x		2016-10-25	No LTS	N/A	2017-06-30
8.x	Carbon[66]	2017-05-30	Active	2017-10-31	April 2019	December 2019
9.x		2017-10-01	No LTS	N/A	June 2018
10.x	Dubnium[66]	2018-04-24	Active	October 2018	April 2020	April 2021
11.x[66]		2018-10-23	No LTS	N/A	June 2019
New major releases of Node.js are cut from the GitHub master branch every six months. Even-numbered versions are cut in April and odd-numbered versions are cut in October. When a new odd version is released, the previous even version undergoes transition to Long Term Support (LTS), which gives that version 18 months of active support from the date it is designated LTS. After these 18 months expire, an LTS release receives an additional 12 months of maintenance support. An active version receives non-breaking backports of changes a few weeks after they land in the current release. A maintenance release only receives critical fixes and documentation updates.[66] The LTS Working Group manages strategy and policy in collaboration with the Technical Steering Committee of the Node.js Foundation.

Technical details

This section may be too technical for most readers to understand. Please help improve it to make it understandable to non-experts, without removing the technical details. (August 2015) (Learn how and when to remove this template message)
Node.js is a Javascript runtime environment that processes incoming requests in a loop, called the event loop.

Threading
Node.js operates on a single thread, using non-blocking I/O calls, allowing it to support tens of thousands of concurrent connections without incurring the cost of thread context switching.[67] The design of sharing a single thread among all the requests that use the observer pattern is intended for building highly concurrent applications, where any function performing I/O must use a callback. To accommodate the single-threaded event loop, Node.js uses the libuv libraryâ€”which, in turn, uses a fixed-sized thread pool that handles some of the non-blocking asynchronous I/O operations.[6]

A downside of this single-threaded approach is that Node.js doesn't allow vertical scaling by increasing the number of CPU cores of the machine it is running on without using an additional module, such as cluster,[51] StrongLoop Process Manager,[68] or pm2.[69] However, developers can increase the default number of threads in the libuv thread pool. The server operating system (OS) is likely to distribute these threads across multiple cores.[70]

A thread pool handles execution of parallel tasks in Node.js. The main thread call functions post tasks to the shared task queue, which threads in the thread pool pull and execute. Inherently non-blocking system functions such as networking translate to kernel-side non-blocking sockets, while inherently blocking system functions such as file I/O run in a blocking way on their own threads. When a thread in the thread pool completes a task, it informs the main thread of this, which in turn, wakes up and executes the registered callback. Since Node.js handles callbacks in serial on the main thread, long lasting computations and other CPU-bound tasks freeze the entire event-loop until completion.[citation needed]

V8
V8 is the JavaScript execution engine built for Google Chrome and open-sourced by Google in 2008. Written in C++, V8 compiles JavaScript source code to native machine code instead of interpreting it in real time.[6]

Node.js uses libuv to handle asynchronous events. Libuv is an abstraction layer for network and file system functionality on both Windows and POSIX-based systems such as Linux, macOS, OSS on NonStop, and Unix.

The core functionality of Node.js resides in a JavaScript library. The Node.js bindings, written in C++, connect these technologies to each other and to the operating system.

Package management
npm is the pre-installed package manager for the Node.js server platform. It installs Node.js programs from the npm registry, organizing the installation and management of third-party Node.js programs. Packages in the npm registry can range from simple helper libraries such as Lodash to task runners such as Grunt.

Unified API
Node.js can be combined with a browser, a database that supports JSON data (such as Postgres,[71] MongoDB, or CouchDB) and JSON for a unified JavaScript development stack. With the adaptation of what were essentially server-side development patterns such as MVC, MVP, MVVM, etc., Node.js allows the reuse of the same model and service interface between client-side and server-side.

Event loop
Node.js registers with the operating system so the OS notifies it of connections and issues a callback. Within the Node.js runtime, each connection is a small heap allocation. Traditionally, relatively heavyweight OS processes or threads handled each connection. Node.js uses an event loop for scalability, instead of processes or threads.[72] In contrast to other event-driven servers, Node.js's event loop does not need to be called explicitly. Instead callbacks are defined, and the server automatically enters the event loop at the end of the callback definition. Node.js exits the event loop when there are no further callbacks to be performed.

Project governance
In 2015, various branches of the greater Node.js community began working under the vendor-neutral Node.js Foundation. The stated purpose of the organization "is to enable widespread adoption and help accelerate development of Node.js and other related modules through an open governance model that encourages participation, technical contribution, and a framework for long-term stewardship by an ecosystem invested in Node.js' success."[73]

The Node.js Foundation Technical Steering Committee (TSC) is the technical governing body of the Node.js Foundation. The TSC is responsible for the core Node.js repo as well as dependent and adjacent projects. Generally the TSC delegates administration of these projects to working groups or committees.[74] The LTS group that manages long term supported releases is one such group. Other current groups include: Website, Streams, Build, Diagnostics, i18n, Evangelism, Docker, Addon API, Benchmarking, Post-mortem, Intl, Documentation, and Testing.[75]

In August, 2017, a governance breakdown precipitated efforts to repair the resulting damage and to create a path to future stability of governance.[76]

See also
	Free software portal
List of server-side JavaScript implementations
List of JavaScript libraries
MEAN (software bundle)
Online JavaScript IDE
Rhino (JavaScript engine)
Application server

Node.js
Node.js logo.svg
Original author(s)	Ryan Dahl
Developer(s)	Joyent
Initial release	May 27, 2009; 9 years ago[1]
Stable release	
10.4.0 / June 6, 2018; 6 days ago[2]
Repository	
https://github.com/nodejs/node
Edit this at Wikidata
Written in	C, C++, JavaScript
Operating system	Linux, macOS, Microsoft Windows, SmartOS, FreeBSD, IBM AIX[3]
Type	Run-time environment
License	MIT[4]
Website	nodejs.org
Node.js is an open-source, cross-platform JavaScript run-time environment that executes JavaScript code server-side. Historically, JavaScript was used primarily for client-side scripting, in which scripts written in JavaScript are embedded in a webpage's HTML and run client-side by a JavaScript engine in the user's web browser. Node.js lets developers use JavaScript for server-side scriptingâ€”running scripts server-side to produce dynamic web page content before the page is sent to the user's web browser. Consequently, Node.js represents a "JavaScript everywhere" paradigm,[5] unifying web application development around a single programming language, rather than different languages for server side and client side scripts.

Though .js is the conventional filename extension for JavaScript code, the name "Node.js" does not refer to a particular file in this context and is merely the name of the product. Node.js has an event-driven architecture capable of asynchronous I/O. These design choices aim to optimize throughput and scalability in web applications with many input/output operations, as well as for real-time Web applications (e.g., real-time communication programs and browser games).[6]

The Node.js distributed development project, governed by the Node.js Foundation,[7] is facilitated by the Linux Foundation's Collaborative Projects program.[8]

Corporate users of Node.js software include GoDaddy,[9] Groupon,[10] IBM,[11] LinkedIn,[12][13] Microsoft,[14][15] Netflix,[16] PayPal,[17][18] Rakuten, SAP, Tuenti,[19] Voxer,[20] Walmart,[21] and Yahoo!.[22]

Contents 
1	History
2	Overview
2.1	Platform architecture
2.2	Industry support
3	Releases
4	Technical details
4.1	Threading
4.2	V8
4.3	Package management
4.4	Unified API
4.5	Event loop
5	Project governance
6	See also
7	References
8	Further reading
9	External links
History

Ryan Dahl, creator of Node.js, in 2010
Node.js was originally written by Ryan Dahl in 2009,[23] about thirteen years after the introduction of the first server-side JavaScript environment, Netscape's LiveWire Pro Web.[24] The initial release supported only Linux and Mac OS X. Its development and maintenance was led by Dahl and later sponsored by Joyent.[25]

Dahl was inspired to create Node.js after seeing a file upload progress bar on Flickr. The browser did not know how much of the file had been uploaded and had to query the Web server. Dahl desired an easier way.[6][26]

Dahl criticized the limited possibilities of the most popular web server in 2009, Apache HTTP Server, to handle a lot of concurrent connections (up to 10,000 and more) and the most common way of creating code (sequential programming), when code either blocked the entire process or implied multiple execution stacks in the case of simultaneous connections.[27]

Dahl demonstrated the project at the inaugural European JSConf on November 8, 2009.[28][29][30] Node.js combined Google's V8 JavaScript engine, an event loop, and a low-level I/O API.[31]

In January 2010, a package manager was introduced for the Node.js environment called npm.[32] The package manager makes it easier for programmers to publish and share source code of Node.js libraries and is designed to simplify installation, updating, and uninstallation of libraries.[31]

In June 2011, Microsoft and Joyent implemented a native Windows version of Node.js.[33] The first Node.js build supporting Windows was released in July 2011.

In January 2012, Dahl stepped aside, promoting coworker and npm creator Isaac Schlueter to manage the project.[34] In January 2014, Schlueter announced that Timothy J. Fontaine would lead the project.[35]

In December 2014, Fedor Indutny started io.js, a fork of Node.js. Due to the internal conflict over Joyent's governance, io.js was created as an open governance alternative with a separate technical committee.[36][37] Unlike Node.js,[38] the authors planned to keep io.js up-to-date with the latest releases of the Google V8 JavaScript engine.[39]

In February 2015, the intent to form a neutral Node.js Foundation was announced. By June 2015, the Node.js and io.js communities voted to work together under the Node.js Foundation.[40]

In September 2015, Node.js v0.12 and io.js v3.3 were merged back together into Node v4.0.[41] This brought V8 ES6 features into Node.js, and a long-term support release cycle.[42] As of 2016, the io.js website recommends that developers switch back to Node.js and that no further releases of io.js are planned due to the merger.[43]

Overview
Node.js allows the creation of Web servers and networking tools using JavaScript and a collection of "modules" that handle various core functionality.[28][31][44][45][46] Modules are provided for file system I/O, networking (DNS, HTTP, TCP, TLS/SSL, or UDP), binary data (buffers), cryptography functions, data streams, and other core functions.[31][45][47] Node.js's modules use an API designed to reduce the complexity of writing server applications.[31][45]

Node.js is officially supported on Linux, macOS, Microsoft Windows, SmartOS, FreeBSD, and IBM AIX.[3] The provided source code may also be built on similar operating systems or be modified by third parties to support others such as NonStop[48] and Unix servers. Alternatively, they can be written with CoffeeScript[49] (a JavaScript alternative), Dart or TypeScript (strongly typed forms of JavaScript), or any other language that can compile to JavaScript.[49][50]

Node.js is primarily used to build network programs such as Web servers.[44] The biggest difference between Node.js and PHP is that most functions in PHP block until completion (commands execute only after previous commands finish), while Node.js functions are non-blocking (commands execute concurrently or even in parallel,[51][52] and use callbacks to signal completion or failure).[44]

Platform architecture
Node.js brings event-driven programming to web servers, enabling development of fast web servers in JavaScript.[31] Developers can create highly scalable servers without using threading, by using a simplified model of event-driven programming that uses callbacks to signal the completion of a task.[31] Node.js connects the ease of a scripting language (JavaScript) with the power of Unix network programming.[31]

Node.js was built on the Google V8 JavaScript engine since it was open-sourced under the BSD license. It is extremely fast and proficient with internet fundamentals such as HTTP, DNS, TCP.[28] Also, JavaScript was a well-known language, making Node.js immediately accessible to the entire web development community.[28]

Industry support
There are thousands of open-source libraries for Node.js, most of them hosted on the npm website. The Node.js developer community has two main mailing lists and the IRC channel #node.js on freenode. There are multiple developer conferences and events that support the Node.js community including NodeConf, Node Interactive and Node Summit as well as a number of regional events.

The open-source community has developed web frameworks to accelerate the development of applications. Such frameworks include Connect, Express.js, Socket.IO, Koa.js, Hapi.js, Sails.js, Meteor, Derby, and many others.[31][53] Various packages have also been created for interfacing with other languages or runtime environments such as Microsoft .NET.[54]

Modern desktop IDEs provide editing and debugging features specifically for Node.js applications. Such IDEs include Atom, Brackets, JetBrains WebStorm,[55][56] Microsoft Visual Studio (with Node.js Tools for Visual Studio,[57] or TypeScript with Node definitions,[58][59][60][61]) NetBeans,[62] Nodeclipse Enide Studio [63] (Eclipse-based), and Visual Studio Code.[64][65] Certain online web-based IDEs also support Node.js, such as Codeanywhere, Codenvy, Cloud9 IDE, Koding, and the visual flow editor in Node-RED.

Releases
Release	Code name	Release date	LTS status	Active LTS start	Maintenance start	Maintenance end
v0.10.x		2013-03-11	End-of-life	-	2015-10-01	2016-10-31
v0.12.x		2015-02-06	End-of-life	-	2016-04-01	2016-12-31
4.x	Argon[66]	2015-09-08	End-of-life	2015-10-01	2017-04-01	2018-04-30
5.x		2015-10-29	No LTS	N/A	2016-06-30
6.x	Boron[66]	2016-04-26	Maintenance	2016-10-18	2018-04-30	April 2019
7.x		2016-10-25	No LTS	N/A	2017-06-30
8.x	Carbon[66]	2017-05-30	Active	2017-10-31	April 2019	December 2019
9.x		2017-10-01	No LTS	N/A	June 2018
10.x	Dubnium[66]	2018-04-24	Active	October 2018	April 2020	April 2021
11.x[66]		2018-10-23	No LTS	N/A	June 2019
New major releases of Node.js are cut from the GitHub master branch every six months. Even-numbered versions are cut in April and odd-numbered versions are cut in October. When a new odd version is released, the previous even version undergoes transition to Long Term Support (LTS), which gives that version 18 months of active support from the date it is designated LTS. After these 18 months expire, an LTS release receives an additional 12 months of maintenance support. An active version receives non-breaking backports of changes a few weeks after they land in the current release. A maintenance release only receives critical fixes and documentation updates.[66] The LTS Working Group manages strategy and policy in collaboration with the Technical Steering Committee of the Node.js Foundation.

Technical details

This section may be too technical for most readers to understand. Please help improve it to make it understandable to non-experts, without removing the technical details. (August 2015) (Learn how and when to remove this template message)
Node.js is a Javascript runtime environment that processes incoming requests in a loop, called the event loop.

Threading
Node.js operates on a single thread, using non-blocking I/O calls, allowing it to support tens of thousands of concurrent connections without incurring the cost of thread context switching.[67] The design of sharing a single thread among all the requests that use the observer pattern is intended for building highly concurrent applications, where any function performing I/O must use a callback. To accommodate the single-threaded event loop, Node.js uses the libuv libraryâ€”which, in turn, uses a fixed-sized thread pool that handles some of the non-blocking asynchronous I/O operations.[6]

A downside of this single-threaded approach is that Node.js doesn't allow vertical scaling by increasing the number of CPU cores of the machine it is running on without using an additional module, such as cluster,[51] StrongLoop Process Manager,[68] or pm2.[69] However, developers can increase the default number of threads in the libuv thread pool. The server operating system (OS) is likely to distribute these threads across multiple cores.[70]

A thread pool handles execution of parallel tasks in Node.js. The main thread call functions post tasks to the shared task queue, which threads in the thread pool pull and execute. Inherently non-blocking system functions such as networking translate to kernel-side non-blocking sockets, while inherently blocking system functions such as file I/O run in a blocking way on their own threads. When a thread in the thread pool completes a task, it informs the main thread of this, which in turn, wakes up and executes the registered callback. Since Node.js handles callbacks in serial on the main thread, long lasting computations and other CPU-bound tasks freeze the entire event-loop until completion.[citation needed]

V8
V8 is the JavaScript execution engine built for Google Chrome and open-sourced by Google in 2008. Written in C++, V8 compiles JavaScript source code to native machine code instead of interpreting it in real time.[6]

Node.js uses libuv to handle asynchronous events. Libuv is an abstraction layer for network and file system functionality on both Windows and POSIX-based systems such as Linux, macOS, OSS on NonStop, and Unix.

The core functionality of Node.js resides in a JavaScript library. The Node.js bindings, written in C++, connect these technologies to each other and to the operating system.

Package management
npm is the pre-installed package manager for the Node.js server platform. It installs Node.js programs from the npm registry, organizing the installation and management of third-party Node.js programs. Packages in the npm registry can range from simple helper libraries such as Lodash to task runners such as Grunt.

Unified API
Node.js can be combined with a browser, a database that supports JSON data (such as Postgres,[71] MongoDB, or CouchDB) and JSON for a unified JavaScript development stack. With the adaptation of what were essentially server-side development patterns such as MVC, MVP, MVVM, etc., Node.js allows the reuse of the same model and service interface between client-side and server-side.

Event loop
Node.js registers with the operating system so the OS notifies it of connections and issues a callback. Within the Node.js runtime, each connection is a small heap allocation. Traditionally, relatively heavyweight OS processes or threads handled each connection. Node.js uses an event loop for scalability, instead of processes or threads.[72] In contrast to other event-driven servers, Node.js's event loop does not need to be called explicitly. Instead callbacks are defined, and the server automatically enters the event loop at the end of the callback definition. Node.js exits the event loop when there are no further callbacks to be performed.

Project governance
In 2015, various branches of the greater Node.js community began working under the vendor-neutral Node.js Foundation. The stated purpose of the organization "is to enable widespread adoption and help accelerate development of Node.js and other related modules through an open governance model that encourages participation, technical contribution, and a framework for long-term stewardship by an ecosystem invested in Node.js' success."[73]

The Node.js Foundation Technical Steering Committee (TSC) is the technical governing body of the Node.js Foundation. The TSC is responsible for the core Node.js repo as well as dependent and adjacent projects. Generally the TSC delegates administration of these projects to working groups or committees.[74] The LTS group that manages long term supported releases is one such group. Other current groups include: Website, Streams, Build, Diagnostics, i18n, Evangelism, Docker, Addon API, Benchmarking, Post-mortem, Intl, Documentation, and Testing.[75]

In August, 2017, a governance breakdown precipitated efforts to repair the resulting damage and to create a path to future stability of governance.[76]

See also
	Free software portal
List of server-side JavaScript implementations
List of JavaScript libraries
MEAN (software bundle)
Online JavaScript IDE
Rhino (JavaScript engine)
Application server

Node.js
Node.js logo.svg
Original author(s)	Ryan Dahl
Developer(s)	Joyent
Initial release	May 27, 2009; 9 years ago[1]
Stable release	
10.4.0 / June 6, 2018; 6 days ago[2]
Repository	
https://github.com/nodejs/node
Edit this at Wikidata
Written in	C, C++, JavaScript
Operating system	Linux, macOS, Microsoft Windows, SmartOS, FreeBSD, IBM AIX[3]
Type	Run-time environment
License	MIT[4]
Website	nodejs.org
Node.js is an open-source, cross-platform JavaScript run-time environment that executes JavaScript code server-side. Historically, JavaScript was used primarily for client-side scripting, in which scripts written in JavaScript are embedded in a webpage's HTML and run client-side by a JavaScript engine in the user's web browser. Node.js lets developers use JavaScript for server-side scriptingâ€”running scripts server-side to produce dynamic web page content before the page is sent to the user's web browser. Consequently, Node.js represents a "JavaScript everywhere" paradigm,[5] unifying web application development around a single programming language, rather than different languages for server side and client side scripts.

Though .js is the conventional filename extension for JavaScript code, the name "Node.js" does not refer to a particular file in this context and is merely the name of the product. Node.js has an event-driven architecture capable of asynchronous I/O. These design choices aim to optimize throughput and scalability in web applications with many input/output operations, as well as for real-time Web applications (e.g., real-time communication programs and browser games).[6]

The Node.js distributed development project, governed by the Node.js Foundation,[7] is facilitated by the Linux Foundation's Collaborative Projects program.[8]

Corporate users of Node.js software include GoDaddy,[9] Groupon,[10] IBM,[11] LinkedIn,[12][13] Microsoft,[14][15] Netflix,[16] PayPal,[17][18] Rakuten, SAP, Tuenti,[19] Voxer,[20] Walmart,[21] and Yahoo!.[22]

Contents 
1	History
2	Overview
2.1	Platform architecture
2.2	Industry support
3	Releases
4	Technical details
4.1	Threading
4.2	V8
4.3	Package management
4.4	Unified API
4.5	Event loop
5	Project governance
6	See also
7	References
8	Further reading
9	External links
History

Ryan Dahl, creator of Node.js, in 2010
Node.js was originally written by Ryan Dahl in 2009,[23] about thirteen years after the introduction of the first server-side JavaScript environment, Netscape's LiveWire Pro Web.[24] The initial release supported only Linux and Mac OS X. Its development and maintenance was led by Dahl and later sponsored by Joyent.[25]

Dahl was inspired to create Node.js after seeing a file upload progress bar on Flickr. The browser did not know how much of the file had been uploaded and had to query the Web server. Dahl desired an easier way.[6][26]

Dahl criticized the limited possibilities of the most popular web server in 2009, Apache HTTP Server, to handle a lot of concurrent connections (up to 10,000 and more) and the most common way of creating code (sequential programming), when code either blocked the entire process or implied multiple execution stacks in the case of simultaneous connections.[27]

Dahl demonstrated the project at the inaugural European JSConf on November 8, 2009.[28][29][30] Node.js combined Google's V8 JavaScript engine, an event loop, and a low-level I/O API.[31]

In January 2010, a package manager was introduced for the Node.js environment called npm.[32] The package manager makes it easier for programmers to publish and share source code of Node.js libraries and is designed to simplify installation, updating, and uninstallation of libraries.[31]

In June 2011, Microsoft and Joyent implemented a native Windows version of Node.js.[33] The first Node.js build supporting Windows was released in July 2011.

In January 2012, Dahl stepped aside, promoting coworker and npm creator Isaac Schlueter to manage the project.[34] In January 2014, Schlueter announced that Timothy J. Fontaine would lead the project.[35]

In December 2014, Fedor Indutny started io.js, a fork of Node.js. Due to the internal conflict over Joyent's governance, io.js was created as an open governance alternative with a separate technical committee.[36][37] Unlike Node.js,[38] the authors planned to keep io.js up-to-date with the latest releases of the Google V8 JavaScript engine.[39]

In February 2015, the intent to form a neutral Node.js Foundation was announced. By June 2015, the Node.js and io.js communities voted to work together under the Node.js Foundation.[40]

In September 2015, Node.js v0.12 and io.js v3.3 were merged back together into Node v4.0.[41] This brought V8 ES6 features into Node.js, and a long-term support release cycle.[42] As of 2016, the io.js website recommends that developers switch back to Node.js and that no further releases of io.js are planned due to the merger.[43]

Overview
Node.js allows the creation of Web servers and networking tools using JavaScript and a collection of "modules" that handle various core functionality.[28][31][44][45][46] Modules are provided for file system I/O, networking (DNS, HTTP, TCP, TLS/SSL, or UDP), binary data (buffers), cryptography functions, data streams, and other core functions.[31][45][47] Node.js's modules use an API designed to reduce the complexity of writing server applications.[31][45]

Node.js is officially supported on Linux, macOS, Microsoft Windows, SmartOS, FreeBSD, and IBM AIX.[3] The provided source code may also be built on similar operating systems or be modified by third parties to support others such as NonStop[48] and Unix servers. Alternatively, they can be written with CoffeeScript[49] (a JavaScript alternative), Dart or TypeScript (strongly typed forms of JavaScript), or any other language that can compile to JavaScript.[49][50]

Node.js is primarily used to build network programs such as Web servers.[44] The biggest difference between Node.js and PHP is that most functions in PHP block until completion (commands execute only after previous commands finish), while Node.js functions are non-blocking (commands execute concurrently or even in parallel,[51][52] and use callbacks to signal completion or failure).[44]

Platform architecture
Node.js brings event-driven programming to web servers, enabling development of fast web servers in JavaScript.[31] Developers can create highly scalable servers without using threading, by using a simplified model of event-driven programming that uses callbacks to signal the completion of a task.[31] Node.js connects the ease of a scripting language (JavaScript) with the power of Unix network programming.[31]

Node.js was built on the Google V8 JavaScript engine since it was open-sourced under the BSD license. It is extremely fast and proficient with internet fundamentals such as HTTP, DNS, TCP.[28] Also, JavaScript was a well-known language, making Node.js immediately accessible to the entire web development community.[28]

Industry support
There are thousands of open-source libraries for Node.js, most of them hosted on the npm website. The Node.js developer community has two main mailing lists and the IRC channel #node.js on freenode. There are multiple developer conferences and events that support the Node.js community including NodeConf, Node Interactive and Node Summit as well as a number of regional events.

The open-source community has developed web frameworks to accelerate the development of applications. Such frameworks include Connect, Express.js, Socket.IO, Koa.js, Hapi.js, Sails.js, Meteor, Derby, and many others.[31][53] Various packages have also been created for interfacing with other languages or runtime environments such as Microsoft .NET.[54]

Modern desktop IDEs provide editing and debugging features specifically for Node.js applications. Such IDEs include Atom, Brackets, JetBrains WebStorm,[55][56] Microsoft Visual Studio (with Node.js Tools for Visual Studio,[57] or TypeScript with Node definitions,[58][59][60][61]) NetBeans,[62] Nodeclipse Enide Studio [63] (Eclipse-based), and Visual Studio Code.[64][65] Certain online web-based IDEs also support Node.js, such as Codeanywhere, Codenvy, Cloud9 IDE, Koding, and the visual flow editor in Node-RED.

Releases
Release	Code name	Release date	LTS status	Active LTS start	Maintenance start	Maintenance end
v0.10.x		2013-03-11	End-of-life	-	2015-10-01	2016-10-31
v0.12.x		2015-02-06	End-of-life	-	2016-04-01	2016-12-31
4.x	Argon[66]	2015-09-08	End-of-life	2015-10-01	2017-04-01	2018-04-30
5.x		2015-10-29	No LTS	N/A	2016-06-30
6.x	Boron[66]	2016-04-26	Maintenance	2016-10-18	2018-04-30	April 2019
7.x		2016-10-25	No LTS	N/A	2017-06-30
8.x	Carbon[66]	2017-05-30	Active	2017-10-31	April 2019	December 2019
9.x		2017-10-01	No LTS	N/A	June 2018
10.x	Dubnium[66]	2018-04-24	Active	October 2018	April 2020	April 2021
11.x[66]		2018-10-23	No LTS	N/A	June 2019
New major releases of Node.js are cut from the GitHub master branch every six months. Even-numbered versions are cut in April and odd-numbered versions are cut in October. When a new odd version is released, the previous even version undergoes transition to Long Term Support (LTS), which gives that version 18 months of active support from the date it is designated LTS. After these 18 months expire, an LTS release receives an additional 12 months of maintenance support. An active version receives non-breaking backports of changes a few weeks after they land in the current release. A maintenance release only receives critical fixes and documentation updates.[66] The LTS Working Group manages strategy and policy in collaboration with the Technical Steering Committee of the Node.js Foundation.

Technical details

This section may be too technical for most readers to understand. Please help improve it to make it understandable to non-experts, without removing the technical details. (August 2015) (Learn how and when to remove this template message)
Node.js is a Javascript runtime environment that processes incoming requests in a loop, called the event loop.

Threading
Node.js operates on a single thread, using non-blocking I/O calls, allowing it to support tens of thousands of concurrent connections without incurring the cost of thread context switching.[67] The design of sharing a single thread among all the requests that use the observer pattern is intended for building highly concurrent applications, where any function performing I/O must use a callback. To accommodate the single-threaded event loop, Node.js uses the libuv libraryâ€”which, in turn, uses a fixed-sized thread pool that handles some of the non-blocking asynchronous I/O operations.[6]

A downside of this single-threaded approach is that Node.js doesn't allow vertical scaling by increasing the number of CPU cores of the machine it is running on without using an additional module, such as cluster,[51] StrongLoop Process Manager,[68] or pm2.[69] However, developers can increase the default number of threads in the libuv thread pool. The server operating system (OS) is likely to distribute these threads across multiple cores.[70]

A thread pool handles execution of parallel tasks in Node.js. The main thread call functions post tasks to the shared task queue, which threads in the thread pool pull and execute. Inherently non-blocking system functions such as networking translate to kernel-side non-blocking sockets, while inherently blocking system functions such as file I/O run in a blocking way on their own threads. When a thread in the thread pool completes a task, it informs the main thread of this, which in turn, wakes up and executes the registered callback. Since Node.js handles callbacks in serial on the main thread, long lasting computations and other CPU-bound tasks freeze the entire event-loop until completion.[citation needed]

V8
V8 is the JavaScript execution engine built for Google Chrome and open-sourced by Google in 2008. Written in C++, V8 compiles JavaScript source code to native machine code instead of interpreting it in real time.[6]

Node.js uses libuv to handle asynchronous events. Libuv is an abstraction layer for network and file system functionality on both Windows and POSIX-based systems such as Linux, macOS, OSS on NonStop, and Unix.

The core functionality of Node.js resides in a JavaScript library. The Node.js bindings, written in C++, connect these technologies to each other and to the operating system.

Package management
npm is the pre-installed package manager for the Node.js server platform. It installs Node.js programs from the npm registry, organizing the installation and management of third-party Node.js programs. Packages in the npm registry can range from simple helper libraries such as Lodash to task runners such as Grunt.

Unified API
Node.js can be combined with a browser, a database that supports JSON data (such as Postgres,[71] MongoDB, or CouchDB) and JSON for a unified JavaScript development stack. With the adaptation of what were essentially server-side development patterns such as MVC, MVP, MVVM, etc., Node.js allows the reuse of the same model and service interface between client-side and server-side.

Event loop
Node.js registers with the operating system so the OS notifies it of connections and issues a callback. Within the Node.js runtime, each connection is a small heap allocation. Traditionally, relatively heavyweight OS processes or threads handled each connection. Node.js uses an event loop for scalability, instead of processes or threads.[72] In contrast to other event-driven servers, Node.js's event loop does not need to be called explicitly. Instead callbacks are defined, and the server automatically enters the event loop at the end of the callback definition. Node.js exits the event loop when there are no further callbacks to be performed.

Project governance
In 2015, various branches of the greater Node.js community began working under the vendor-neutral Node.js Foundation. The stated purpose of the organization "is to enable widespread adoption and help accelerate development of Node.js and other related modules through an open governance model that encourages participation, technical contribution, and a framework for long-term stewardship by an ecosystem invested in Node.js' success."[73]

The Node.js Foundation Technical Steering Committee (TSC) is the technical governing body of the Node.js Foundation. The TSC is responsible for the core Node.js repo as well as dependent and adjacent projects. Generally the TSC delegates administration of these projects to working groups or committees.[74] The LTS group that manages long term supported releases is one such group. Other current groups include: Website, Streams, Build, Diagnostics, i18n, Evangelism, Docker, Addon API, Benchmarking, Post-mortem, Intl, Documentation, and Testing.[75]

In August, 2017, a governance breakdown precipitated efforts to repair the resulting damage and to create a path to future stability of governance.[76]

See also
	Free software portal
List of server-side JavaScript implementations
List of JavaScript libraries
MEAN (software bundle)
Online JavaScript IDE
Rhino (JavaScript engine)
Application server

Node.js
Node.js logo.svg
Original author(s)	Ryan Dahl
Developer(s)	Joyent
Initial release	May 27, 2009; 9 years ago[1]
Stable release	
10.4.0 / June 6, 2018; 6 days ago[2]
Repository	
https://github.com/nodejs/node
Edit this at Wikidata
Written in	C, C++, JavaScript
Operating system	Linux, macOS, Microsoft Windows, SmartOS, FreeBSD, IBM AIX[3]
Type	Run-time environment
License	MIT[4]
Website	nodejs.org
Node.js is an open-source, cross-platform JavaScript run-time environment that executes JavaScript code server-side. Historically, JavaScript was used primarily for client-side scripting, in which scripts written in JavaScript are embedded in a webpage's HTML and run client-side by a JavaScript engine in the user's web browser. Node.js lets developers use JavaScript for server-side scriptingâ€”running scripts server-side to produce dynamic web page content before the page is sent to the user's web browser. Consequently, Node.js represents a "JavaScript everywhere" paradigm,[5] unifying web application development around a single programming language, rather than different languages for server side and client side scripts.

Though .js is the conventional filename extension for JavaScript code, the name "Node.js" does not refer to a particular file in this context and is merely the name of the product. Node.js has an event-driven architecture capable of asynchronous I/O. These design choices aim to optimize throughput and scalability in web applications with many input/output operations, as well as for real-time Web applications (e.g., real-time communication programs and browser games).[6]

The Node.js distributed development project, governed by the Node.js Foundation,[7] is facilitated by the Linux Foundation's Collaborative Projects program.[8]

Corporate users of Node.js software include GoDaddy,[9] Groupon,[10] IBM,[11] LinkedIn,[12][13] Microsoft,[14][15] Netflix,[16] PayPal,[17][18] Rakuten, SAP, Tuenti,[19] Voxer,[20] Walmart,[21] and Yahoo!.[22]

Contents 
1	History
2	Overview
2.1	Platform architecture
2.2	Industry support
3	Releases
4	Technical details
4.1	Threading
4.2	V8
4.3	Package management
4.4	Unified API
4.5	Event loop
5	Project governance
6	See also
7	References
8	Further reading
9	External links
History

Ryan Dahl, creator of Node.js, in 2010
Node.js was originally written by Ryan Dahl in 2009,[23] about thirteen years after the introduction of the first server-side JavaScript environment, Netscape's LiveWire Pro Web.[24] The initial release supported only Linux and Mac OS X. Its development and maintenance was led by Dahl and later sponsored by Joyent.[25]

Dahl was inspired to create Node.js after seeing a file upload progress bar on Flickr. The browser did not know how much of the file had been uploaded and had to query the Web server. Dahl desired an easier way.[6][26]

Dahl criticized the limited possibilities of the most popular web server in 2009, Apache HTTP Server, to handle a lot of concurrent connections (up to 10,000 and more) and the most common way of creating code (sequential programming), when code either blocked the entire process or implied multiple execution stacks in the case of simultaneous connections.[27]

Dahl demonstrated the project at the inaugural European JSConf on November 8, 2009.[28][29][30] Node.js combined Google's V8 JavaScript engine, an event loop, and a low-level I/O API.[31]

In January 2010, a package manager was introduced for the Node.js environment called npm.[32] The package manager makes it easier for programmers to publish and share source code of Node.js libraries and is designed to simplify installation, updating, and uninstallation of libraries.[31]

In June 2011, Microsoft and Joyent implemented a native Windows version of Node.js.[33] The first Node.js build supporting Windows was released in July 2011.

In January 2012, Dahl stepped aside, promoting coworker and npm creator Isaac Schlueter to manage the project.[34] In January 2014, Schlueter announced that Timothy J. Fontaine would lead the project.[35]

In December 2014, Fedor Indutny started io.js, a fork of Node.js. Due to the internal conflict over Joyent's governance, io.js was created as an open governance alternative with a separate technical committee.[36][37] Unlike Node.js,[38] the authors planned to keep io.js up-to-date with the latest releases of the Google V8 JavaScript engine.[39]

In February 2015, the intent to form a neutral Node.js Foundation was announced. By June 2015, the Node.js and io.js communities voted to work together under the Node.js Foundation.[40]

In September 2015, Node.js v0.12 and io.js v3.3 were merged back together into Node v4.0.[41] This brought V8 ES6 features into Node.js, and a long-term support release cycle.[42] As of 2016, the io.js website recommends that developers switch back to Node.js and that no further releases of io.js are planned due to the merger.[43]

Overview
Node.js allows the creation of Web servers and networking tools using JavaScript and a collection of "modules" that handle various core functionality.[28][31][44][45][46] Modules are provided for file system I/O, networking (DNS, HTTP, TCP, TLS/SSL, or UDP), binary data (buffers), cryptography functions, data streams, and other core functions.[31][45][47] Node.js's modules use an API designed to reduce the complexity of writing server applications.[31][45]

Node.js is officially supported on Linux, macOS, Microsoft Windows, SmartOS, FreeBSD, and IBM AIX.[3] The provided source code may also be built on similar operating systems or be modified by third parties to support others such as NonStop[48] and Unix servers. Alternatively, they can be written with CoffeeScript[49] (a JavaScript alternative), Dart or TypeScript (strongly typed forms of JavaScript), or any other language that can compile to JavaScript.[49][50]

Node.js is primarily used to build network programs such as Web servers.[44] The biggest difference between Node.js and PHP is that most functions in PHP block until completion (commands execute only after previous commands finish), while Node.js functions are non-blocking (commands execute concurrently or even in parallel,[51][52] and use callbacks to signal completion or failure).[44]

Platform architecture
Node.js brings event-driven programming to web servers, enabling development of fast web servers in JavaScript.[31] Developers can create highly scalable servers without using threading, by using a simplified model of event-driven programming that uses callbacks to signal the completion of a task.[31] Node.js connects the ease of a scripting language (JavaScript) with the power of Unix network programming.[31]

Node.js was built on the Google V8 JavaScript engine since it was open-sourced under the BSD license. It is extremely fast and proficient with internet fundamentals such as HTTP, DNS, TCP.[28] Also, JavaScript was a well-known language, making Node.js immediately accessible to the entire web development community.[28]

Industry support
There are thousands of open-source libraries for Node.js, most of them hosted on the npm website. The Node.js developer community has two main mailing lists and the IRC channel #node.js on freenode. There are multiple developer conferences and events that support the Node.js community including NodeConf, Node Interactive and Node Summit as well as a number of regional events.

The open-source community has developed web frameworks to accelerate the development of applications. Such frameworks include Connect, Express.js, Socket.IO, Koa.js, Hapi.js, Sails.js, Meteor, Derby, and many others.[31][53] Various packages have also been created for interfacing with other languages or runtime environments such as Microsoft .NET.[54]

Modern desktop IDEs provide editing and debugging features specifically for Node.js applications. Such IDEs include Atom, Brackets, JetBrains WebStorm,[55][56] Microsoft Visual Studio (with Node.js Tools for Visual Studio,[57] or TypeScript with Node definitions,[58][59][60][61]) NetBeans,[62] Nodeclipse Enide Studio [63] (Eclipse-based), and Visual Studio Code.[64][65] Certain online web-based IDEs also support Node.js, such as Codeanywhere, Codenvy, Cloud9 IDE, Koding, and the visual flow editor in Node-RED.

Releases
Release	Code name	Release date	LTS status	Active LTS start	Maintenance start	Maintenance end
v0.10.x		2013-03-11	End-of-life	-	2015-10-01	2016-10-31
v0.12.x		2015-02-06	End-of-life	-	2016-04-01	2016-12-31
4.x	Argon[66]	2015-09-08	End-of-life	2015-10-01	2017-04-01	2018-04-30
5.x		2015-10-29	No LTS	N/A	2016-06-30
6.x	Boron[66]	2016-04-26	Maintenance	2016-10-18	2018-04-30	April 2019
7.x		2016-10-25	No LTS	N/A	2017-06-30
8.x	Carbon[66]	2017-05-30	Active	2017-10-31	April 2019	December 2019
9.x		2017-10-01	No LTS	N/A	June 2018
10.x	Dubnium[66]	2018-04-24	Active	October 2018	April 2020	April 2021
11.x[66]		2018-10-23	No LTS	N/A	June 2019
New major releases of Node.js are cut from the GitHub master branch every six months. Even-numbered versions are cut in April and odd-numbered versions are cut in October. When a new odd version is released, the previous even version undergoes transition to Long Term Support (LTS), which gives that version 18 months of active support from the date it is designated LTS. After these 18 months expire, an LTS release receives an additional 12 months of maintenance support. An active version receives non-breaking backports of changes a few weeks after they land in the current release. A maintenance release only receives critical fixes and documentation updates.[66] The LTS Working Group manages strategy and policy in collaboration with the Technical Steering Committee of the Node.js Foundation.

Technical details

This section may be too technical for most readers to understand. Please help improve it to make it understandable to non-experts, without removing the technical details. (August 2015) (Learn how and when to remove this template message)
Node.js is a Javascript runtime environment that processes incoming requests in a loop, called the event loop.

Threading
Node.js operates on a single thread, using non-blocking I/O calls, allowing it to support tens of thousands of concurrent connections without incurring the cost of thread context switching.[67] The design of sharing a single thread among all the requests that use the observer pattern is intended for building highly concurrent applications, where any function performing I/O must use a callback. To accommodate the single-threaded event loop, Node.js uses the libuv libraryâ€”which, in turn, uses a fixed-sized thread pool that handles some of the non-blocking asynchronous I/O operations.[6]

A downside of this single-threaded approach is that Node.js doesn't allow vertical scaling by increasing the number of CPU cores of the machine it is running on without using an additional module, such as cluster,[51] StrongLoop Process Manager,[68] or pm2.[69] However, developers can increase the default number of threads in the libuv thread pool. The server operating system (OS) is likely to distribute these threads across multiple cores.[70]

A thread pool handles execution of parallel tasks in Node.js. The main thread call functions post tasks to the shared task queue, which threads in the thread pool pull and execute. Inherently non-blocking system functions such as networking translate to kernel-side non-blocking sockets, while inherently blocking system functions such as file I/O run in a blocking way on their own threads. When a thread in the thread pool completes a task, it informs the main thread of this, which in turn, wakes up and executes the registered callback. Since Node.js handles callbacks in serial on the main thread, long lasting computations and other CPU-bound tasks freeze the entire event-loop until completion.[citation needed]

V8
V8 is the JavaScript execution engine built for Google Chrome and open-sourced by Google in 2008. Written in C++, V8 compiles JavaScript source code to native machine code instead of interpreting it in real time.[6]

Node.js uses libuv to handle asynchronous events. Libuv is an abstraction layer for network and file system functionality on both Windows and POSIX-based systems such as Linux, macOS, OSS on NonStop, and Unix.

The core functionality of Node.js resides in a JavaScript library. The Node.js bindings, written in C++, connect these technologies to each other and to the operating system.

Package management
npm is the pre-installed package manager for the Node.js server platform. It installs Node.js programs from the npm registry, organizing the installation and management of third-party Node.js programs. Packages in the npm registry can range from simple helper libraries such as Lodash to task runners such as Grunt.

Unified API
Node.js can be combined with a browser, a database that supports JSON data (such as Postgres,[71] MongoDB, or CouchDB) and JSON for a unified JavaScript development stack. With the adaptation of what were essentially server-side development patterns such as MVC, MVP, MVVM, etc., Node.js allows the reuse of the same model and service interface between client-side and server-side.

Event loop
Node.js registers with the operating system so the OS notifies it of connections and issues a callback. Within the Node.js runtime, each connection is a small heap allocation. Traditionally, relatively heavyweight OS processes or threads handled each connection. Node.js uses an event loop for scalability, instead of processes or threads.[72] In contrast to other event-driven servers, Node.js's event loop does not need to be called explicitly. Instead callbacks are defined, and the server automatically enters the event loop at the end of the callback definition. Node.js exits the event loop when there are no further callbacks to be performed.

Project governance
In 2015, various branches of the greater Node.js community began working under the vendor-neutral Node.js Foundation. The stated purpose of the organization "is to enable widespread adoption and help accelerate development of Node.js and other related modules through an open governance model that encourages participation, technical contribution, and a framework for long-term stewardship by an ecosystem invested in Node.js' success."[73]

The Node.js Foundation Technical Steering Committee (TSC) is the technical governing body of the Node.js Foundation. The TSC is responsible for the core Node.js repo as well as dependent and adjacent projects. Generally the TSC delegates administration of these projects to working groups or committees.[74] The LTS group that manages long term supported releases is one such group. Other current groups include: Website, Streams, Build, Diagnostics, i18n, Evangelism, Docker, Addon API, Benchmarking, Post-mortem, Intl, Documentation, and Testing.[75]

In August, 2017, a governance breakdown precipitated efforts to repair the resulting damage and to create a path to future stability of governance.[76]

See also
	Free software portal
List of server-side JavaScript implementations
List of JavaScript libraries
MEAN (software bundle)
Online JavaScript IDE
Rhino (JavaScript engine)
Application server

Node.js
Node.js logo.svg
Original author(s)	Ryan Dahl
Developer(s)	Joyent
Initial release	May 27, 2009; 9 years ago[1]
Stable release	
10.4.0 / June 6, 2018; 6 days ago[2]
Repository	
https://github.com/nodejs/node
Edit this at Wikidata
Written in	C, C++, JavaScript
Operating system	Linux, macOS, Microsoft Windows, SmartOS, FreeBSD, IBM AIX[3]
Type	Run-time environment
License	MIT[4]
Website	nodejs.org
Node.js is an open-source, cross-platform JavaScript run-time environment that executes JavaScript code server-side. Historically, JavaScript was used primarily for client-side scripting, in which scripts written in JavaScript are embedded in a webpage's HTML and run client-side by a JavaScript engine in the user's web browser. Node.js lets developers use JavaScript for server-side scriptingâ€”running scripts server-side to produce dynamic web page content before the page is sent to the user's web browser. Consequently, Node.js represents a "JavaScript everywhere" paradigm,[5] unifying web application development around a single programming language, rather than different languages for server side and client side scripts.

Though .js is the conventional filename extension for JavaScript code, the name "Node.js" does not refer to a particular file in this context and is merely the name of the product. Node.js has an event-driven architecture capable of asynchronous I/O. These design choices aim to optimize throughput and scalability in web applications with many input/output operations, as well as for real-time Web applications (e.g., real-time communication programs and browser games).[6]

The Node.js distributed development project, governed by the Node.js Foundation,[7] is facilitated by the Linux Foundation's Collaborative Projects program.[8]

Corporate users of Node.js software include GoDaddy,[9] Groupon,[10] IBM,[11] LinkedIn,[12][13] Microsoft,[14][15] Netflix,[16] PayPal,[17][18] Rakuten, SAP, Tuenti,[19] Voxer,[20] Walmart,[21] and Yahoo!.[22]

Contents 
1	History
2	Overview
2.1	Platform architecture
2.2	Industry support
3	Releases
4	Technical details
4.1	Threading
4.2	V8
4.3	Package management
4.4	Unified API
4.5	Event loop
5	Project governance
6	See also
7	References
8	Further reading
9	External links
History

Ryan Dahl, creator of Node.js, in 2010
Node.js was originally written by Ryan Dahl in 2009,[23] about thirteen years after the introduction of the first server-side JavaScript environment, Netscape's LiveWire Pro Web.[24] The initial release supported only Linux and Mac OS X. Its development and maintenance was led by Dahl and later sponsored by Joyent.[25]

Dahl was inspired to create Node.js after seeing a file upload progress bar on Flickr. The browser did not know how much of the file had been uploaded and had to query the Web server. Dahl desired an easier way.[6][26]

Dahl criticized the limited possibilities of the most popular web server in 2009, Apache HTTP Server, to handle a lot of concurrent connections (up to 10,000 and more) and the most common way of creating code (sequential programming), when code either blocked the entire process or implied multiple execution stacks in the case of simultaneous connections.[27]

Dahl demonstrated the project at the inaugural European JSConf on November 8, 2009.[28][29][30] Node.js combined Google's V8 JavaScript engine, an event loop, and a low-level I/O API.[31]

In January 2010, a package manager was introduced for the Node.js environment called npm.[32] The package manager makes it easier for programmers to publish and share source code of Node.js libraries and is designed to simplify installation, updating, and uninstallation of libraries.[31]

In June 2011, Microsoft and Joyent implemented a native Windows version of Node.js.[33] The first Node.js build supporting Windows was released in July 2011.

In January 2012, Dahl stepped aside, promoting coworker and npm creator Isaac Schlueter to manage the project.[34] In January 2014, Schlueter announced that Timothy J. Fontaine would lead the project.[35]

In December 2014, Fedor Indutny started io.js, a fork of Node.js. Due to the internal conflict over Joyent's governance, io.js was created as an open governance alternative with a separate technical committee.[36][37] Unlike Node.js,[38] the authors planned to keep io.js up-to-date with the latest releases of the Google V8 JavaScript engine.[39]

In February 2015, the intent to form a neutral Node.js Foundation was announced. By June 2015, the Node.js and io.js communities voted to work together under the Node.js Foundation.[40]

In September 2015, Node.js v0.12 and io.js v3.3 were merged back together into Node v4.0.[41] This brought V8 ES6 features into Node.js, and a long-term support release cycle.[42] As of 2016, the io.js website recommends that developers switch back to Node.js and that no further releases of io.js are planned due to the merger.[43]

Overview
Node.js allows the creation of Web servers and networking tools using JavaScript and a collection of "modules" that handle various core functionality.[28][31][44][45][46] Modules are provided for file system I/O, networking (DNS, HTTP, TCP, TLS/SSL, or UDP), binary data (buffers), cryptography functions, data streams, and other core functions.[31][45][47] Node.js's modules use an API designed to reduce the complexity of writing server applications.[31][45]

Node.js is officially supported on Linux, macOS, Microsoft Windows, SmartOS, FreeBSD, and IBM AIX.[3] The provided source code may also be built on similar operating systems or be modified by third parties to support others such as NonStop[48] and Unix servers. Alternatively, they can be written with CoffeeScript[49] (a JavaScript alternative), Dart or TypeScript (strongly typed forms of JavaScript), or any other language that can compile to JavaScript.[49][50]

Node.js is primarily used to build network programs such as Web servers.[44] The biggest difference between Node.js and PHP is that most functions in PHP block until completion (commands execute only after previous commands finish), while Node.js functions are non-blocking (commands execute concurrently or even in parallel,[51][52] and use callbacks to signal completion or failure).[44]

Platform architecture
Node.js brings event-driven programming to web servers, enabling development of fast web servers in JavaScript.[31] Developers can create highly scalable servers without using threading, by using a simplified model of event-driven programming that uses callbacks to signal the completion of a task.[31] Node.js connects the ease of a scripting language (JavaScript) with the power of Unix network programming.[31]

Node.js was built on the Google V8 JavaScript engine since it was open-sourced under the BSD license. It is extremely fast and proficient with internet fundamentals such as HTTP, DNS, TCP.[28] Also, JavaScript was a well-known language, making Node.js immediately accessible to the entire web development community.[28]

Industry support
There are thousands of open-source libraries for Node.js, most of them hosted on the npm website. The Node.js developer community has two main mailing lists and the IRC channel #node.js on freenode. There are multiple developer conferences and events that support the Node.js community including NodeConf, Node Interactive and Node Summit as well as a number of regional events.

The open-source community has developed web frameworks to accelerate the development of applications. Such frameworks include Connect, Express.js, Socket.IO, Koa.js, Hapi.js, Sails.js, Meteor, Derby, and many others.[31][53] Various packages have also been created for interfacing with other languages or runtime environments such as Microsoft .NET.[54]

Modern desktop IDEs provide editing and debugging features specifically for Node.js applications. Such IDEs include Atom, Brackets, JetBrains WebStorm,[55][56] Microsoft Visual Studio (with Node.js Tools for Visual Studio,[57] or TypeScript with Node definitions,[58][59][60][61]) NetBeans,[62] Nodeclipse Enide Studio [63] (Eclipse-based), and Visual Studio Code.[64][65] Certain online web-based IDEs also support Node.js, such as Codeanywhere, Codenvy, Cloud9 IDE, Koding, and the visual flow editor in Node-RED.

Releases
Release	Code name	Release date	LTS status	Active LTS start	Maintenance start	Maintenance end
v0.10.x		2013-03-11	End-of-life	-	2015-10-01	2016-10-31
v0.12.x		2015-02-06	End-of-life	-	2016-04-01	2016-12-31
4.x	Argon[66]	2015-09-08	End-of-life	2015-10-01	2017-04-01	2018-04-30
5.x		2015-10-29	No LTS	N/A	2016-06-30
6.x	Boron[66]	2016-04-26	Maintenance	2016-10-18	2018-04-30	April 2019
7.x		2016-10-25	No LTS	N/A	2017-06-30
8.x	Carbon[66]	2017-05-30	Active	2017-10-31	April 2019	December 2019
9.x		2017-10-01	No LTS	N/A	June 2018
10.x	Dubnium[66]	2018-04-24	Active	October 2018	April 2020	April 2021
11.x[66]		2018-10-23	No LTS	N/A	June 2019
New major releases of Node.js are cut from the GitHub master branch every six months. Even-numbered versions are cut in April and odd-numbered versions are cut in October. When a new odd version is released, the previous even version undergoes transition to Long Term Support (LTS), which gives that version 18 months of active support from the date it is designated LTS. After these 18 months expire, an LTS release receives an additional 12 months of maintenance support. An active version receives non-breaking backports of changes a few weeks after they land in the current release. A maintenance release only receives critical fixes and documentation updates.[66] The LTS Working Group manages strategy and policy in collaboration with the Technical Steering Committee of the Node.js Foundation.

Technical details

This section may be too technical for most readers to understand. Please help improve it to make it understandable to non-experts, without removing the technical details. (August 2015) (Learn how and when to remove this template message)
Node.js is a Javascript runtime environment that processes incoming requests in a loop, called the event loop.

Threading
Node.js operates on a single thread, using non-blocking I/O calls, allowing it to support tens of thousands of concurrent connections without incurring the cost of thread context switching.[67] The design of sharing a single thread among all the requests that use the observer pattern is intended for building highly concurrent applications, where any function performing I/O must use a callback. To accommodate the single-threaded event loop, Node.js uses the libuv libraryâ€”which, in turn, uses a fixed-sized thread pool that handles some of the non-blocking asynchronous I/O operations.[6]

A downside of this single-threaded approach is that Node.js doesn't allow vertical scaling by increasing the number of CPU cores of the machine it is running on without using an additional module, such as cluster,[51] StrongLoop Process Manager,[68] or pm2.[69] However, developers can increase the default number of threads in the libuv thread pool. The server operating system (OS) is likely to distribute these threads across multiple cores.[70]

A thread pool handles execution of parallel tasks in Node.js. The main thread call functions post tasks to the shared task queue, which threads in the thread pool pull and execute. Inherently non-blocking system functions such as networking translate to kernel-side non-blocking sockets, while inherently blocking system functions such as file I/O run in a blocking way on their own threads. When a thread in the thread pool completes a task, it informs the main thread of this, which in turn, wakes up and executes the registered callback. Since Node.js handles callbacks in serial on the main thread, long lasting computations and other CPU-bound tasks freeze the entire event-loop until completion.[citation needed]

V8
V8 is the JavaScript execution engine built for Google Chrome and open-sourced by Google in 2008. Written in C++, V8 compiles JavaScript source code to native machine code instead of interpreting it in real time.[6]

Node.js uses libuv to handle asynchronous events. Libuv is an abstraction layer for network and file system functionality on both Windows and POSIX-based systems such as Linux, macOS, OSS on NonStop, and Unix.

The core functionality of Node.js resides in a JavaScript library. The Node.js bindings, written in C++, connect these technologies to each other and to the operating system.

Package management
npm is the pre-installed package manager for the Node.js server platform. It installs Node.js programs from the npm registry, organizing the installation and management of third-party Node.js programs. Packages in the npm registry can range from simple helper libraries such as Lodash to task runners such as Grunt.

Unified API
Node.js can be combined with a browser, a database that supports JSON data (such as Postgres,[71] MongoDB, or CouchDB) and JSON for a unified JavaScript development stack. With the adaptation of what were essentially server-side development patterns such as MVC, MVP, MVVM, etc., Node.js allows the reuse of the same model and service interface between client-side and server-side.

Event loop
Node.js registers with the operating system so the OS notifies it of connections and issues a callback. Within the Node.js runtime, each connection is a small heap allocation. Traditionally, relatively heavyweight OS processes or threads handled each connection. Node.js uses an event loop for scalability, instead of processes or threads.[72] In contrast to other event-driven servers, Node.js's event loop does not need to be called explicitly. Instead callbacks are defined, and the server automatically enters the event loop at the end of the callback definition. Node.js exits the event loop when there are no further callbacks to be performed.

Project governance
In 2015, various branches of the greater Node.js community began working under the vendor-neutral Node.js Foundation. The stated purpose of the organization "is to enable widespread adoption and help accelerate development of Node.js and other related modules through an open governance model that encourages participation, technical contribution, and a framework for long-term stewardship by an ecosystem invested in Node.js' success."[73]

The Node.js Foundation Technical Steering Committee (TSC) is the technical governing body of the Node.js Foundation. The TSC is responsible for the core Node.js repo as well as dependent and adjacent projects. Generally the TSC delegates administration of these projects to working groups or committees.[74] The LTS group that manages long term supported releases is one such group. Other current groups include: Website, Streams, Build, Diagnostics, i18n, Evangelism, Docker, Addon API, Benchmarking, Post-mortem, Intl, Documentation, and Testing.[75]

In August, 2017, a governance breakdown precipitated efforts to repair the resulting damage and to create a path to future stability of governance.[76]

See also
	Free software portal
List of server-side JavaScript implementations
List of JavaScript libraries
MEAN (software bundle)
Online JavaScript IDE
Rhino (JavaScript engine)
Application server

Node.js
Node.js logo.svg
Original author(s)	Ryan Dahl
Developer(s)	Joyent
Initial release	May 27, 2009; 9 years ago[1]
Stable release	
10.4.0 / June 6, 2018; 6 days ago[2]
Repository	
https://github.com/nodejs/node
Edit this at Wikidata
Written in	C, C++, JavaScript
Operating system	Linux, macOS, Microsoft Windows, SmartOS, FreeBSD, IBM AIX[3]
Type	Run-time environment
License	MIT[4]
Website	nodejs.org
Node.js is an open-source, cross-platform JavaScript run-time environment that executes JavaScript code server-side. Historically, JavaScript was used primarily for client-side scripting, in which scripts written in JavaScript are embedded in a webpage's HTML and run client-side by a JavaScript engine in the user's web browser. Node.js lets developers use JavaScript for server-side scriptingâ€”running scripts server-side to produce dynamic web page content before the page is sent to the user's web browser. Consequently, Node.js represents a "JavaScript everywhere" paradigm,[5] unifying web application development around a single programming language, rather than different languages for server side and client side scripts.

Though .js is the conventional filename extension for JavaScript code, the name "Node.js" does not refer to a particular file in this context and is merely the name of the product. Node.js has an event-driven architecture capable of asynchronous I/O. These design choices aim to optimize throughput and scalability in web applications with many input/output operations, as well as for real-time Web applications (e.g., real-time communication programs and browser games).[6]

The Node.js distributed development project, governed by the Node.js Foundation,[7] is facilitated by the Linux Foundation's Collaborative Projects program.[8]

Corporate users of Node.js software include GoDaddy,[9] Groupon,[10] IBM,[11] LinkedIn,[12][13] Microsoft,[14][15] Netflix,[16] PayPal,[17][18] Rakuten, SAP, Tuenti,[19] Voxer,[20] Walmart,[21] and Yahoo!.[22]

Contents 
1	History
2	Overview
2.1	Platform architecture
2.2	Industry support
3	Releases
4	Technical details
4.1	Threading
4.2	V8
4.3	Package management
4.4	Unified API
4.5	Event loop
5	Project governance
6	See also
7	References
8	Further reading
9	External links
History

Ryan Dahl, creator of Node.js, in 2010
Node.js was originally written by Ryan Dahl in 2009,[23] about thirteen years after the introduction of the first server-side JavaScript environment, Netscape's LiveWire Pro Web.[24] The initial release supported only Linux and Mac OS X. Its development and maintenance was led by Dahl and later sponsored by Joyent.[25]

Dahl was inspired to create Node.js after seeing a file upload progress bar on Flickr. The browser did not know how much of the file had been uploaded and had to query the Web server. Dahl desired an easier way.[6][26]

Dahl criticized the limited possibilities of the most popular web server in 2009, Apache HTTP Server, to handle a lot of concurrent connections (up to 10,000 and more) and the most common way of creating code (sequential programming), when code either blocked the entire process or implied multiple execution stacks in the case of simultaneous connections.[27]

Dahl demonstrated the project at the inaugural European JSConf on November 8, 2009.[28][29][30] Node.js combined Google's V8 JavaScript engine, an event loop, and a low-level I/O API.[31]

In January 2010, a package manager was introduced for the Node.js environment called npm.[32] The package manager makes it easier for programmers to publish and share source code of Node.js libraries and is designed to simplify installation, updating, and uninstallation of libraries.[31]

In June 2011, Microsoft and Joyent implemented a native Windows version of Node.js.[33] The first Node.js build supporting Windows was released in July 2011.

In January 2012, Dahl stepped aside, promoting coworker and npm creator Isaac Schlueter to manage the project.[34] In January 2014, Schlueter announced that Timothy J. Fontaine would lead the project.[35]

In December 2014, Fedor Indutny started io.js, a fork of Node.js. Due to the internal conflict over Joyent's governance, io.js was created as an open governance alternative with a separate technical committee.[36][37] Unlike Node.js,[38] the authors planned to keep io.js up-to-date with the latest releases of the Google V8 JavaScript engine.[39]

In February 2015, the intent to form a neutral Node.js Foundation was announced. By June 2015, the Node.js and io.js communities voted to work together under the Node.js Foundation.[40]

In September 2015, Node.js v0.12 and io.js v3.3 were merged back together into Node v4.0.[41] This brought V8 ES6 features into Node.js, and a long-term support release cycle.[42] As of 2016, the io.js website recommends that developers switch back to Node.js and that no further releases of io.js are planned due to the merger.[43]

Overview
Node.js allows the creation of Web servers and networking tools using JavaScript and a collection of "modules" that handle various core functionality.[28][31][44][45][46] Modules are provided for file system I/O, networking (DNS, HTTP, TCP, TLS/SSL, or UDP), binary data (buffers), cryptography functions, data streams, and other core functions.[31][45][47] Node.js's modules use an API designed to reduce the complexity of writing server applications.[31][45]

Node.js is officially supported on Linux, macOS, Microsoft Windows, SmartOS, FreeBSD, and IBM AIX.[3] The provided source code may also be built on similar operating systems or be modified by third parties to support others such as NonStop[48] and Unix servers. Alternatively, they can be written with CoffeeScript[49] (a JavaScript alternative), Dart or TypeScript (strongly typed forms of JavaScript), or any other language that can compile to JavaScript.[49][50]

Node.js is primarily used to build network programs such as Web servers.[44] The biggest difference between Node.js and PHP is that most functions in PHP block until completion (commands execute only after previous commands finish), while Node.js functions are non-blocking (commands execute concurrently or even in parallel,[51][52] and use callbacks to signal completion or failure).[44]

Platform architecture
Node.js brings event-driven programming to web servers, enabling development of fast web servers in JavaScript.[31] Developers can create highly scalable servers without using threading, by using a simplified model of event-driven programming that uses callbacks to signal the completion of a task.[31] Node.js connects the ease of a scripting language (JavaScript) with the power of Unix network programming.[31]

Node.js was built on the Google V8 JavaScript engine since it was open-sourced under the BSD license. It is extremely fast and proficient with internet fundamentals such as HTTP, DNS, TCP.[28] Also, JavaScript was a well-known language, making Node.js immediately accessible to the entire web development community.[28]

Industry support
There are thousands of open-source libraries for Node.js, most of them hosted on the npm website. The Node.js developer community has two main mailing lists and the IRC channel #node.js on freenode. There are multiple developer conferences and events that support the Node.js community including NodeConf, Node Interactive and Node Summit as well as a number of regional events.

The open-source community has developed web frameworks to accelerate the development of applications. Such frameworks include Connect, Express.js, Socket.IO, Koa.js, Hapi.js, Sails.js, Meteor, Derby, and many others.[31][53] Various packages have also been created for interfacing with other languages or runtime environments such as Microsoft .NET.[54]

Modern desktop IDEs provide editing and debugging features specifically for Node.js applications. Such IDEs include Atom, Brackets, JetBrains WebStorm,[55][56] Microsoft Visual Studio (with Node.js Tools for Visual Studio,[57] or TypeScript with Node definitions,[58][59][60][61]) NetBeans,[62] Nodeclipse Enide Studio [63] (Eclipse-based), and Visual Studio Code.[64][65] Certain online web-based IDEs also support Node.js, such as Codeanywhere, Codenvy, Cloud9 IDE, Koding, and the visual flow editor in Node-RED.

Releases
Release	Code name	Release date	LTS status	Active LTS start	Maintenance start	Maintenance end
v0.10.x		2013-03-11	End-of-life	-	2015-10-01	2016-10-31
v0.12.x		2015-02-06	End-of-life	-	2016-04-01	2016-12-31
4.x	Argon[66]	2015-09-08	End-of-life	2015-10-01	2017-04-01	2018-04-30
5.x		2015-10-29	No LTS	N/A	2016-06-30
6.x	Boron[66]	2016-04-26	Maintenance	2016-10-18	2018-04-30	April 2019
7.x		2016-10-25	No LTS	N/A	2017-06-30
8.x	Carbon[66]	2017-05-30	Active	2017-10-31	April 2019	December 2019
9.x		2017-10-01	No LTS	N/A	June 2018
10.x	Dubnium[66]	2018-04-24	Active	October 2018	April 2020	April 2021
11.x[66]		2018-10-23	No LTS	N/A	June 2019
New major releases of Node.js are cut from the GitHub master branch every six months. Even-numbered versions are cut in April and odd-numbered versions are cut in October. When a new odd version is released, the previous even version undergoes transition to Long Term Support (LTS), which gives that version 18 months of active support from the date it is designated LTS. After these 18 months expire, an LTS release receives an additional 12 months of maintenance support. An active version receives non-breaking backports of changes a few weeks after they land in the current release. A maintenance release only receives critical fixes and documentation updates.[66] The LTS Working Group manages strategy and policy in collaboration with the Technical Steering Committee of the Node.js Foundation.

Technical details

This section may be too technical for most readers to understand. Please help improve it to make it understandable to non-experts, without removing the technical details. (August 2015) (Learn how and when to remove this template message)
Node.js is a Javascript runtime environment that processes incoming requests in a loop, called the event loop.

Threading
Node.js operates on a single thread, using non-blocking I/O calls, allowing it to support tens of thousands of concurrent connections without incurring the cost of thread context switching.[67] The design of sharing a single thread among all the requests that use the observer pattern is intended for building highly concurrent applications, where any function performing I/O must use a callback. To accommodate the single-threaded event loop, Node.js uses the libuv libraryâ€”which, in turn, uses a fixed-sized thread pool that handles some of the non-blocking asynchronous I/O operations.[6]

A downside of this single-threaded approach is that Node.js doesn't allow vertical scaling by increasing the number of CPU cores of the machine it is running on without using an additional module, such as cluster,[51] StrongLoop Process Manager,[68] or pm2.[69] However, developers can increase the default number of threads in the libuv thread pool. The server operating system (OS) is likely to distribute these threads across multiple cores.[70]

A thread pool handles execution of parallel tasks in Node.js. The main thread call functions post tasks to the shared task queue, which threads in the thread pool pull and execute. Inherently non-blocking system functions such as networking translate to kernel-side non-blocking sockets, while inherently blocking system functions such as file I/O run in a blocking way on their own threads. When a thread in the thread pool completes a task, it informs the main thread of this, which in turn, wakes up and executes the registered callback. Since Node.js handles callbacks in serial on the main thread, long lasting computations and other CPU-bound tasks freeze the entire event-loop until completion.[citation needed]

V8
V8 is the JavaScript execution engine built for Google Chrome and open-sourced by Google in 2008. Written in C++, V8 compiles JavaScript source code to native machine code instead of interpreting it in real time.[6]

Node.js uses libuv to handle asynchronous events. Libuv is an abstraction layer for network and file system functionality on both Windows and POSIX-based systems such as Linux, macOS, OSS on NonStop, and Unix.

The core functionality of Node.js resides in a JavaScript library. The Node.js bindings, written in C++, connect these technologies to each other and to the operating system.

Package management
npm is the pre-installed package manager for the Node.js server platform. It installs Node.js programs from the npm registry, organizing the installation and management of third-party Node.js programs. Packages in the npm registry can range from simple helper libraries such as Lodash to task runners such as Grunt.

Unified API
Node.js can be combined with a browser, a database that supports JSON data (such as Postgres,[71] MongoDB, or CouchDB) and JSON for a unified JavaScript development stack. With the adaptation of what were essentially server-side development patterns such as MVC, MVP, MVVM, etc., Node.js allows the reuse of the same model and service interface between client-side and server-side.

Event loop
Node.js registers with the operating system so the OS notifies it of connections and issues a callback. Within the Node.js runtime, each connection is a small heap allocation. Traditionally, relatively heavyweight OS processes or threads handled each connection. Node.js uses an event loop for scalability, instead of processes or threads.[72] In contrast to other event-driven servers, Node.js's event loop does not need to be called explicitly. Instead callbacks are defined, and the server automatically enters the event loop at the end of the callback definition. Node.js exits the event loop when there are no further callbacks to be performed.

Project governance
In 2015, various branches of the greater Node.js community began working under the vendor-neutral Node.js Foundation. The stated purpose of the organization "is to enable widespread adoption and help accelerate development of Node.js and other related modules through an open governance model that encourages participation, technical contribution, and a framework for long-term stewardship by an ecosystem invested in Node.js' success."[73]

The Node.js Foundation Technical Steering Committee (TSC) is the technical governing body of the Node.js Foundation. The TSC is responsible for the core Node.js repo as well as dependent and adjacent projects. Generally the TSC delegates administration of these projects to working groups or committees.[74] The LTS group that manages long term supported releases is one such group. Other current groups include: Website, Streams, Build, Diagnostics, i18n, Evangelism, Docker, Addon API, Benchmarking, Post-mortem, Intl, Documentation, and Testing.[75]

In August, 2017, a governance breakdown precipitated efforts to repair the resulting damage and to create a path to future stability of governance.[76]

See also
	Free software portal
List of server-side JavaScript implementations
List of JavaScript libraries
MEAN (software bundle)
Online JavaScript IDE
Rhino (JavaScript engine)
Application server

Node.js
Node.js logo.svg
Original author(s)	Ryan Dahl
Developer(s)	Joyent
Initial release	May 27, 2009; 9 years ago[1]
Stable release	
10.4.0 / June 6, 2018; 6 days ago[2]
Repository	
https://github.com/nodejs/node
Edit this at Wikidata
Written in	C, C++, JavaScript
Operating system	Linux, macOS, Microsoft Windows, SmartOS, FreeBSD, IBM AIX[3]
Type	Run-time environment
License	MIT[4]
Website	nodejs.org
Node.js is an open-source, cross-platform JavaScript run-time environment that executes JavaScript code server-side. Historically, JavaScript was used primarily for client-side scripting, in which scripts written in JavaScript are embedded in a webpage's HTML and run client-side by a JavaScript engine in the user's web browser. Node.js lets developers use JavaScript for server-side scriptingâ€”running scripts server-side to produce dynamic web page content before the page is sent to the user's web browser. Consequently, Node.js represents a "JavaScript everywhere" paradigm,[5] unifying web application development around a single programming language, rather than different languages for server side and client side scripts.

Though .js is the conventional filename extension for JavaScript code, the name "Node.js" does not refer to a particular file in this context and is merely the name of the product. Node.js has an event-driven architecture capable of asynchronous I/O. These design choices aim to optimize throughput and scalability in web applications with many input/output operations, as well as for real-time Web applications (e.g., real-time communication programs and browser games).[6]

The Node.js distributed development project, governed by the Node.js Foundation,[7] is facilitated by the Linux Foundation's Collaborative Projects program.[8]

Corporate users of Node.js software include GoDaddy,[9] Groupon,[10] IBM,[11] LinkedIn,[12][13] Microsoft,[14][15] Netflix,[16] PayPal,[17][18] Rakuten, SAP, Tuenti,[19] Voxer,[20] Walmart,[21] and Yahoo!.[22]

Contents 
1	History
2	Overview
2.1	Platform architecture
2.2	Industry support
3	Releases
4	Technical details
4.1	Threading
4.2	V8
4.3	Package management
4.4	Unified API
4.5	Event loop
5	Project governance
6	See also
7	References
8	Further reading
9	External links
History

Ryan Dahl, creator of Node.js, in 2010
Node.js was originally written by Ryan Dahl in 2009,[23] about thirteen years after the introduction of the first server-side JavaScript environment, Netscape's LiveWire Pro Web.[24] The initial release supported only Linux and Mac OS X. Its development and maintenance was led by Dahl and later sponsored by Joyent.[25]

Dahl was inspired to create Node.js after seeing a file upload progress bar on Flickr. The browser did not know how much of the file had been uploaded and had to query the Web server. Dahl desired an easier way.[6][26]

Dahl criticized the limited possibilities of the most popular web server in 2009, Apache HTTP Server, to handle a lot of concurrent connections (up to 10,000 and more) and the most common way of creating code (sequential programming), when code either blocked the entire process or implied multiple execution stacks in the case of simultaneous connections.[27]

Dahl demonstrated the project at the inaugural European JSConf on November 8, 2009.[28][29][30] Node.js combined Google's V8 JavaScript engine, an event loop, and a low-level I/O API.[31]

In January 2010, a package manager was introduced for the Node.js environment called npm.[32] The package manager makes it easier for programmers to publish and share source code of Node.js libraries and is designed to simplify installation, updating, and uninstallation of libraries.[31]

In June 2011, Microsoft and Joyent implemented a native Windows version of Node.js.[33] The first Node.js build supporting Windows was released in July 2011.

In January 2012, Dahl stepped aside, promoting coworker and npm creator Isaac Schlueter to manage the project.[34] In January 2014, Schlueter announced that Timothy J. Fontaine would lead the project.[35]

In December 2014, Fedor Indutny started io.js, a fork of Node.js. Due to the internal conflict over Joyent's governance, io.js was created as an open governance alternative with a separate technical committee.[36][37] Unlike Node.js,[38] the authors planned to keep io.js up-to-date with the latest releases of the Google V8 JavaScript engine.[39]

In February 2015, the intent to form a neutral Node.js Foundation was announced. By June 2015, the Node.js and io.js communities voted to work together under the Node.js Foundation.[40]

In September 2015, Node.js v0.12 and io.js v3.3 were merged back together into Node v4.0.[41] This brought V8 ES6 features into Node.js, and a long-term support release cycle.[42] As of 2016, the io.js website recommends that developers switch back to Node.js and that no further releases of io.js are planned due to the merger.[43]

Overview
Node.js allows the creation of Web servers and networking tools using JavaScript and a collection of "modules" that handle various core functionality.[28][31][44][45][46] Modules are provided for file system I/O, networking (DNS, HTTP, TCP, TLS/SSL, or UDP), binary data (buffers), cryptography functions, data streams, and other core functions.[31][45][47] Node.js's modules use an API designed to reduce the complexity of writing server applications.[31][45]

Node.js is officially supported on Linux, macOS, Microsoft Windows, SmartOS, FreeBSD, and IBM AIX.[3] The provided source code may also be built on similar operating systems or be modified by third parties to support others such as NonStop[48] and Unix servers. Alternatively, they can be written with CoffeeScript[49] (a JavaScript alternative), Dart or TypeScript (strongly typed forms of JavaScript), or any other language that can compile to JavaScript.[49][50]

Node.js is primarily used to build network programs such as Web servers.[44] The biggest difference between Node.js and PHP is that most functions in PHP block until completion (commands execute only after previous commands finish), while Node.js functions are non-blocking (commands execute concurrently or even in parallel,[51][52] and use callbacks to signal completion or failure).[44]

Platform architecture
Node.js brings event-driven programming to web servers, enabling development of fast web servers in JavaScript.[31] Developers can create highly scalable servers without using threading, by using a simplified model of event-driven programming that uses callbacks to signal the completion of a task.[31] Node.js connects the ease of a scripting language (JavaScript) with the power of Unix network programming.[31]

Node.js was built on the Google V8 JavaScript engine since it was open-sourced under the BSD license. It is extremely fast and proficient with internet fundamentals such as HTTP, DNS, TCP.[28] Also, JavaScript was a well-known language, making Node.js immediately accessible to the entire web development community.[28]

Industry support
There are thousands of open-source libraries for Node.js, most of them hosted on the npm website. The Node.js developer community has two main mailing lists and the IRC channel #node.js on freenode. There are multiple developer conferences and events that support the Node.js community including NodeConf, Node Interactive and Node Summit as well as a number of regional events.

The open-source community has developed web frameworks to accelerate the development of applications. Such frameworks include Connect, Express.js, Socket.IO, Koa.js, Hapi.js, Sails.js, Meteor, Derby, and many others.[31][53] Various packages have also been created for interfacing with other languages or runtime environments such as Microsoft .NET.[54]

Modern desktop IDEs provide editing and debugging features specifically for Node.js applications. Such IDEs include Atom, Brackets, JetBrains WebStorm,[55][56] Microsoft Visual Studio (with Node.js Tools for Visual Studio,[57] or TypeScript with Node definitions,[58][59][60][61]) NetBeans,[62] Nodeclipse Enide Studio [63] (Eclipse-based), and Visual Studio Code.[64][65] Certain online web-based IDEs also support Node.js, such as Codeanywhere, Codenvy, Cloud9 IDE, Koding, and the visual flow editor in Node-RED.

Releases
Release	Code name	Release date	LTS status	Active LTS start	Maintenance start	Maintenance end
v0.10.x		2013-03-11	End-of-life	-	2015-10-01	2016-10-31
v0.12.x		2015-02-06	End-of-life	-	2016-04-01	2016-12-31
4.x	Argon[66]	2015-09-08	End-of-life	2015-10-01	2017-04-01	2018-04-30
5.x		2015-10-29	No LTS	N/A	2016-06-30
6.x	Boron[66]	2016-04-26	Maintenance	2016-10-18	2018-04-30	April 2019
7.x		2016-10-25	No LTS	N/A	2017-06-30
8.x	Carbon[66]	2017-05-30	Active	2017-10-31	April 2019	December 2019
9.x		2017-10-01	No LTS	N/A	June 2018
10.x	Dubnium[66]	2018-04-24	Active	October 2018	April 2020	April 2021
11.x[66]		2018-10-23	No LTS	N/A	June 2019
New major releases of Node.js are cut from the GitHub master branch every six months. Even-numbered versions are cut in April and odd-numbered versions are cut in October. When a new odd version is released, the previous even version undergoes transition to Long Term Support (LTS), which gives that version 18 months of active support from the date it is designated LTS. After these 18 months expire, an LTS release receives an additional 12 months of maintenance support. An active version receives non-breaking backports of changes a few weeks after they land in the current release. A maintenance release only receives critical fixes and documentation updates.[66] The LTS Working Group manages strategy and policy in collaboration with the Technical Steering Committee of the Node.js Foundation.

Technical details

This section may be too technical for most readers to understand. Please help improve it to make it understandable to non-experts, without removing the technical details. (August 2015) (Learn how and when to remove this template message)
Node.js is a Javascript runtime environment that processes incoming requests in a loop, called the event loop.

Threading
Node.js operates on a single thread, using non-blocking I/O calls, allowing it to support tens of thousands of concurrent connections without incurring the cost of thread context switching.[67] The design of sharing a single thread among all the requests that use the observer pattern is intended for building highly concurrent applications, where any function performing I/O must use a callback. To accommodate the single-threaded event loop, Node.js uses the libuv libraryâ€”which, in turn, uses a fixed-sized thread pool that handles some of the non-blocking asynchronous I/O operations.[6]

A downside of this single-threaded approach is that Node.js doesn't allow vertical scaling by increasing the number of CPU cores of the machine it is running on without using an additional module, such as cluster,[51] StrongLoop Process Manager,[68] or pm2.[69] However, developers can increase the default number of threads in the libuv thread pool. The server operating system (OS) is likely to distribute these threads across multiple cores.[70]

A thread pool handles execution of parallel tasks in Node.js. The main thread call functions post tasks to the shared task queue, which threads in the thread pool pull and execute. Inherently non-blocking system functions such as networking translate to kernel-side non-blocking sockets, while inherently blocking system functions such as file I/O run in a blocking way on their own threads. When a thread in the thread pool completes a task, it informs the main thread of this, which in turn, wakes up and executes the registered callback. Since Node.js handles callbacks in serial on the main thread, long lasting computations and other CPU-bound tasks freeze the entire event-loop until completion.[citation needed]

V8
V8 is the JavaScript execution engine built for Google Chrome and open-sourced by Google in 2008. Written in C++, V8 compiles JavaScript source code to native machine code instead of interpreting it in real time.[6]

Node.js uses libuv to handle asynchronous events. Libuv is an abstraction layer for network and file system functionality on both Windows and POSIX-based systems such as Linux, macOS, OSS on NonStop, and Unix.

The core functionality of Node.js resides in a JavaScript library. The Node.js bindings, written in C++, connect these technologies to each other and to the operating system.

Package management
npm is the pre-installed package manager for the Node.js server platform. It installs Node.js programs from the npm registry, organizing the installation and management of third-party Node.js programs. Packages in the npm registry can range from simple helper libraries such as Lodash to task runners such as Grunt.

Unified API
Node.js can be combined with a browser, a database that supports JSON data (such as Postgres,[71] MongoDB, or CouchDB) and JSON for a unified JavaScript development stack. With the adaptation of what were essentially server-side development patterns such as MVC, MVP, MVVM, etc., Node.js allows the reuse of the same model and service interface between client-side and server-side.

Event loop
Node.js registers with the operating system so the OS notifies it of connections and issues a callback. Within the Node.js runtime, each connection is a small heap allocation. Traditionally, relatively heavyweight OS processes or threads handled each connection. Node.js uses an event loop for scalability, instead of processes or threads.[72] In contrast to other event-driven servers, Node.js's event loop does not need to be called explicitly. Instead callbacks are defined, and the server automatically enters the event loop at the end of the callback definition. Node.js exits the event loop when there are no further callbacks to be performed.

Project governance
In 2015, various branches of the greater Node.js community began working under the vendor-neutral Node.js Foundation. The stated purpose of the organization "is to enable widespread adoption and help accelerate development of Node.js and other related modules through an open governance model that encourages participation, technical contribution, and a framework for long-term stewardship by an ecosystem invested in Node.js' success."[73]

The Node.js Foundation Technical Steering Committee (TSC) is the technical governing body of the Node.js Foundation. The TSC is responsible for the core Node.js repo as well as dependent and adjacent projects. Generally the TSC delegates administration of these projects to working groups or committees.[74] The LTS group that manages long term supported releases is one such group. Other current groups include: Website, Streams, Build, Diagnostics, i18n, Evangelism, Docker, Addon API, Benchmarking, Post-mortem, Intl, Documentation, and Testing.[75]

In August, 2017, a governance breakdown precipitated efforts to repair the resulting damage and to create a path to future stability of governance.[76]

See also
	Free software portal
List of server-side JavaScript implementations
List of JavaScript libraries
MEAN (software bundle)
Online JavaScript IDE
Rhino (JavaScript engine)
Application server

Node.js
Node.js logo.svg
Original author(s)	Ryan Dahl
Developer(s)	Joyent
Initial release	May 27, 2009; 9 years ago[1]
Stable release	
10.4.0 / June 6, 2018; 6 days ago[2]
Repository	
https://github.com/nodejs/node
Edit this at Wikidata
Written in	C, C++, JavaScript
Operating system	Linux, macOS, Microsoft Windows, SmartOS, FreeBSD, IBM AIX[3]
Type	Run-time environment
License	MIT[4]
Website	nodejs.org
Node.js is an open-source, cross-platform JavaScript run-time environment that executes JavaScript code server-side. Historically, JavaScript was used primarily for client-side scripting, in which scripts written in JavaScript are embedded in a webpage's HTML and run client-side by a JavaScript engine in the user's web browser. Node.js lets developers use JavaScript for server-side scriptingâ€”running scripts server-side to produce dynamic web page content before the page is sent to the user's web browser. Consequently, Node.js represents a "JavaScript everywhere" paradigm,[5] unifying web application development around a single programming language, rather than different languages for server side and client side scripts.

Though .js is the conventional filename extension for JavaScript code, the name "Node.js" does not refer to a particular file in this context and is merely the name of the product. Node.js has an event-driven architecture capable of asynchronous I/O. These design choices aim to optimize throughput and scalability in web applications with many input/output operations, as well as for real-time Web applications (e.g., real-time communication programs and browser games).[6]

The Node.js distributed development project, governed by the Node.js Foundation,[7] is facilitated by the Linux Foundation's Collaborative Projects program.[8]

Corporate users of Node.js software include GoDaddy,[9] Groupon,[10] IBM,[11] LinkedIn,[12][13] Microsoft,[14][15] Netflix,[16] PayPal,[17][18] Rakuten, SAP, Tuenti,[19] Voxer,[20] Walmart,[21] and Yahoo!.[22]

Contents 
1	History
2	Overview
2.1	Platform architecture
2.2	Industry support
3	Releases
4	Technical details
4.1	Threading
4.2	V8
4.3	Package management
4.4	Unified API
4.5	Event loop
5	Project governance
6	See also
7	References
8	Further reading
9	External links
History

Ryan Dahl, creator of Node.js, in 2010
Node.js was originally written by Ryan Dahl in 2009,[23] about thirteen years after the introduction of the first server-side JavaScript environment, Netscape's LiveWire Pro Web.[24] The initial release supported only Linux and Mac OS X. Its development and maintenance was led by Dahl and later sponsored by Joyent.[25]

Dahl was inspired to create Node.js after seeing a file upload progress bar on Flickr. The browser did not know how much of the file had been uploaded and had to query the Web server. Dahl desired an easier way.[6][26]

Dahl criticized the limited possibilities of the most popular web server in 2009, Apache HTTP Server, to handle a lot of concurrent connections (up to 10,000 and more) and the most common way of creating code (sequential programming), when code either blocked the entire process or implied multiple execution stacks in the case of simultaneous connections.[27]

Dahl demonstrated the project at the inaugural European JSConf on November 8, 2009.[28][29][30] Node.js combined Google's V8 JavaScript engine, an event loop, and a low-level I/O API.[31]

In January 2010, a package manager was introduced for the Node.js environment called npm.[32] The package manager makes it easier for programmers to publish and share source code of Node.js libraries and is designed to simplify installation, updating, and uninstallation of libraries.[31]

In June 2011, Microsoft and Joyent implemented a native Windows version of Node.js.[33] The first Node.js build supporting Windows was released in July 2011.

In January 2012, Dahl stepped aside, promoting coworker and npm creator Isaac Schlueter to manage the project.[34] In January 2014, Schlueter announced that Timothy J. Fontaine would lead the project.[35]

In December 2014, Fedor Indutny started io.js, a fork of Node.js. Due to the internal conflict over Joyent's governance, io.js was created as an open governance alternative with a separate technical committee.[36][37] Unlike Node.js,[38] the authors planned to keep io.js up-to-date with the latest releases of the Google V8 JavaScript engine.[39]

In February 2015, the intent to form a neutral Node.js Foundation was announced. By June 2015, the Node.js and io.js communities voted to work together under the Node.js Foundation.[40]

In September 2015, Node.js v0.12 and io.js v3.3 were merged back together into Node v4.0.[41] This brought V8 ES6 features into Node.js, and a long-term support release cycle.[42] As of 2016, the io.js website recommends that developers switch back to Node.js and that no further releases of io.js are planned due to the merger.[43]

Overview
Node.js allows the creation of Web servers and networking tools using JavaScript and a collection of "modules" that handle various core functionality.[28][31][44][45][46] Modules are provided for file system I/O, networking (DNS, HTTP, TCP, TLS/SSL, or UDP), binary data (buffers), cryptography functions, data streams, and other core functions.[31][45][47] Node.js's modules use an API designed to reduce the complexity of writing server applications.[31][45]

Node.js is officially supported on Linux, macOS, Microsoft Windows, SmartOS, FreeBSD, and IBM AIX.[3] The provided source code may also be built on similar operating systems or be modified by third parties to support others such as NonStop[48] and Unix servers. Alternatively, they can be written with CoffeeScript[49] (a JavaScript alternative), Dart or TypeScript (strongly typed forms of JavaScript), or any other language that can compile to JavaScript.[49][50]

Node.js is primarily used to build network programs such as Web servers.[44] The biggest difference between Node.js and PHP is that most functions in PHP block until completion (commands execute only after previous commands finish), while Node.js functions are non-blocking (commands execute concurrently or even in parallel,[51][52] and use callbacks to signal completion or failure).[44]

Platform architecture
Node.js brings event-driven programming to web servers, enabling development of fast web servers in JavaScript.[31] Developers can create highly scalable servers without using threading, by using a simplified model of event-driven programming that uses callbacks to signal the completion of a task.[31] Node.js connects the ease of a scripting language (JavaScript) with the power of Unix network programming.[31]

Node.js was built on the Google V8 JavaScript engine since it was open-sourced under the BSD license. It is extremely fast and proficient with internet fundamentals such as HTTP, DNS, TCP.[28] Also, JavaScript was a well-known language, making Node.js immediately accessible to the entire web development community.[28]

Industry support
There are thousands of open-source libraries for Node.js, most of them hosted on the npm website. The Node.js developer community has two main mailing lists and the IRC channel #node.js on freenode. There are multiple developer conferences and events that support the Node.js community including NodeConf, Node Interactive and Node Summit as well as a number of regional events.

The open-source community has developed web frameworks to accelerate the development of applications. Such frameworks include Connect, Express.js, Socket.IO, Koa.js, Hapi.js, Sails.js, Meteor, Derby, and many others.[31][53] Various packages have also been created for interfacing with other languages or runtime environments such as Microsoft .NET.[54]

Modern desktop IDEs provide editing and debugging features specifically for Node.js applications. Such IDEs include Atom, Brackets, JetBrains WebStorm,[55][56] Microsoft Visual Studio (with Node.js Tools for Visual Studio,[57] or TypeScript with Node definitions,[58][59][60][61]) NetBeans,[62] Nodeclipse Enide Studio [63] (Eclipse-based), and Visual Studio Code.[64][65] Certain online web-based IDEs also support Node.js, such as Codeanywhere, Codenvy, Cloud9 IDE, Koding, and the visual flow editor in Node-RED.

Releases
Release	Code name	Release date	LTS status	Active LTS start	Maintenance start	Maintenance end
v0.10.x		2013-03-11	End-of-life	-	2015-10-01	2016-10-31
v0.12.x		2015-02-06	End-of-life	-	2016-04-01	2016-12-31
4.x	Argon[66]	2015-09-08	End-of-life	2015-10-01	2017-04-01	2018-04-30
5.x		2015-10-29	No LTS	N/A	2016-06-30
6.x	Boron[66]	2016-04-26	Maintenance	2016-10-18	2018-04-30	April 2019
7.x		2016-10-25	No LTS	N/A	2017-06-30
8.x	Carbon[66]	2017-05-30	Active	2017-10-31	April 2019	December 2019
9.x		2017-10-01	No LTS	N/A	June 2018
10.x	Dubnium[66]	2018-04-24	Active	October 2018	April 2020	April 2021
11.x[66]		2018-10-23	No LTS	N/A	June 2019
New major releases of Node.js are cut from the GitHub master branch every six months. Even-numbered versions are cut in April and odd-numbered versions are cut in October. When a new odd version is released, the previous even version undergoes transition to Long Term Support (LTS), which gives that version 18 months of active support from the date it is designated LTS. After these 18 months expire, an LTS release receives an additional 12 months of maintenance support. An active version receives non-breaking backports of changes a few weeks after they land in the current release. A maintenance release only receives critical fixes and documentation updates.[66] The LTS Working Group manages strategy and policy in collaboration with the Technical Steering Committee of the Node.js Foundation.

Technical details

This section may be too technical for most readers to understand. Please help improve it to make it understandable to non-experts, without removing the technical details. (August 2015) (Learn how and when to remove this template message)
Node.js is a Javascript runtime environment that processes incoming requests in a loop, called the event loop.

Threading
Node.js operates on a single thread, using non-blocking I/O calls, allowing it to support tens of thousands of concurrent connections without incurring the cost of thread context switching.[67] The design of sharing a single thread among all the requests that use the observer pattern is intended for building highly concurrent applications, where any function performing I/O must use a callback. To accommodate the single-threaded event loop, Node.js uses the libuv libraryâ€”which, in turn, uses a fixed-sized thread pool that handles some of the non-blocking asynchronous I/O operations.[6]

A downside of this single-threaded approach is that Node.js doesn't allow vertical scaling by increasing the number of CPU cores of the machine it is running on without using an additional module, such as cluster,[51] StrongLoop Process Manager,[68] or pm2.[69] However, developers can increase the default number of threads in the libuv thread pool. The server operating system (OS) is likely to distribute these threads across multiple cores.[70]

A thread pool handles execution of parallel tasks in Node.js. The main thread call functions post tasks to the shared task queue, which threads in the thread pool pull and execute. Inherently non-blocking system functions such as networking translate to kernel-side non-blocking sockets, while inherently blocking system functions such as file I/O run in a blocking way on their own threads. When a thread in the thread pool completes a task, it informs the main thread of this, which in turn, wakes up and executes the registered callback. Since Node.js handles callbacks in serial on the main thread, long lasting computations and other CPU-bound tasks freeze the entire event-loop until completion.[citation needed]

V8
V8 is the JavaScript execution engine built for Google Chrome and open-sourced by Google in 2008. Written in C++, V8 compiles JavaScript source code to native machine code instead of interpreting it in real time.[6]

Node.js uses libuv to handle asynchronous events. Libuv is an abstraction layer for network and file system functionality on both Windows and POSIX-based systems such as Linux, macOS, OSS on NonStop, and Unix.

The core functionality of Node.js resides in a JavaScript library. The Node.js bindings, written in C++, connect these technologies to each other and to the operating system.

Package management
npm is the pre-installed package manager for the Node.js server platform. It installs Node.js programs from the npm registry, organizing the installation and management of third-party Node.js programs. Packages in the npm registry can range from simple helper libraries such as Lodash to task runners such as Grunt.

Unified API
Node.js can be combined with a browser, a database that supports JSON data (such as Postgres,[71] MongoDB, or CouchDB) and JSON for a unified JavaScript development stack. With the adaptation of what were essentially server-side development patterns such as MVC, MVP, MVVM, etc., Node.js allows the reuse of the same model and service interface between client-side and server-side.

Event loop
Node.js registers with the operating system so the OS notifies it of connections and issues a callback. Within the Node.js runtime, each connection is a small heap allocation. Traditionally, relatively heavyweight OS processes or threads handled each connection. Node.js uses an event loop for scalability, instead of processes or threads.[72] In contrast to other event-driven servers, Node.js's event loop does not need to be called explicitly. Instead callbacks are defined, and the server automatically enters the event loop at the end of the callback definition. Node.js exits the event loop when there are no further callbacks to be performed.

Project governance
In 2015, various branches of the greater Node.js community began working under the vendor-neutral Node.js Foundation. The stated purpose of the organization "is to enable widespread adoption and help accelerate development of Node.js and other related modules through an open governance model that encourages participation, technical contribution, and a framework for long-term stewardship by an ecosystem invested in Node.js' success."[73]

The Node.js Foundation Technical Steering Committee (TSC) is the technical governing body of the Node.js Foundation. The TSC is responsible for the core Node.js repo as well as dependent and adjacent projects. Generally the TSC delegates administration of these projects to working groups or committees.[74] The LTS group that manages long term supported releases is one such group. Other current groups include: Website, Streams, Build, Diagnostics, i18n, Evangelism, Docker, Addon API, Benchmarking, Post-mortem, Intl, Documentation, and Testing.[75]

In August, 2017, a governance breakdown precipitated efforts to repair the resulting damage and to create a path to future stability of governance.[76]

See also
	Free software portal
List of server-side JavaScript implementations
List of JavaScript libraries
MEAN (software bundle)
Online JavaScript IDE
Rhino (JavaScript engine)
Application server

Node.js
Node.js logo.svg
Original author(s)	Ryan Dahl
Developer(s)	Joyent
Initial release	May 27, 2009; 9 years ago[1]
Stable release	
10.4.0 / June 6, 2018; 6 days ago[2]
Repository	
https://github.com/nodejs/node
Edit this at Wikidata
Written in	C, C++, JavaScript
Operating system	Linux, macOS, Microsoft Windows, SmartOS, FreeBSD, IBM AIX[3]
Type	Run-time environment
License	MIT[4]
Website	nodejs.org
Node.js is an open-source, cross-platform JavaScript run-time environment that executes JavaScript code server-side. Historically, JavaScript was used primarily for client-side scripting, in which scripts written in JavaScript are embedded in a webpage's HTML and run client-side by a JavaScript engine in the user's web browser. Node.js lets developers use JavaScript for server-side scriptingâ€”running scripts server-side to produce dynamic web page content before the page is sent to the user's web browser. Consequently, Node.js represents a "JavaScript everywhere" paradigm,[5] unifying web application development around a single programming language, rather than different languages for server side and client side scripts.

Though .js is the conventional filename extension for JavaScript code, the name "Node.js" does not refer to a particular file in this context and is merely the name of the product. Node.js has an event-driven architecture capable of asynchronous I/O. These design choices aim to optimize throughput and scalability in web applications with many input/output operations, as well as for real-time Web applications (e.g., real-time communication programs and browser games).[6]

The Node.js distributed development project, governed by the Node.js Foundation,[7] is facilitated by the Linux Foundation's Collaborative Projects program.[8]

Corporate users of Node.js software include GoDaddy,[9] Groupon,[10] IBM,[11] LinkedIn,[12][13] Microsoft,[14][15] Netflix,[16] PayPal,[17][18] Rakuten, SAP, Tuenti,[19] Voxer,[20] Walmart,[21] and Yahoo!.[22]

Contents 
1	History
2	Overview
2.1	Platform architecture
2.2	Industry support
3	Releases
4	Technical details
4.1	Threading
4.2	V8
4.3	Package management
4.4	Unified API
4.5	Event loop
5	Project governance
6	See also
7	References
8	Further reading
9	External links
History

Ryan Dahl, creator of Node.js, in 2010
Node.js was originally written by Ryan Dahl in 2009,[23] about thirteen years after the introduction of the first server-side JavaScript environment, Netscape's LiveWire Pro Web.[24] The initial release supported only Linux and Mac OS X. Its development and maintenance was led by Dahl and later sponsored by Joyent.[25]

Dahl was inspired to create Node.js after seeing a file upload progress bar on Flickr. The browser did not know how much of the file had been uploaded and had to query the Web server. Dahl desired an easier way.[6][26]

Dahl criticized the limited possibilities of the most popular web server in 2009, Apache HTTP Server, to handle a lot of concurrent connections (up to 10,000 and more) and the most common way of creating code (sequential programming), when code either blocked the entire process or implied multiple execution stacks in the case of simultaneous connections.[27]

Dahl demonstrated the project at the inaugural European JSConf on November 8, 2009.[28][29][30] Node.js combined Google's V8 JavaScript engine, an event loop, and a low-level I/O API.[31]

In January 2010, a package manager was introduced for the Node.js environment called npm.[32] The package manager makes it easier for programmers to publish and share source code of Node.js libraries and is designed to simplify installation, updating, and uninstallation of libraries.[31]

In June 2011, Microsoft and Joyent implemented a native Windows version of Node.js.[33] The first Node.js build supporting Windows was released in July 2011.

In January 2012, Dahl stepped aside, promoting coworker and npm creator Isaac Schlueter to manage the project.[34] In January 2014, Schlueter announced that Timothy J. Fontaine would lead the project.[35]

In December 2014, Fedor Indutny started io.js, a fork of Node.js. Due to the internal conflict over Joyent's governance, io.js was created as an open governance alternative with a separate technical committee.[36][37] Unlike Node.js,[38] the authors planned to keep io.js up-to-date with the latest releases of the Google V8 JavaScript engine.[39]

In February 2015, the intent to form a neutral Node.js Foundation was announced. By June 2015, the Node.js and io.js communities voted to work together under the Node.js Foundation.[40]

In September 2015, Node.js v0.12 and io.js v3.3 were merged back together into Node v4.0.[41] This brought V8 ES6 features into Node.js, and a long-term support release cycle.[42] As of 2016, the io.js website recommends that developers switch back to Node.js and that no further releases of io.js are planned due to the merger.[43]

Overview
Node.js allows the creation of Web servers and networking tools using JavaScript and a collection of "modules" that handle various core functionality.[28][31][44][45][46] Modules are provided for file system I/O, networking (DNS, HTTP, TCP, TLS/SSL, or UDP), binary data (buffers), cryptography functions, data streams, and other core functions.[31][45][47] Node.js's modules use an API designed to reduce the complexity of writing server applications.[31][45]

Node.js is officially supported on Linux, macOS, Microsoft Windows, SmartOS, FreeBSD, and IBM AIX.[3] The provided source code may also be built on similar operating systems or be modified by third parties to support others such as NonStop[48] and Unix servers. Alternatively, they can be written with CoffeeScript[49] (a JavaScript alternative), Dart or TypeScript (strongly typed forms of JavaScript), or any other language that can compile to JavaScript.[49][50]

Node.js is primarily used to build network programs such as Web servers.[44] The biggest difference between Node.js and PHP is that most functions in PHP block until completion (commands execute only after previous commands finish), while Node.js functions are non-blocking (commands execute concurrently or even in parallel,[51][52] and use callbacks to signal completion or failure).[44]

Platform architecture
Node.js brings event-driven programming to web servers, enabling development of fast web servers in JavaScript.[31] Developers can create highly scalable servers without using threading, by using a simplified model of event-driven programming that uses callbacks to signal the completion of a task.[31] Node.js connects the ease of a scripting language (JavaScript) with the power of Unix network programming.[31]

Node.js was built on the Google V8 JavaScript engine since it was open-sourced under the BSD license. It is extremely fast and proficient with internet fundamentals such as HTTP, DNS, TCP.[28] Also, JavaScript was a well-known language, making Node.js immediately accessible to the entire web development community.[28]

Industry support
There are thousands of open-source libraries for Node.js, most of them hosted on the npm website. The Node.js developer community has two main mailing lists and the IRC channel #node.js on freenode. There are multiple developer conferences and events that support the Node.js community including NodeConf, Node Interactive and Node Summit as well as a number of regional events.

The open-source community has developed web frameworks to accelerate the development of applications. Such frameworks include Connect, Express.js, Socket.IO, Koa.js, Hapi.js, Sails.js, Meteor, Derby, and many others.[31][53] Various packages have also been created for interfacing with other languages or runtime environments such as Microsoft .NET.[54]

Modern desktop IDEs provide editing and debugging features specifically for Node.js applications. Such IDEs include Atom, Brackets, JetBrains WebStorm,[55][56] Microsoft Visual Studio (with Node.js Tools for Visual Studio,[57] or TypeScript with Node definitions,[58][59][60][61]) NetBeans,[62] Nodeclipse Enide Studio [63] (Eclipse-based), and Visual Studio Code.[64][65] Certain online web-based IDEs also support Node.js, such as Codeanywhere, Codenvy, Cloud9 IDE, Koding, and the visual flow editor in Node-RED.

Releases
Release	Code name	Release date	LTS status	Active LTS start	Maintenance start	Maintenance end
v0.10.x		2013-03-11	End-of-life	-	2015-10-01	2016-10-31
v0.12.x		2015-02-06	End-of-life	-	2016-04-01	2016-12-31
4.x	Argon[66]	2015-09-08	End-of-life	2015-10-01	2017-04-01	2018-04-30
5.x		2015-10-29	No LTS	N/A	2016-06-30
6.x	Boron[66]	2016-04-26	Maintenance	2016-10-18	2018-04-30	April 2019
7.x		2016-10-25	No LTS	N/A	2017-06-30
8.x	Carbon[66]	2017-05-30	Active	2017-10-31	April 2019	December 2019
9.x		2017-10-01	No LTS	N/A	June 2018
10.x	Dubnium[66]	2018-04-24	Active	October 2018	April 2020	April 2021
11.x[66]		2018-10-23	No LTS	N/A	June 2019
New major releases of Node.js are cut from the GitHub master branch every six months. Even-numbered versions are cut in April and odd-numbered versions are cut in October. When a new odd version is released, the previous even version undergoes transition to Long Term Support (LTS), which gives that version 18 months of active support from the date it is designated LTS. After these 18 months expire, an LTS release receives an additional 12 months of maintenance support. An active version receives non-breaking backports of changes a few weeks after they land in the current release. A maintenance release only receives critical fixes and documentation updates.[66] The LTS Working Group manages strategy and policy in collaboration with the Technical Steering Committee of the Node.js Foundation.

Technical details

This section may be too technical for most readers to understand. Please help improve it to make it understandable to non-experts, without removing the technical details. (August 2015) (Learn how and when to remove this template message)
Node.js is a Javascript runtime environment that processes incoming requests in a loop, called the event loop.

Threading
Node.js operates on a single thread, using non-blocking I/O calls, allowing it to support tens of thousands of concurrent connections without incurring the cost of thread context switching.[67] The design of sharing a single thread among all the requests that use the observer pattern is intended for building highly concurrent applications, where any function performing I/O must use a callback. To accommodate the single-threaded event loop, Node.js uses the libuv libraryâ€”which, in turn, uses a fixed-sized thread pool that handles some of the non-blocking asynchronous I/O operations.[6]

A downside of this single-threaded approach is that Node.js doesn't allow vertical scaling by increasing the number of CPU cores of the machine it is running on without using an additional module, such as cluster,[51] StrongLoop Process Manager,[68] or pm2.[69] However, developers can increase the default number of threads in the libuv thread pool. The server operating system (OS) is likely to distribute these threads across multiple cores.[70]

A thread pool handles execution of parallel tasks in Node.js. The main thread call functions post tasks to the shared task queue, which threads in the thread pool pull and execute. Inherently non-blocking system functions such as networking translate to kernel-side non-blocking sockets, while inherently blocking system functions such as file I/O run in a blocking way on their own threads. When a thread in the thread pool completes a task, it informs the main thread of this, which in turn, wakes up and executes the registered callback. Since Node.js handles callbacks in serial on the main thread, long lasting computations and other CPU-bound tasks freeze the entire event-loop until completion.[citation needed]

V8
V8 is the JavaScript execution engine built for Google Chrome and open-sourced by Google in 2008. Written in C++, V8 compiles JavaScript source code to native machine code instead of interpreting it in real time.[6]

Node.js uses libuv to handle asynchronous events. Libuv is an abstraction layer for network and file system functionality on both Windows and POSIX-based systems such as Linux, macOS, OSS on NonStop, and Unix.

The core functionality of Node.js resides in a JavaScript library. The Node.js bindings, written in C++, connect these technologies to each other and to the operating system.

Package management
npm is the pre-installed package manager for the Node.js server platform. It installs Node.js programs from the npm registry, organizing the installation and management of third-party Node.js programs. Packages in the npm registry can range from simple helper libraries such as Lodash to task runners such as Grunt.

Unified API
Node.js can be combined with a browser, a database that supports JSON data (such as Postgres,[71] MongoDB, or CouchDB) and JSON for a unified JavaScript development stack. With the adaptation of what were essentially server-side development patterns such as MVC, MVP, MVVM, etc., Node.js allows the reuse of the same model and service interface between client-side and server-side.

Event loop
Node.js registers with the operating system so the OS notifies it of connections and issues a callback. Within the Node.js runtime, each connection is a small heap allocation. Traditionally, relatively heavyweight OS processes or threads handled each connection. Node.js uses an event loop for scalability, instead of processes or threads.[72] In contrast to other event-driven servers, Node.js's event loop does not need to be called explicitly. Instead callbacks are defined, and the server automatically enters the event loop at the end of the callback definition. Node.js exits the event loop when there are no further callbacks to be performed.

Project governance
In 2015, various branches of the greater Node.js community began working under the vendor-neutral Node.js Foundation. The stated purpose of the organization "is to enable widespread adoption and help accelerate development of Node.js and other related modules through an open governance model that encourages participation, technical contribution, and a framework for long-term stewardship by an ecosystem invested in Node.js' success."[73]

The Node.js Foundation Technical Steering Committee (TSC) is the technical governing body of the Node.js Foundation. The TSC is responsible for the core Node.js repo as well as dependent and adjacent projects. Generally the TSC delegates administration of these projects to working groups or committees.[74] The LTS group that manages long term supported releases is one such group. Other current groups include: Website, Streams, Build, Diagnostics, i18n, Evangelism, Docker, Addon API, Benchmarking, Post-mortem, Intl, Documentation, and Testing.[75]

In August, 2017, a governance breakdown precipitated efforts to repair the resulting damage and to create a path to future stability of governance.[76]

See also
	Free software portal
List of server-side JavaScript implementations
List of JavaScript libraries
MEAN (software bundle)
Online JavaScript IDE
Rhino (JavaScript engine)
Application server